// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"lKzq4":[function(require,module,exports) {
var global = arguments[3];
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "d6ea1d42532a7575";
module.bundle.HMR_BUNDLE_ID = "fe4256060641b553";
"use strict";
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, chrome, browser, globalThis, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: {|[string]: mixed|};
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
interface ExtensionContext {
  runtime: {|
    reload(): void,
    getURL(url: string): string;
    getManifest(): {manifest_version: number, ...};
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
declare var chrome: ExtensionContext;
declare var browser: ExtensionContext;
declare var __parcel__import__: (string) => Promise<void>;
declare var __parcel__importScripts__: (string) => Promise<void>;
declare var globalThis: typeof self;
declare var ServiceWorkerGlobalScope: Object;
*/ var OVERLAY_ID = "__parcel__error__overlay__";
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData[moduleName],
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function(fn) {
            this._acceptCallbacks.push(fn || function() {});
        },
        dispose: function(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData[moduleName] = undefined;
}
module.bundle.Module = Module;
module.bundle.hotData = {};
var checkedAssets, assetsToDispose, assetsToAccept /*: Array<[ParcelRequire, string]> */ ;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf("http") === 0 ? location.hostname : "localhost");
}
function getPort() {
    return HMR_PORT || location.port;
} // eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== "undefined") {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == "https:" && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? "wss" : "ws";
    var ws = new WebSocket(protocol + "://" + hostname + (port ? ":" + port : "") + "/"); // Web extension context
    var extCtx = typeof chrome === "undefined" ? typeof browser === "undefined" ? null : browser : chrome; // Safari doesn't support sourceURL in error stacks.
    // eval may also be disabled via CSP, so do a quick check.
    var supportsSourceURL = false;
    try {
        (0, eval)('throw new Error("test"); //# sourceURL=test.js');
    } catch (err) {
        supportsSourceURL = err.stack.includes("test.js");
    } // $FlowFixMe
    ws.onmessage = async function(event) {
        checkedAssets = {} /*: {|[string]: boolean|} */ ;
        assetsToAccept = [];
        assetsToDispose = [];
        var data = JSON.parse(event.data);
        if (data.type === "update") {
            // Remove error overlay if there is one
            if (typeof document !== "undefined") removeErrorOverlay();
            let assets = data.assets.filter((asset)=>asset.envHash === HMR_ENV_HASH); // Handle HMR Update
            let handled = assets.every((asset)=>{
                return asset.type === "css" || asset.type === "js" && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear(); // Dispatch custom event so other runtimes (e.g React Refresh) are aware.
                if (typeof window !== "undefined" && typeof CustomEvent !== "undefined") window.dispatchEvent(new CustomEvent("parcelhmraccept"));
                await hmrApplyUpdates(assets); // Dispose all old assets.
                let processedAssets = {} /*: {|[string]: boolean|} */ ;
                for(let i = 0; i < assetsToDispose.length; i++){
                    let id = assetsToDispose[i][1];
                    if (!processedAssets[id]) {
                        hmrDispose(assetsToDispose[i][0], id);
                        processedAssets[id] = true;
                    }
                } // Run accept callbacks. This will also re-execute other disposed assets in topological order.
                processedAssets = {};
                for(let i = 0; i < assetsToAccept.length; i++){
                    let id = assetsToAccept[i][1];
                    if (!processedAssets[id]) {
                        hmrAccept(assetsToAccept[i][0], id);
                        processedAssets[id] = true;
                    }
                }
            } else fullReload();
        }
        if (data.type === "error") {
            // Log parcel errors to console
            for (let ansiDiagnostic of data.diagnostics.ansi){
                let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                console.error("\uD83D\uDEA8 [parcel]: " + ansiDiagnostic.message + "\n" + stack + "\n\n" + ansiDiagnostic.hints.join("\n"));
            }
            if (typeof document !== "undefined") {
                // Render the fancy html overlay
                removeErrorOverlay();
                var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe
                document.body.appendChild(overlay);
            }
        }
    };
    ws.onerror = function(e) {
        console.error(e.message);
    };
    ws.onclose = function() {
        console.warn("[parcel] \uD83D\uDEA8 Connection to the HMR server was lost");
    };
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log("[parcel] ✨ Error resolved");
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement("div");
    overlay.id = OVERLAY_ID;
    let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    for (let diagnostic of diagnostics){
        let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame)=>{
            return `${p}
<a href="/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}" style="text-decoration: underline; color: #888" onclick="fetch(this.href); return false">${frame.location}</a>
${frame.code}`;
        }, "") : diagnostic.stack;
        errorHTML += `
      <div>
        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
          🚨 ${diagnostic.message}
        </div>
        <pre>${stack}</pre>
        <div>
          ${diagnostic.hints.map((hint)=>"<div>\uD83D\uDCA1 " + hint + "</div>").join("")}
        </div>
        ${diagnostic.documentation ? `<div>📝 <a style="color: violet" href="${diagnostic.documentation}" target="_blank">Learn more</a></div>` : ""}
      </div>
    `;
    }
    errorHTML += "</div>";
    overlay.innerHTML = errorHTML;
    return overlay;
}
function fullReload() {
    if ("reload" in location) location.reload();
    else if (extCtx && extCtx.runtime && extCtx.runtime.reload) extCtx.runtime.reload();
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute("href", link.getAttribute("href").split("?")[0] + "?" + Date.now()); // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href = links[i].getAttribute("href");
            var hostname = getHostname();
            var servedFromHMRServer = hostname === "localhost" ? new RegExp("^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):" + getPort()).test(href) : href.indexOf(hostname + ":" + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrDownload(asset) {
    if (asset.type === "js") {
        if (typeof document !== "undefined") {
            let script = document.createElement("script");
            script.src = asset.url + "?t=" + Date.now();
            if (asset.outputFormat === "esmodule") script.type = "module";
            return new Promise((resolve, reject)=>{
                var _document$head;
                script.onload = ()=>resolve(script);
                script.onerror = reject;
                (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);
            });
        } else if (typeof importScripts === "function") {
            // Worker scripts
            if (asset.outputFormat === "esmodule") return import(asset.url + "?t=" + Date.now());
            else return new Promise((resolve, reject)=>{
                try {
                    importScripts(asset.url + "?t=" + Date.now());
                    resolve();
                } catch (err) {
                    reject(err);
                }
            });
        }
    }
}
async function hmrApplyUpdates(assets) {
    global.parcelHotUpdate = Object.create(null);
    let scriptsToRemove;
    try {
        // If sourceURL comments aren't supported in eval, we need to load
        // the update from the dev server over HTTP so that stack traces
        // are correct in errors/logs. This is much slower than eval, so
        // we only do it if needed (currently just Safari).
        // https://bugs.webkit.org/show_bug.cgi?id=137297
        // This path is also taken if a CSP disallows eval.
        if (!supportsSourceURL) {
            let promises = assets.map((asset)=>{
                var _hmrDownload;
                return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch((err)=>{
                    // Web extension bugfix for Chromium
                    // https://bugs.chromium.org/p/chromium/issues/detail?id=1255412#c12
                    if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3) {
                        if (typeof ServiceWorkerGlobalScope != "undefined" && global instanceof ServiceWorkerGlobalScope) {
                            extCtx.runtime.reload();
                            return;
                        }
                        asset.url = extCtx.runtime.getURL("/__parcel_hmr_proxy__?url=" + encodeURIComponent(asset.url + "?t=" + Date.now()));
                        return hmrDownload(asset);
                    }
                    throw err;
                });
            });
            scriptsToRemove = await Promise.all(promises);
        }
        assets.forEach(function(asset) {
            hmrApply(module.bundle.root, asset);
        });
    } finally{
        delete global.parcelHotUpdate;
        if (scriptsToRemove) scriptsToRemove.forEach((script)=>{
            if (script) {
                var _document$head2;
                (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);
            }
        });
    }
}
function hmrApply(bundle, asset) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === "css") reloadCSS();
    else if (asset.type === "js") {
        let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            if (modules[asset.id]) {
                // Remove dependencies that are removed and will become orphaned.
                // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.
                let oldDeps = modules[asset.id][1];
                for(let dep in oldDeps)if (!deps[dep] || deps[dep] !== oldDeps[dep]) {
                    let id = oldDeps[dep];
                    let parents = getParents(module.bundle.root, id);
                    if (parents.length === 1) hmrDelete(module.bundle.root, id);
                }
            }
            if (supportsSourceURL) // Global eval. We would use `new Function` here but browser
            // support for source maps is better with eval.
            (0, eval)(asset.output);
             // $FlowFixMe
            let fn = global.parcelHotUpdate[asset.id];
            modules[asset.id] = [
                fn,
                deps
            ];
        } else if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrDelete(bundle, id) {
    let modules = bundle.modules;
    if (!modules) return;
    if (modules[id]) {
        // Collect dependencies that will become orphaned when this module is deleted.
        let deps = modules[id][1];
        let orphans = [];
        for(let dep in deps){
            let parents = getParents(module.bundle.root, deps[dep]);
            if (parents.length === 1) orphans.push(deps[dep]);
        } // Delete the module. This must be done before deleting dependencies in case of circular dependencies.
        delete modules[id];
        delete bundle.cache[id]; // Now delete the orphans.
        orphans.forEach((id)=>{
            hmrDelete(module.bundle.root, id);
        });
    } else if (bundle.parent) hmrDelete(bundle.parent, id);
}
function hmrAcceptCheck(bundle, id, depsByBundle) {
    if (hmrAcceptCheckOne(bundle, id, depsByBundle)) return true;
     // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.
    let parents = getParents(module.bundle.root, id);
    let accepted = false;
    while(parents.length > 0){
        let v = parents.shift();
        let a = hmrAcceptCheckOne(v[0], v[1], null);
        if (a) // If this parent accepts, stop traversing upward, but still consider siblings.
        accepted = true;
        else {
            // Otherwise, queue the parents in the next level upward.
            let p = getParents(module.bundle.root, v[1]);
            if (p.length === 0) {
                // If there are no parents, then we've reached an entry without accepting. Reload.
                accepted = false;
                break;
            }
            parents.push(...p);
        }
    }
    return accepted;
}
function hmrAcceptCheckOne(bundle, id, depsByBundle) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return true;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToDispose.push([
        bundle,
        id
    ]);
    if (!cached || cached.hot && cached.hot._acceptCallbacks.length) {
        assetsToAccept.push([
            bundle,
            id
        ]);
        return true;
    }
}
function hmrDispose(bundle, id) {
    var cached = bundle.cache[id];
    bundle.hotData[id] = {};
    if (cached && cached.hot) cached.hot.data = bundle.hotData[id];
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData[id]);
    });
    delete bundle.cache[id];
}
function hmrAccept(bundle, id) {
    // Execute the module.
    bundle(id); // Run the accept callbacks in the new version of the module.
    var cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) {
            assetsToAlsoAccept.forEach(function(a) {
                hmrDispose(a[0], a[1]);
            }); // $FlowFixMe[method-unbinding]
            assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
        }
    });
}

},{}],"bNKaB":[function(require,module,exports) {
// src/app.js
var _auth = require("./auth");
var _api = require("./api");
async function init() {
    // Get our UI elements
    const userSection = document.querySelector("#user");
    const loginBtn = document.querySelector("#login");
    const logoutBtn = document.querySelector("#logout");
    const getFragmentsBtn = document.querySelector("#getFragments");
    const getFragmentByIdBtn = document.querySelector("#getFragmentById");
    const fragmentsList = document.querySelector("#fragmentsList");
    // Wire up event handlers to deal with login and logout.
    loginBtn.onclick = (0, _auth.login);
    logoutBtn.onclick = (0, _auth.logout);
    getFragmentsBtn.onclick = async ()=>{
        const user = await (0, _auth.getUser)();
        const fragments = await (0, _api.getUserFragments)(user);
        displayFragments(fragments);
    };
    getFragmentByIdBtn.onclick = async ()=>{
        const user = await (0, _auth.getUser)();
        const fragmentId = document.getElementById("fragmentId").value;
        const fragment = await (0, _api.getUserFragment)(user, fragmentId);
        await displayFragment(fragment);
    };
    // See if we're signed in (i.e., we'll have a `user` object)
    const user = await (0, _auth.getUser)();
    if (!user) {
        // Disable the Logout button
        logoutBtn.disabled = true;
        return;
    }
    // Log the user info for debugging purposes
    console.log({
        user
    });
    // Update the UI to welcome the user
    userSection.hidden = false;
    // Show the user's username
    userSection.querySelector(".username").innerText = user.username;
    // Disable the Login button
    loginBtn.disabled = true;
    (0, _api.getUserFragments)(user);
}
function displayFragments(fragments) {
    const fragmentsList = document.querySelector("#fragmentsList");
    fragmentsList.innerHTML = "";
    fragments.forEach(async (fragment)=>{
        const li = document.createElement("li");
        li.textContent = `ID: ${fragment.id} Size: ${fragment.size} | Type: ${fragment.type}`;
        fragmentsList.appendChild(li);
    });
}
async function displayFragment(fragment) {
    const fragmentsList = document.querySelector("#fragmentsList");
    fragmentsList.innerHTML = "";
    const li = document.createElement("li");
    li.textContent = `Size: ${fragment.size} | Type: ${fragment.type} | Body: ${await fragment.text()}`;
    fragmentsList.appendChild(li);
}
const postForm = document.getElementById("postForm");
postForm.addEventListener("submit", submit);
async function submit(event) {
    event.preventDefault();
    let newFragment;
    const user = await (0, _auth.getUser)();
    const type = document.getElementById("type").value;
    const content = document.getElementById("content").value;
    if (content.length !== 0) newFragment = content;
    (0, _api.postUserFragments)(user, newFragment, type);
}
document.getElementById("getFragmentByIdForm").addEventListener("submit", function(event) {
    event.preventDefault();
});
document.getElementById("getFragmentsForm").addEventListener("submit", function(event) {
    event.preventDefault();
});
// Wait for the DOM to be ready, then start the app
addEventListener("DOMContentLoaded", init);

},{"./auth":"lT1n0","./api":"8Zgej"}],"lT1n0":[function(require,module,exports) {
// src/auth.js
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getUser", ()=>getUser);
parcelHelpers.export(exports, "login", ()=>login);
parcelHelpers.export(exports, "logout", ()=>logout);
var _awsAmplify = require("aws-amplify");
let getUser;
let login;
let logout;
{
    let userCredentials = "";
    getUser = async function() {
        if (userCredentials) return {
            username: "user1@email.com",
            authorizationHeaders: ()=>{
                const headers = {};
                headers["Authorization"] = `Basic ${btoa(userCredentials)}`;
                return headers;
            }
        };
        return null;
    };
    login = function() {
        userCredentials = "user1@email.com:password1";
        const userSection = document.querySelector("#user");
        userSection.hidden = false;
    };
    logout = function() {
        userCredentials = "";
        const userSection = document.querySelector("#user");
        userSection.hidden = true;
    };
}
},{"aws-amplify":"ctfB3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ctfB3":[function(require,module,exports) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Amplify", ()=>(0, _core.Amplify));
parcelHelpers.export(exports, "Analytics", ()=>(0, _analytics.Analytics));
parcelHelpers.export(exports, "AWSPinpointProvider", ()=>(0, _analytics.AWSPinpointProvider));
parcelHelpers.export(exports, "AWSKinesisProvider", ()=>(0, _analytics.AWSKinesisProvider));
parcelHelpers.export(exports, "AWSKinesisFirehoseProvider", ()=>(0, _analytics.AWSKinesisFirehoseProvider));
parcelHelpers.export(exports, "AmazonPersonalizeProvider", ()=>(0, _analytics.AmazonPersonalizeProvider));
parcelHelpers.export(exports, "Auth", ()=>(0, _auth.Auth));
parcelHelpers.export(exports, "Storage", ()=>(0, _storage.Storage));
parcelHelpers.export(exports, "StorageClass", ()=>(0, _storage.StorageClass));
parcelHelpers.export(exports, "API", ()=>(0, _api.API));
parcelHelpers.export(exports, "APIClass", ()=>(0, _api.APIClass));
parcelHelpers.export(exports, "graphqlOperation", ()=>(0, _api.graphqlOperation));
parcelHelpers.export(exports, "AuthModeStrategyType", ()=>(0, _datastore.AuthModeStrategyType));
parcelHelpers.export(exports, "DataStore", ()=>(0, _datastore.DataStore));
parcelHelpers.export(exports, "Predicates", ()=>(0, _datastore.Predicates));
parcelHelpers.export(exports, "SortDirection", ()=>(0, _datastore.SortDirection));
parcelHelpers.export(exports, "syncExpression", ()=>(0, _datastore.syncExpression));
parcelHelpers.export(exports, "PubSub", ()=>(0, _pubsub.PubSub));
parcelHelpers.export(exports, "Cache", ()=>(0, _cache.Cache));
parcelHelpers.export(exports, "Interactions", ()=>(0, _interactions.Interactions));
parcelHelpers.export(exports, "Notifications", ()=>(0, _notifications.Notifications));
parcelHelpers.export(exports, "Predictions", ()=>(0, _predictions.Predictions));
parcelHelpers.export(exports, "Logger", ()=>(0, _core.ConsoleLogger));
parcelHelpers.export(exports, "Hub", ()=>(0, _core.Hub));
parcelHelpers.export(exports, "ClientDevice", ()=>(0, _core.ClientDevice));
parcelHelpers.export(exports, "Signer", ()=>(0, _core.Signer));
parcelHelpers.export(exports, "I18n", ()=>(0, _core.I18n));
parcelHelpers.export(exports, "ServiceWorker", ()=>(0, _core.ServiceWorker));
parcelHelpers.export(exports, "AWSCloudWatchProvider", ()=>(0, _core.AWSCloudWatchProvider));
parcelHelpers.export(exports, "withSSRContext", ()=>(0, _withSSRContext.withSSRContext));
parcelHelpers.export(exports, "Geo", ()=>(0, _geo.Geo));
var _core = require("@aws-amplify/core");
var _analytics = require("@aws-amplify/analytics");
var _auth = require("@aws-amplify/auth");
var _storage = require("@aws-amplify/storage");
var _api = require("@aws-amplify/api");
var _datastore = require("@aws-amplify/datastore");
var _pubsub = require("@aws-amplify/pubsub");
var _cache = require("@aws-amplify/cache");
var _interactions = require("@aws-amplify/interactions");
var _notifications = require("@aws-amplify/notifications");
var _predictions = require("@aws-amplify/predictions");
var _withSSRContext = require("./withSSRContext");
var _geo = require("@aws-amplify/geo");

},{"@aws-amplify/core":"hZcAF","@aws-amplify/analytics":false,"@aws-amplify/auth":"51piL","@aws-amplify/storage":false,"@aws-amplify/api":false,"@aws-amplify/datastore":false,"@aws-amplify/pubsub":false,"@aws-amplify/cache":false,"@aws-amplify/interactions":false,"@aws-amplify/notifications":false,"@aws-amplify/predictions":false,"./withSSRContext":false,"@aws-amplify/geo":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hZcAF":[function(require,module,exports) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Amplify", ()=>(0, _amplify.Amplify));
parcelHelpers.export(exports, "AmplifyClass", ()=>(0, _amplify.AmplifyClass));
parcelHelpers.export(exports, "ClientDevice", ()=>(0, _clientDevice.ClientDevice));
parcelHelpers.export(exports, "ConsoleLogger", ()=>(0, _logger.ConsoleLogger));
parcelHelpers.export(exports, "Logger", ()=>(0, _logger.ConsoleLogger));
parcelHelpers.export(exports, "invalidParameter", ()=>(0, _errors.invalidParameter));
parcelHelpers.export(exports, "missingConfig", ()=>(0, _errors.missingConfig));
parcelHelpers.export(exports, "Hub", ()=>(0, _hub.Hub));
parcelHelpers.export(exports, "I18n", ()=>(0, _i18N.I18n));
parcelHelpers.export(exports, "browserOrNode", ()=>(0, _js.browserOrNode));
parcelHelpers.export(exports, "filenameToContentType", ()=>(0, _js.filenameToContentType));
parcelHelpers.export(exports, "generateRandomString", ()=>(0, _js.generateRandomString));
parcelHelpers.export(exports, "isEmpty", ()=>(0, _js.isEmpty));
parcelHelpers.export(exports, "isStrictObject", ()=>(0, _js.isStrictObject));
parcelHelpers.export(exports, "isTextFile", ()=>(0, _js.isTextFile));
parcelHelpers.export(exports, "isWebWorker", ()=>(0, _js.isWebWorker));
parcelHelpers.export(exports, "makeQuerablePromise", ()=>(0, _js.makeQuerablePromise));
parcelHelpers.export(exports, "objectLessAttributes", ()=>(0, _js.objectLessAttributes));
parcelHelpers.export(exports, "sortByField", ()=>(0, _js.sortByField));
parcelHelpers.export(exports, "transferKeyToLowerCase", ()=>(0, _js.transferKeyToLowerCase));
parcelHelpers.export(exports, "transferKeyToUpperCase", ()=>(0, _js.transferKeyToUpperCase));
parcelHelpers.export(exports, "Signer", ()=>(0, _signer.Signer));
parcelHelpers.export(exports, "parseAWSExports", ()=>(0, _parseAWSExports.parseAWSExports));
parcelHelpers.export(exports, "AWSCloudWatchProvider", ()=>(0, _providers.AWSCloudWatchProvider));
parcelHelpers.export(exports, "FacebookOAuth", ()=>(0, _oauthHelper.FacebookOAuth));
parcelHelpers.export(exports, "GoogleOAuth", ()=>(0, _oauthHelper.GoogleOAuth));
parcelHelpers.export(exports, "AppState", ()=>(0, _rncomponents.AppState));
parcelHelpers.export(exports, "AsyncStorage", ()=>(0, _rncomponents.AsyncStorage));
parcelHelpers.export(exports, "Linking", ()=>(0, _rncomponents.Linking));
parcelHelpers.export(exports, "Credentials", ()=>(0, _credentials.Credentials));
parcelHelpers.export(exports, "CredentialsClass", ()=>(0, _credentials.CredentialsClass));
parcelHelpers.export(exports, "ServiceWorker", ()=>(0, _serviceWorker.ServiceWorker));
parcelHelpers.export(exports, "StorageHelper", ()=>(0, _storageHelper.StorageHelper));
parcelHelpers.export(exports, "MemoryStorage", ()=>(0, _storageHelper.MemoryStorage));
parcelHelpers.export(exports, "UniversalStorage", ()=>(0, _universalStorage.UniversalStorage));
parcelHelpers.export(exports, "Platform", ()=>(0, _platform.Platform));
parcelHelpers.export(exports, "getAmplifyUserAgent", ()=>(0, _platform.getAmplifyUserAgent));
parcelHelpers.export(exports, "INTERNAL_AWS_APPSYNC_REALTIME_PUBSUB_PROVIDER", ()=>(0, _constants.INTERNAL_AWS_APPSYNC_REALTIME_PUBSUB_PROVIDER));
parcelHelpers.export(exports, "USER_AGENT_HEADER", ()=>(0, _constants.USER_AGENT_HEADER));
parcelHelpers.export(exports, "AWS_CLOUDWATCH_BASE_BUFFER_SIZE", ()=>(0, _util.AWS_CLOUDWATCH_BASE_BUFFER_SIZE));
parcelHelpers.export(exports, "AWS_CLOUDWATCH_CATEGORY", ()=>(0, _util.AWS_CLOUDWATCH_CATEGORY));
parcelHelpers.export(exports, "AWS_CLOUDWATCH_MAX_BATCH_EVENT_SIZE", ()=>(0, _util.AWS_CLOUDWATCH_MAX_BATCH_EVENT_SIZE));
parcelHelpers.export(exports, "AWS_CLOUDWATCH_MAX_EVENT_SIZE", ()=>(0, _util.AWS_CLOUDWATCH_MAX_EVENT_SIZE));
parcelHelpers.export(exports, "AWS_CLOUDWATCH_PROVIDER_NAME", ()=>(0, _util.AWS_CLOUDWATCH_PROVIDER_NAME));
parcelHelpers.export(exports, "BackgroundManagerNotOpenError", ()=>(0, _util.BackgroundManagerNotOpenError));
parcelHelpers.export(exports, "BackgroundProcessManager", ()=>(0, _util.BackgroundProcessManager));
parcelHelpers.export(exports, "BackgroundProcessManagerState", ()=>(0, _util.BackgroundProcessManagerState));
parcelHelpers.export(exports, "DateUtils", ()=>(0, _util.DateUtils));
parcelHelpers.export(exports, "Mutex", ()=>(0, _util.Mutex));
parcelHelpers.export(exports, "NO_CREDS_ERROR_STRING", ()=>(0, _util.NO_CREDS_ERROR_STRING));
parcelHelpers.export(exports, "NonRetryableError", ()=>(0, _util.NonRetryableError));
parcelHelpers.export(exports, "RETRY_ERROR_CODES", ()=>(0, _util.RETRY_ERROR_CODES));
parcelHelpers.export(exports, "Reachability", ()=>(0, _util.Reachability));
parcelHelpers.export(exports, "isNonRetryableError", ()=>(0, _util.isNonRetryableError));
parcelHelpers.export(exports, "jitteredBackoff", ()=>(0, _util.jitteredBackoff));
parcelHelpers.export(exports, "jitteredExponentialRetry", ()=>(0, _util.jitteredExponentialRetry));
parcelHelpers.export(exports, "retry", ()=>(0, _util.retry));
parcelHelpers.export(exports, "urlSafeDecode", ()=>(0, _util.urlSafeDecode));
parcelHelpers.export(exports, "urlSafeEncode", ()=>(0, _util.urlSafeEncode));
parcelHelpers.export(exports, "Constants", ()=>Constants);
var _amplify = require("./Amplify");
var _platform = require("./Platform");
var _clientDevice = require("./ClientDevice");
var _logger = require("./Logger");
var _errors = require("./Errors");
var _hub = require("./Hub");
var _i18N = require("./I18n");
var _js = require("./JS");
var _signer = require("./Signer");
var _parseAWSExports = require("./parseAWSExports");
var _providers = require("./Providers");
var _oauthHelper = require("./OAuthHelper");
var _rncomponents = require("./RNComponents");
var _credentials = require("./Credentials");
var _serviceWorker = require("./ServiceWorker");
var _storageHelper = require("./StorageHelper");
var _universalStorage = require("./UniversalStorage");
var _constants = require("./constants");
var _util = require("./Util");
var Constants = {
    userAgent: (0, _platform.Platform).userAgent
};
/**
 * @deprecated use named import
 */ exports.default = (0, _amplify.Amplify);

},{"./Amplify":"4gP56","./Platform":"2ZOrj","./ClientDevice":"7aobk","./Logger":"aOIPE","./Errors":false,"./Hub":"kCAC7","./I18n":"hddus","./JS":"fFubg","./Signer":"aVxId","./parseAWSExports":"gsLRZ","./Providers":"8NxfE","./OAuthHelper":"zKgKu","./RNComponents":false,"./Credentials":"e9vlE","./ServiceWorker":"kIufi","./StorageHelper":"3R0f0","./UniversalStorage":"iBN8A","./constants":false,"./Util":"hLH9s","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4gP56":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AmplifyClass", ()=>AmplifyClass);
parcelHelpers.export(exports, "Amplify", ()=>Amplify);
var _tslib = require("tslib");
var _logger = require("./Logger");
var logger = new (0, _logger.ConsoleLogger)("Amplify");
var AmplifyClass = /** @class */ function() {
    function AmplifyClass() {
        // Everything that is `register`ed is tracked here
        this._components = [];
        this._config = {};
        // All modules (with `getModuleName()`) are stored here for dependency injection
        this._modules = {};
        // for backward compatibility to avoid breaking change
        // if someone is using like Amplify.Auth
        this.Auth = null;
        this.Analytics = null;
        this.API = null;
        this.Credentials = null;
        this.Storage = null;
        this.I18n = null;
        this.Cache = null;
        this.PubSub = null;
        this.Interactions = null;
        this.Pushnotification = null;
        this.UI = null;
        this.XR = null;
        this.Predictions = null;
        this.DataStore = null;
        this.Geo = null;
        this.Notifications = null;
        this.Logger = (0, _logger.ConsoleLogger);
        this.ServiceWorker = null;
    }
    AmplifyClass.prototype.register = function(comp) {
        logger.debug("component registered in amplify", comp);
        this._components.push(comp);
        if (typeof comp.getModuleName === "function") {
            this._modules[comp.getModuleName()] = comp;
            this[comp.getModuleName()] = comp;
        } else logger.debug("no getModuleName method for component", comp);
        // Finally configure this new component(category) loaded
        // With the new modularization changes in Amplify V3, all the Amplify
        // component are not loaded/registered right away but when they are
        // imported (and hence instantiated) in the client's app. This ensures
        // that all new components imported get correctly configured with the
        // configuration that Amplify.configure() was called with.
        comp.configure(this._config);
    };
    AmplifyClass.prototype.configure = function(config) {
        var _this = this;
        if (!config) return this._config;
        this._config = Object.assign(this._config, config);
        logger.debug("amplify config", this._config);
        // Dependency Injection via property-setting.
        // This avoids introducing a public method/interface/setter that's difficult to remove later.
        // Plus, it reduces `if` statements within the `constructor` and `configure` of each module
        Object.entries(this._modules).forEach(function(_a) {
            var _b = (0, _tslib.__read)(_a, 2), Name = _b[0], comp = _b[1];
            // e.g. Auth.*
            Object.keys(comp).forEach(function(property) {
                // e.g. Auth["Credentials"] = this._modules["Credentials"] when set
                if (_this._modules[property]) comp[property] = _this._modules[property];
            });
        });
        this._components.map(function(comp) {
            comp.configure(_this._config);
        });
        return this._config;
    };
    AmplifyClass.prototype.addPluggable = function(pluggable) {
        if (pluggable && pluggable["getCategory"] && typeof pluggable["getCategory"] === "function") this._components.map(function(comp) {
            if (comp["addPluggable"] && typeof comp["addPluggable"] === "function") comp.addPluggable(pluggable);
        });
    };
    return AmplifyClass;
}();
var Amplify = new AmplifyClass();

},{"tslib":"iyInc","./Logger":"aOIPE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iyInc":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gkKU3":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, "__esModule", {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === "default" || key === "__esModule" || dest.hasOwnProperty(key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"aOIPE":[function(require,module,exports) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ConsoleLogger", ()=>(0, _consoleLogger.ConsoleLogger));
parcelHelpers.export(exports, "LOG_TYPE", ()=>(0, _consoleLogger.LOG_TYPE));
var _consoleLogger = require("./ConsoleLogger");

},{"./ConsoleLogger":"9vCE0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9vCE0":[function(require,module,exports) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LOG_TYPE", ()=>LOG_TYPE);
parcelHelpers.export(exports, "ConsoleLogger", ()=>ConsoleLogger);
var _tslib = require("tslib");
var _constants = require("../Util/Constants");
var LOG_LEVELS = {
    VERBOSE: 1,
    DEBUG: 2,
    INFO: 3,
    WARN: 4,
    ERROR: 5
};
var LOG_TYPE;
(function(LOG_TYPE) {
    LOG_TYPE["DEBUG"] = "DEBUG";
    LOG_TYPE["ERROR"] = "ERROR";
    LOG_TYPE["INFO"] = "INFO";
    LOG_TYPE["WARN"] = "WARN";
    LOG_TYPE["VERBOSE"] = "VERBOSE";
})(LOG_TYPE || (LOG_TYPE = {}));
/**
 * Write logs
 * @class Logger
 */ var ConsoleLogger = /** @class */ function() {
    /**
     * @constructor
     * @param {string} name - Name of the logger
     */ function ConsoleLogger(name, level) {
        if (level === void 0) level = LOG_TYPE.WARN;
        this.name = name;
        this.level = level;
        this._pluggables = [];
    }
    ConsoleLogger.prototype._padding = function(n) {
        return n < 10 ? "0" + n : "" + n;
    };
    ConsoleLogger.prototype._ts = function() {
        var dt = new Date();
        return [
            this._padding(dt.getMinutes()),
            this._padding(dt.getSeconds())
        ].join(":") + "." + dt.getMilliseconds();
    };
    ConsoleLogger.prototype.configure = function(config) {
        if (!config) return this._config;
        this._config = config;
        return this._config;
    };
    /**
     * Write log
     * @method
     * @memeberof Logger
     * @param {LOG_TYPE|string} type - log type, default INFO
     * @param {string|object} msg - Logging message or object
     */ ConsoleLogger.prototype._log = function(type) {
        var e_1, _a;
        var msg = [];
        for(var _i = 1; _i < arguments.length; _i++)msg[_i - 1] = arguments[_i];
        var logger_level_name = this.level;
        if (ConsoleLogger.LOG_LEVEL) logger_level_name = ConsoleLogger.LOG_LEVEL;
        if (typeof window !== "undefined" && window.LOG_LEVEL) logger_level_name = window.LOG_LEVEL;
        var logger_level = LOG_LEVELS[logger_level_name];
        var type_level = LOG_LEVELS[type];
        if (!(type_level >= logger_level)) // Do nothing if type is not greater than or equal to logger level (handle undefined)
        return;
        var log = console.log.bind(console);
        if (type === LOG_TYPE.ERROR && console.error) log = console.error.bind(console);
        if (type === LOG_TYPE.WARN && console.warn) log = console.warn.bind(console);
        var prefix = "[" + type + "] " + this._ts() + " " + this.name;
        var message = "";
        if (msg.length === 1 && typeof msg[0] === "string") {
            message = prefix + " - " + msg[0];
            log(message);
        } else if (msg.length === 1) {
            message = prefix + " " + msg[0];
            log(prefix, msg[0]);
        } else if (typeof msg[0] === "string") {
            var obj = msg.slice(1);
            if (obj.length === 1) obj = obj[0];
            message = prefix + " - " + msg[0] + " " + obj;
            log(prefix + " - " + msg[0], obj);
        } else {
            message = prefix + " " + msg;
            log(prefix, msg);
        }
        try {
            for(var _b = (0, _tslib.__values)(this._pluggables), _c = _b.next(); !_c.done; _c = _b.next()){
                var plugin = _c.value;
                var logEvent = {
                    message: message,
                    timestamp: Date.now()
                };
                plugin.pushLogs([
                    logEvent
                ]);
            }
        } catch (e_1_1) {
            e_1 = {
                error: e_1_1
            };
        } finally{
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            } finally{
                if (e_1) throw e_1.error;
            }
        }
    };
    /**
     * Write General log. Default to INFO
     * @method
     * @memeberof Logger
     * @param {string|object} msg - Logging message or object
     */ ConsoleLogger.prototype.log = function() {
        var msg = [];
        for(var _i = 0; _i < arguments.length; _i++)msg[_i] = arguments[_i];
        this._log.apply(this, (0, _tslib.__spread)([
            LOG_TYPE.INFO
        ], msg));
    };
    /**
     * Write INFO log
     * @method
     * @memeberof Logger
     * @param {string|object} msg - Logging message or object
     */ ConsoleLogger.prototype.info = function() {
        var msg = [];
        for(var _i = 0; _i < arguments.length; _i++)msg[_i] = arguments[_i];
        this._log.apply(this, (0, _tslib.__spread)([
            LOG_TYPE.INFO
        ], msg));
    };
    /**
     * Write WARN log
     * @method
     * @memeberof Logger
     * @param {string|object} msg - Logging message or object
     */ ConsoleLogger.prototype.warn = function() {
        var msg = [];
        for(var _i = 0; _i < arguments.length; _i++)msg[_i] = arguments[_i];
        this._log.apply(this, (0, _tslib.__spread)([
            LOG_TYPE.WARN
        ], msg));
    };
    /**
     * Write ERROR log
     * @method
     * @memeberof Logger
     * @param {string|object} msg - Logging message or object
     */ ConsoleLogger.prototype.error = function() {
        var msg = [];
        for(var _i = 0; _i < arguments.length; _i++)msg[_i] = arguments[_i];
        this._log.apply(this, (0, _tslib.__spread)([
            LOG_TYPE.ERROR
        ], msg));
    };
    /**
     * Write DEBUG log
     * @method
     * @memeberof Logger
     * @param {string|object} msg - Logging message or object
     */ ConsoleLogger.prototype.debug = function() {
        var msg = [];
        for(var _i = 0; _i < arguments.length; _i++)msg[_i] = arguments[_i];
        this._log.apply(this, (0, _tslib.__spread)([
            LOG_TYPE.DEBUG
        ], msg));
    };
    /**
     * Write VERBOSE log
     * @method
     * @memeberof Logger
     * @param {string|object} msg - Logging message or object
     */ ConsoleLogger.prototype.verbose = function() {
        var msg = [];
        for(var _i = 0; _i < arguments.length; _i++)msg[_i] = arguments[_i];
        this._log.apply(this, (0, _tslib.__spread)([
            LOG_TYPE.VERBOSE
        ], msg));
    };
    ConsoleLogger.prototype.addPluggable = function(pluggable) {
        if (pluggable && pluggable.getCategoryName() === (0, _constants.AWS_CLOUDWATCH_CATEGORY)) {
            this._pluggables.push(pluggable);
            pluggable.configure(this._config);
        }
    };
    ConsoleLogger.prototype.listPluggables = function() {
        return this._pluggables;
    };
    ConsoleLogger.LOG_LEVEL = null;
    return ConsoleLogger;
}();

},{"tslib":"iyInc","../Util/Constants":"ey6Nm","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ey6Nm":[function(require,module,exports) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
// Logging constants
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AWS_CLOUDWATCH_BASE_BUFFER_SIZE", ()=>AWS_CLOUDWATCH_BASE_BUFFER_SIZE);
parcelHelpers.export(exports, "AWS_CLOUDWATCH_CATEGORY", ()=>AWS_CLOUDWATCH_CATEGORY);
parcelHelpers.export(exports, "AWS_CLOUDWATCH_MAX_BATCH_EVENT_SIZE", ()=>AWS_CLOUDWATCH_MAX_BATCH_EVENT_SIZE);
parcelHelpers.export(exports, "AWS_CLOUDWATCH_MAX_EVENT_SIZE", ()=>AWS_CLOUDWATCH_MAX_EVENT_SIZE);
parcelHelpers.export(exports, "AWS_CLOUDWATCH_PROVIDER_NAME", ()=>AWS_CLOUDWATCH_PROVIDER_NAME);
parcelHelpers.export(exports, "NO_CREDS_ERROR_STRING", ()=>NO_CREDS_ERROR_STRING);
parcelHelpers.export(exports, "RETRY_ERROR_CODES", ()=>RETRY_ERROR_CODES);
var AWS_CLOUDWATCH_BASE_BUFFER_SIZE = 26;
var AWS_CLOUDWATCH_MAX_BATCH_EVENT_SIZE = 1048576;
var AWS_CLOUDWATCH_MAX_EVENT_SIZE = 256000;
var AWS_CLOUDWATCH_CATEGORY = "Logging";
var AWS_CLOUDWATCH_PROVIDER_NAME = "AWSCloudWatch";
var NO_CREDS_ERROR_STRING = "No credentials";
var RETRY_ERROR_CODES = [
    "ResourceNotFoundException",
    "InvalidSequenceTokenException"
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2ZOrj":[function(require,module,exports) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Platform", ()=>Platform);
parcelHelpers.export(exports, "getAmplifyUserAgent", ()=>getAmplifyUserAgent);
var _version = require("./version");
var BASE_USER_AGENT = "aws-amplify/" + (0, _version.version);
var Platform = {
    userAgent: BASE_USER_AGENT + " js",
    product: "",
    navigator: null,
    isReactNative: false
};
if (typeof navigator !== "undefined" && navigator.product) {
    Platform.product = navigator.product || "";
    Platform.navigator = navigator || null;
    switch(navigator.product){
        case "ReactNative":
            Platform.userAgent = BASE_USER_AGENT + " react-native";
            Platform.isReactNative = true;
            break;
        default:
            Platform.userAgent = BASE_USER_AGENT + " js";
            Platform.isReactNative = false;
            break;
    }
}
var getAmplifyUserAgent = function(content) {
    return "" + Platform.userAgent + (content ? content : "");
};

},{"./version":"jfptF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jfptF":[function(require,module,exports) {
// generated by genversion
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "version", ()=>version);
var version = "5.2.1";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7aobk":[function(require,module,exports) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ClientDevice", ()=>ClientDevice);
var _browser = require("./browser");
var ClientDevice = /** @class */ function() {
    function ClientDevice() {}
    ClientDevice.clientInfo = function() {
        return (0, _browser.clientInfo)();
    };
    ClientDevice.dimension = function() {
        return (0, _browser.dimension)();
    };
    return ClientDevice;
}();

},{"./browser":"4wMNb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4wMNb":[function(require,module,exports) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "clientInfo", ()=>clientInfo);
parcelHelpers.export(exports, "dimension", ()=>dimension);
parcelHelpers.export(exports, "browserType", ()=>browserType);
var _logger = require("../Logger");
var logger = new (0, _logger.ConsoleLogger)("ClientDevice_Browser");
function clientInfo() {
    if (typeof window === "undefined") return {};
    return browserClientInfo();
}
function browserClientInfo() {
    if (typeof window === "undefined") {
        logger.warn("No window object available to get browser client info");
        return {};
    }
    var nav = window.navigator;
    if (!nav) {
        logger.warn("No navigator object available to get browser client info");
        return {};
    }
    var platform = nav.platform, product = nav.product, vendor = nav.vendor, userAgent = nav.userAgent, language = nav.language;
    var type = browserType(userAgent);
    var timezone = browserTimezone();
    return {
        platform: platform,
        make: product || vendor,
        model: type.type,
        version: type.version,
        appVersion: [
            type.type,
            type.version
        ].join("/"),
        language: language,
        timezone: timezone
    };
}
function dimension() {
    if (typeof window === "undefined") {
        logger.warn("No window object available to get browser client info");
        return {
            width: 320,
            height: 320
        };
    }
    return {
        width: window.innerWidth,
        height: window.innerHeight
    };
}
function browserTimezone() {
    var tzMatch = /\(([A-Za-z\s].*)\)/.exec(new Date().toString());
    return tzMatch ? tzMatch[1] || "" : "";
}
function browserType(userAgent) {
    var operaMatch = /.+(Opera[\s[A-Z]*|OPR[\sA-Z]*)\/([0-9\.]+).*/i.exec(userAgent);
    if (operaMatch) return {
        type: operaMatch[1],
        version: operaMatch[2]
    };
    var ieMatch = /.+(Trident|Edge)\/([0-9\.]+).*/i.exec(userAgent);
    if (ieMatch) return {
        type: ieMatch[1],
        version: ieMatch[2]
    };
    var cfMatch = /.+(Chrome|Firefox|FxiOS)\/([0-9\.]+).*/i.exec(userAgent);
    if (cfMatch) return {
        type: cfMatch[1],
        version: cfMatch[2]
    };
    var sMatch = /.+(Safari)\/([0-9\.]+).*/i.exec(userAgent);
    if (sMatch) return {
        type: sMatch[1],
        version: sMatch[2]
    };
    var awkMatch = /.+(AppleWebKit)\/([0-9\.]+).*/i.exec(userAgent);
    if (awkMatch) return {
        type: awkMatch[1],
        version: awkMatch[2]
    };
    var anyMatch = /.*([A-Z]+)\/([0-9\.]+).*/i.exec(userAgent);
    if (anyMatch) return {
        type: anyMatch[1],
        version: anyMatch[2]
    };
    return {
        type: "",
        version: ""
    };
}

},{"../Logger":"aOIPE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kCAC7":[function(require,module,exports) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "HubClass", ()=>HubClass);
parcelHelpers.export(exports, "Hub", ()=>Hub);
var _tslib = require("tslib");
var _logger = require("./Logger");
var logger = new (0, _logger.ConsoleLogger)("Hub");
var AMPLIFY_SYMBOL = typeof Symbol !== "undefined" && typeof Symbol.for === "function" ? Symbol.for("amplify_default") : "@@amplify_default";
function isLegacyCallback(callback) {
    return callback.onHubCapsule !== undefined;
}
var HubClass = /** @class */ function() {
    function HubClass(name) {
        this.listeners = [];
        this.patterns = [];
        this.protectedChannels = [
            "core",
            "auth",
            "api",
            "analytics",
            "interactions",
            "pubsub",
            "storage",
            "ui",
            "xr"
        ];
        this.name = name;
    }
    /**
     * Used internally to remove a Hub listener.
     *
     * @remarks
     * This private method is for internal use only. Instead of calling Hub.remove, call the result of Hub.listen.
     */ HubClass.prototype._remove = function(channel, listener) {
        if (channel instanceof RegExp) {
            var pattern_1 = this.patterns.find(function(_a) {
                var pattern = _a.pattern;
                return pattern.source === channel.source;
            });
            if (!pattern_1) {
                logger.warn("No listeners for " + channel);
                return;
            }
            this.patterns = (0, _tslib.__spread)(this.patterns.filter(function(x) {
                return x !== pattern_1;
            }));
        } else {
            var holder = this.listeners[channel];
            if (!holder) {
                logger.warn("No listeners for " + channel);
                return;
            }
            this.listeners[channel] = (0, _tslib.__spread)(holder.filter(function(_a) {
                var callback = _a.callback;
                return callback !== listener;
            }));
        }
    };
    /**
     * @deprecated Instead of calling Hub.remove, call the result of Hub.listen.
     */ HubClass.prototype.remove = function(channel, listener) {
        this._remove(channel, listener);
    };
    /**
     * Used to send a Hub event.
     *
     * @param channel - The channel on which the event will be broadcast
     * @param payload - The HubPayload
     * @param source  - The source of the event; defaults to ''
     * @param ampSymbol - Symbol used to determine if the event is dispatched internally on a protected channel
     *
     */ HubClass.prototype.dispatch = function(channel, payload, source, ampSymbol) {
        if (source === void 0) source = "";
        if (this.protectedChannels.indexOf(channel) > -1) {
            var hasAccess = ampSymbol === AMPLIFY_SYMBOL;
            if (!hasAccess) logger.warn("WARNING: " + channel + " is protected and dispatching on it can have unintended consequences");
        }
        var capsule = {
            channel: channel,
            payload: (0, _tslib.__assign)({}, payload),
            source: source,
            patternInfo: []
        };
        try {
            this._toListeners(capsule);
        } catch (e) {
            logger.error(e);
        }
    };
    /**
     * Used to listen for Hub events.
     *
     * @param channel - The channel on which to listen
     * @param callback - The callback to execute when an event is received on the specified channel
     * @param listenerName - The name of the listener; defaults to 'noname'
     * @returns A function which can be called to cancel the listener.
     *
     */ HubClass.prototype.listen = function(channel, callback, listenerName) {
        var _this = this;
        if (listenerName === void 0) listenerName = "noname";
        var cb;
        // Check for legacy onHubCapsule callback for backwards compatability
        if (isLegacyCallback(callback)) {
            logger.warn("WARNING onHubCapsule is Deprecated. Please pass in a callback.");
            cb = callback.onHubCapsule.bind(callback);
        } else if (typeof callback !== "function") throw new Error("No callback supplied to Hub");
        else cb = callback;
        if (channel instanceof RegExp) this.patterns.push({
            pattern: channel,
            callback: cb
        });
        else {
            var holder = this.listeners[channel];
            if (!holder) {
                holder = [];
                this.listeners[channel] = holder;
            }
            holder.push({
                name: listenerName,
                callback: cb
            });
        }
        return function() {
            _this._remove(channel, cb);
        };
    };
    HubClass.prototype._toListeners = function(capsule) {
        var channel = capsule.channel, payload = capsule.payload;
        var holder = this.listeners[channel];
        if (holder) holder.forEach(function(listener) {
            logger.debug("Dispatching to " + channel + " with ", payload);
            try {
                listener.callback(capsule);
            } catch (e) {
                logger.error(e);
            }
        });
        if (this.patterns.length > 0) {
            if (!payload.message) {
                logger.warn("Cannot perform pattern matching without a message key");
                return;
            }
            var payloadStr_1 = payload.message;
            this.patterns.forEach(function(pattern) {
                var match = payloadStr_1.match(pattern.pattern);
                if (match) {
                    var _a = (0, _tslib.__read)(match), groups = _a.slice(1);
                    var dispatchingCapsule = (0, _tslib.__assign)((0, _tslib.__assign)({}, capsule), {
                        patternInfo: groups
                    });
                    try {
                        pattern.callback(dispatchingCapsule);
                    } catch (e) {
                        logger.error(e);
                    }
                }
            });
        }
    };
    return HubClass;
}();
var Hub = new HubClass("__default__");

},{"tslib":"iyInc","./Logger":"aOIPE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hddus":[function(require,module,exports) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "I18n", ()=>I18n);
var _i18N = require("./I18n");
var _logger = require("../Logger");
var _amplify = require("../Amplify");
var logger = new (0, _logger.ConsoleLogger)("I18n");
var _config = null;
var _i18n = null;
/**
 * Export I18n APIs
 */ var I18n = /** @class */ function() {
    function I18n() {}
    /**
     * @static
     * @method
     * Configure I18n part
     * @param {Object} config - Configuration of the I18n
     */ I18n.configure = function(config) {
        logger.debug("configure I18n");
        if (!config) return _config;
        _config = Object.assign({}, _config, config.I18n || config);
        I18n.createInstance();
        return _config;
    };
    I18n.getModuleName = function() {
        return "I18n";
    };
    /**
     * @static
     * @method
     * Create an instance of I18n for the library
     */ I18n.createInstance = function() {
        logger.debug("create I18n instance");
        if (_i18n) return;
        _i18n = new (0, _i18N.I18n)(_config);
    };
    /**
     * @static @method
     * Explicitly setting language
     * @param {String} lang
     */ I18n.setLanguage = function(lang) {
        I18n.checkConfig();
        return _i18n.setLanguage(lang);
    };
    /**
     * @static @method
     * Get value
     * @param {String} key
     * @param {String} defVal - Default value
     */ I18n.get = function(key, defVal) {
        if (!I18n.checkConfig()) return typeof defVal === "undefined" ? key : defVal;
        return _i18n.get(key, defVal);
    };
    /**
     * @static
     * @method
     * Add vocabularies for one language
     * @param {String} langurage - Language of the dictionary
     * @param {Object} vocabularies - Object that has key-value as dictionary entry
     */ I18n.putVocabulariesForLanguage = function(language, vocabularies) {
        I18n.checkConfig();
        return _i18n.putVocabulariesForLanguage(language, vocabularies);
    };
    /**
     * @static
     * @method
     * Add vocabularies for one language
     * @param {Object} vocabularies - Object that has language as key,
     *                                vocabularies of each language as value
     */ I18n.putVocabularies = function(vocabularies) {
        I18n.checkConfig();
        return _i18n.putVocabularies(vocabularies);
    };
    I18n.checkConfig = function() {
        if (!_i18n) _i18n = new (0, _i18N.I18n)(_config);
        return true;
    };
    return I18n;
}();
(0, _amplify.Amplify).register(I18n);

},{"./I18n":"kqZps","../Logger":"aOIPE","../Amplify":"4gP56","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kqZps":[function(require,module,exports) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "I18n", ()=>I18n);
var _tslib = require("tslib");
var _logger = require("../Logger");
var logger = new (0, _logger.ConsoleLogger)("I18n");
/**
 * Language transition class
 */ var I18n = /** @class */ function() {
    /**
     * @constructor
     * Initialize with configurations
     * @param {Object} options
     */ function I18n(options) {
        /**
         * @private
         */ this._options = null;
        /**
         * @private
         */ this._lang = null;
        /**
         * @private
         */ this._dict = {};
        this._options = Object.assign({}, options);
        this._lang = this._options.language;
        if (!this._lang && typeof window !== "undefined" && window && window.navigator) this._lang = window.navigator.language;
        logger.debug(this._lang);
    }
    /**
     * @method
     * Explicitly setting language
     * @param {String} lang
     */ I18n.prototype.setLanguage = function(lang) {
        this._lang = lang;
    };
    /**
     * @method
     * Get value
     * @param {String} key
     * @param {String} defVal - Default value
     */ I18n.prototype.get = function(key, defVal) {
        if (defVal === void 0) defVal = undefined;
        if (!this._lang) return typeof defVal !== "undefined" ? defVal : key;
        var lang = this._lang;
        var val = this.getByLanguage(key, lang);
        if (val) return val;
        if (lang.indexOf("-") > 0) val = this.getByLanguage(key, lang.split("-")[0]);
        if (val) return val;
        return typeof defVal !== "undefined" ? defVal : key;
    };
    /**
     * @method
     * Get value according to specified language
     * @param {String} key
     * @param {String} language - Specified langurage to be used
     * @param {String} defVal - Default value
     */ I18n.prototype.getByLanguage = function(key, language, defVal) {
        if (defVal === void 0) defVal = null;
        if (!language) return defVal;
        var lang_dict = this._dict[language];
        if (!lang_dict) return defVal;
        return lang_dict[key];
    };
    /**
     * @method
     * Add vocabularies for one language
     * @param {String} language - Language of the dictionary
     * @param {Object} vocabularies - Object that has key-value as dictionary entry
     */ I18n.prototype.putVocabulariesForLanguage = function(language, vocabularies) {
        var lang_dict = this._dict[language];
        if (!lang_dict) lang_dict = this._dict[language] = {};
        this._dict[language] = (0, _tslib.__assign)((0, _tslib.__assign)({}, lang_dict), vocabularies);
    };
    /**
     * @method
     * Add vocabularies for one language
     * @param {Object} vocabularies - Object that has language as key,
     *                                vocabularies of each language as value
     */ I18n.prototype.putVocabularies = function(vocabularies) {
        var _this = this;
        Object.keys(vocabularies).map(function(key) {
            _this.putVocabulariesForLanguage(key, vocabularies[key]);
        });
    };
    return I18n;
}();

},{"tslib":"iyInc","../Logger":"aOIPE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fFubg":[function(require,module,exports) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isEmpty", ()=>isEmpty);
parcelHelpers.export(exports, "sortByField", ()=>sortByField);
parcelHelpers.export(exports, "objectLessAttributes", ()=>objectLessAttributes);
parcelHelpers.export(exports, "filenameToContentType", ()=>filenameToContentType);
parcelHelpers.export(exports, "isTextFile", ()=>isTextFile);
parcelHelpers.export(exports, "generateRandomString", ()=>generateRandomString);
parcelHelpers.export(exports, "makeQuerablePromise", ()=>makeQuerablePromise);
parcelHelpers.export(exports, "isWebWorker", ()=>isWebWorker);
parcelHelpers.export(exports, "browserOrNode", ()=>browserOrNode);
parcelHelpers.export(exports, "transferKeyToLowerCase", ()=>transferKeyToLowerCase);
parcelHelpers.export(exports, "transferKeyToUpperCase", ()=>transferKeyToUpperCase);
parcelHelpers.export(exports, "isStrictObject", ()=>isStrictObject);
var process = require("8201fe8533c308a8");
var MIME_MAP = [
    {
        type: "text/plain",
        ext: "txt"
    },
    {
        type: "text/html",
        ext: "html"
    },
    {
        type: "text/javascript",
        ext: "js"
    },
    {
        type: "text/css",
        ext: "css"
    },
    {
        type: "text/csv",
        ext: "csv"
    },
    {
        type: "text/yaml",
        ext: "yml"
    },
    {
        type: "text/yaml",
        ext: "yaml"
    },
    {
        type: "text/calendar",
        ext: "ics"
    },
    {
        type: "text/calendar",
        ext: "ical"
    },
    {
        type: "image/apng",
        ext: "apng"
    },
    {
        type: "image/bmp",
        ext: "bmp"
    },
    {
        type: "image/gif",
        ext: "gif"
    },
    {
        type: "image/x-icon",
        ext: "ico"
    },
    {
        type: "image/x-icon",
        ext: "cur"
    },
    {
        type: "image/jpeg",
        ext: "jpg"
    },
    {
        type: "image/jpeg",
        ext: "jpeg"
    },
    {
        type: "image/jpeg",
        ext: "jfif"
    },
    {
        type: "image/jpeg",
        ext: "pjp"
    },
    {
        type: "image/jpeg",
        ext: "pjpeg"
    },
    {
        type: "image/png",
        ext: "png"
    },
    {
        type: "image/svg+xml",
        ext: "svg"
    },
    {
        type: "image/tiff",
        ext: "tif"
    },
    {
        type: "image/tiff",
        ext: "tiff"
    },
    {
        type: "image/webp",
        ext: "webp"
    },
    {
        type: "application/json",
        ext: "json"
    },
    {
        type: "application/xml",
        ext: "xml"
    },
    {
        type: "application/x-sh",
        ext: "sh"
    },
    {
        type: "application/zip",
        ext: "zip"
    },
    {
        type: "application/x-rar-compressed",
        ext: "rar"
    },
    {
        type: "application/x-tar",
        ext: "tar"
    },
    {
        type: "application/x-bzip",
        ext: "bz"
    },
    {
        type: "application/x-bzip2",
        ext: "bz2"
    },
    {
        type: "application/pdf",
        ext: "pdf"
    },
    {
        type: "application/java-archive",
        ext: "jar"
    },
    {
        type: "application/msword",
        ext: "doc"
    },
    {
        type: "application/vnd.ms-excel",
        ext: "xls"
    },
    {
        type: "application/vnd.ms-excel",
        ext: "xlsx"
    },
    {
        type: "message/rfc822",
        ext: "eml"
    }
];
var isEmpty = function(obj) {
    if (obj === void 0) obj = {};
    return Object.keys(obj).length === 0;
};
var sortByField = function(list, field, dir) {
    if (!list || !list.sort) return false;
    var dirX = dir && dir === "desc" ? -1 : 1;
    list.sort(function(a, b) {
        var a_val = a[field];
        var b_val = b[field];
        if (typeof b_val === "undefined") return typeof a_val === "undefined" ? 0 : 1 * dirX;
        if (typeof a_val === "undefined") return -1 * dirX;
        if (a_val < b_val) return -1 * dirX;
        if (a_val > b_val) return 1 * dirX;
        return 0;
    });
    return true;
};
var objectLessAttributes = function(obj, less) {
    var ret = Object.assign({}, obj);
    if (less) {
        if (typeof less === "string") delete ret[less];
        else less.forEach(function(attr) {
            delete ret[attr];
        });
    }
    return ret;
};
var filenameToContentType = function(filename, defVal) {
    if (defVal === void 0) defVal = "application/octet-stream";
    var name = filename.toLowerCase();
    var filtered = MIME_MAP.filter(function(mime) {
        return name.endsWith("." + mime.ext);
    });
    return filtered.length > 0 ? filtered[0].type : defVal;
};
var isTextFile = function(contentType) {
    var type = contentType.toLowerCase();
    if (type.startsWith("text/")) return true;
    return "application/json" === type || "application/xml" === type || "application/sh" === type;
};
var generateRandomString = function() {
    var result = "";
    var chars = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
    for(var i = 32; i > 0; i -= 1)result += chars[Math.floor(Math.random() * chars.length)];
    return result;
};
var makeQuerablePromise = function(promise) {
    if (promise.isResolved) return promise;
    var isPending = true;
    var isRejected = false;
    var isFullfilled = false;
    var result = promise.then(function(data) {
        isFullfilled = true;
        isPending = false;
        return data;
    }, function(e) {
        isRejected = true;
        isPending = false;
        throw e;
    });
    result.isFullfilled = function() {
        return isFullfilled;
    };
    result.isPending = function() {
        return isPending;
    };
    result.isRejected = function() {
        return isRejected;
    };
    return result;
};
var isWebWorker = function() {
    if (typeof self === "undefined") return false;
    var selfContext = self;
    return typeof selfContext.WorkerGlobalScope !== "undefined" && self instanceof selfContext.WorkerGlobalScope;
};
var browserOrNode = function() {
    var isBrowser = typeof window !== "undefined" && typeof window.document !== "undefined";
    var isNode = typeof process !== "undefined" && process.versions != null && process.versions.node != null;
    return {
        isBrowser: isBrowser,
        isNode: isNode
    };
};
var transferKeyToLowerCase = function(obj, whiteListForItself, whiteListForChildren) {
    if (whiteListForItself === void 0) whiteListForItself = [];
    if (whiteListForChildren === void 0) whiteListForChildren = [];
    if (!isStrictObject(obj)) return obj;
    var ret = {};
    for(var key in obj)if (obj.hasOwnProperty(key)) {
        var transferedKey = whiteListForItself.includes(key) ? key : key[0].toLowerCase() + key.slice(1);
        ret[transferedKey] = whiteListForChildren.includes(key) ? obj[key] : transferKeyToLowerCase(obj[key], whiteListForItself, whiteListForChildren);
    }
    return ret;
};
var transferKeyToUpperCase = function(obj, whiteListForItself, whiteListForChildren) {
    if (whiteListForItself === void 0) whiteListForItself = [];
    if (whiteListForChildren === void 0) whiteListForChildren = [];
    if (!isStrictObject(obj)) return obj;
    var ret = {};
    for(var key in obj)if (obj.hasOwnProperty(key)) {
        var transferredKey = whiteListForItself.includes(key) ? key : key[0].toUpperCase() + key.slice(1);
        ret[transferredKey] = whiteListForChildren.includes(key) ? obj[key] : transferKeyToUpperCase(obj[key], whiteListForItself, whiteListForChildren);
    }
    return ret;
};
var isStrictObject = function(obj) {
    return obj instanceof Object && !(obj instanceof Array) && !(obj instanceof Function) && !(obj instanceof Number) && !(obj instanceof String) && !(obj instanceof Boolean);
};

},{"8201fe8533c308a8":"d5jf4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d5jf4":[function(require,module,exports) {
// shim for using process in browser
var process = module.exports = {};
// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var cachedSetTimeout;
var cachedClearTimeout;
function defaultSetTimout() {
    throw new Error("setTimeout has not been defined");
}
function defaultClearTimeout() {
    throw new Error("clearTimeout has not been defined");
}
(function() {
    try {
        if (typeof setTimeout === "function") cachedSetTimeout = setTimeout;
        else cachedSetTimeout = defaultSetTimout;
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === "function") cachedClearTimeout = clearTimeout;
        else cachedClearTimeout = defaultClearTimeout;
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) //normal enviroments in sane situations
    return setTimeout(fun, 0);
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) //normal enviroments in sane situations
    return clearTimeout(marker);
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
    if (!draining || !currentQueue) return;
    draining = false;
    if (currentQueue.length) queue = currentQueue.concat(queue);
    else queueIndex = -1;
    if (queue.length) drainQueue();
}
function drainQueue() {
    if (draining) return;
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;
    var len = queue.length;
    while(len){
        currentQueue = queue;
        queue = [];
        while(++queueIndex < len)if (currentQueue) currentQueue[queueIndex].run();
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}
process.nextTick = function(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) runTimeout(drainQueue);
};
// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function() {
    this.fun.apply(null, this.array);
};
process.title = "browser";
process.browser = true;
process.env = {};
process.argv = [];
process.version = ""; // empty string to avoid regexp issues
process.versions = {};
function noop() {}
process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;
process.listeners = function(name) {
    return [];
};
process.binding = function(name) {
    throw new Error("process.binding is not supported");
};
process.cwd = function() {
    return "/";
};
process.chdir = function(dir) {
    throw new Error("process.chdir is not supported");
};
process.umask = function() {
    return 0;
};

},{}],"aVxId":[function(require,module,exports) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Signer", ()=>Signer);
var _tslib = require("tslib");
var _util = require("./Util");
var _signatureV4 = require("./clients/middleware/signing/signer/signatureV4");
var IOT_SERVICE_NAME = "iotdevicegateway";
// Best practice regex to parse the service and region from an AWS endpoint
var AWS_ENDPOINT_REGEX = /([^\.]+)\.(?:([^\.]*)\.)?amazonaws\.com(.cn)?$/;
var Signer = /** @class */ function() {
    function Signer() {}
    /**
    * Sign a HTTP request, add 'Authorization' header to request param
    * @method sign
    * @memberof Signer
    * @static
    *
    * @param {object} request - HTTP request object
    <pre>
    request: {
        method: GET | POST | PUT ...
        url: ...,
        headers: {
            header1: ...
        },
        data: data
    }
    </pre>
    * @param {object} access_info - AWS access credential info
    <pre>
    access_info: {
        access_key: ...,
        secret_key: ...,
        session_token: ...
    }
    </pre>
    * @param {object} [service_info] - AWS service type and region, optional,
    *                                  if not provided then parse out from url
    <pre>
    service_info: {
        service: ...,
        region: ...
    }
    </pre>
    *
    * @returns {object} Signed HTTP request
    */ Signer.sign = function(request, accessInfo, serviceInfo) {
        request.headers = request.headers || {};
        if (request.body && !request.data) throw new Error('The attribute "body" was found on the request object. Please use the attribute "data" instead.');
        var requestToSign = (0, _tslib.__assign)((0, _tslib.__assign)({}, request), {
            body: request.data,
            url: new URL(request.url)
        });
        var options = getOptions(requestToSign, accessInfo, serviceInfo);
        var signedRequest = (0, _signatureV4.signRequest)(requestToSign, options);
        // Prior to using `signRequest`, Signer accepted urls as strings and outputted urls as string. Coerce the property
        // back to a string so as not to disrupt consumers of Signer.
        signedRequest.url = signedRequest.url.toString();
        // HTTP headers should be case insensitive but, to maintain parity with the previous Signer implementation and
        // limit the impact of this implementation swap, replace lowercased headers with title cased ones.
        signedRequest.headers.Authorization = signedRequest.headers.authorization;
        signedRequest.headers["X-Amz-Security-Token"] = signedRequest.headers["x-amz-security-token"];
        delete signedRequest.headers.authorization;
        delete signedRequest.headers["x-amz-security-token"];
        return signedRequest;
    };
    Signer.signUrl = function(urlOrRequest, accessInfo, serviceInfo, expiration) {
        var urlToSign = typeof urlOrRequest === "object" ? urlOrRequest.url : urlOrRequest;
        var method = typeof urlOrRequest === "object" ? urlOrRequest.method : "GET";
        var body = typeof urlOrRequest === "object" ? urlOrRequest.body : undefined;
        var presignable = {
            body: body,
            method: method,
            url: new URL(urlToSign)
        };
        var options = getOptions(presignable, accessInfo, serviceInfo, expiration);
        var signedUrl = (0, _signatureV4.presignUrl)(presignable, options);
        if (accessInfo.session_token && !sessionTokenRequiredInSigning(options.signingService)) signedUrl.searchParams.append((0, _signatureV4.TOKEN_QUERY_PARAM), accessInfo.session_token);
        return signedUrl.toString();
    };
    return Signer;
}();
var getOptions = function(request, accessInfo, serviceInfo, expiration) {
    var _a = accessInfo !== null && accessInfo !== void 0 ? accessInfo : {}, access_key = _a.access_key, secret_key = _a.secret_key, session_token = _a.session_token;
    var _b = parseServiceInfo(request.url), urlRegion = _b.region, urlService = _b.service;
    var _c = serviceInfo !== null && serviceInfo !== void 0 ? serviceInfo : {}, _d = _c.region, region = _d === void 0 ? urlRegion : _d, _e = _c.service, service = _e === void 0 ? urlService : _e;
    var credentials = (0, _tslib.__assign)({
        accessKeyId: access_key,
        secretAccessKey: secret_key
    }, sessionTokenRequiredInSigning(service) ? {
        sessionToken: session_token
    } : {});
    return (0, _tslib.__assign)({
        credentials: credentials,
        signingDate: (0, _util.DateUtils).getDateWithClockOffset(),
        signingRegion: region,
        signingService: service
    }, expiration && {
        expiration: expiration
    });
};
// TODO: V6 investigate whether add to custom clients' general signer implementation.
var parseServiceInfo = function(url) {
    var _a;
    var host = url.host;
    var matched = (_a = host.match(AWS_ENDPOINT_REGEX)) !== null && _a !== void 0 ? _a : [];
    var parsed = matched.slice(1, 3);
    if (parsed[1] === "es") // Elastic Search
    parsed = parsed.reverse();
    return {
        service: parsed[0],
        region: parsed[1]
    };
};
// IoT service does not allow the session token in the canonical request
// https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html
// TODO: V6 investigate whether add to custom clients' general signer implementation.
var sessionTokenRequiredInSigning = function(service) {
    return service !== IOT_SERVICE_NAME;
};

},{"tslib":"iyInc","./Util":"hLH9s","./clients/middleware/signing/signer/signatureV4":"cUjkf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hLH9s":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "NonRetryableError", ()=>(0, _retry.NonRetryableError));
parcelHelpers.export(exports, "isNonRetryableError", ()=>(0, _retry.isNonRetryableError));
parcelHelpers.export(exports, "jitteredBackoff", ()=>(0, _retry.jitteredBackoff));
parcelHelpers.export(exports, "jitteredExponentialRetry", ()=>(0, _retry.jitteredExponentialRetry));
parcelHelpers.export(exports, "retry", ()=>(0, _retry.retry));
parcelHelpers.export(exports, "Mutex", ()=>(0, _mutexDefault.default));
parcelHelpers.export(exports, "Reachability", ()=>(0, _reachabilityDefault.default));
parcelHelpers.export(exports, "DateUtils", ()=>(0, _dateUtils.DateUtils));
parcelHelpers.export(exports, "urlSafeDecode", ()=>(0, _stringUtils.urlSafeDecode));
parcelHelpers.export(exports, "urlSafeEncode", ()=>(0, _stringUtils.urlSafeEncode));
parcelHelpers.export(exports, "AWS_CLOUDWATCH_BASE_BUFFER_SIZE", ()=>(0, _constants.AWS_CLOUDWATCH_BASE_BUFFER_SIZE));
parcelHelpers.export(exports, "AWS_CLOUDWATCH_CATEGORY", ()=>(0, _constants.AWS_CLOUDWATCH_CATEGORY));
parcelHelpers.export(exports, "AWS_CLOUDWATCH_MAX_BATCH_EVENT_SIZE", ()=>(0, _constants.AWS_CLOUDWATCH_MAX_BATCH_EVENT_SIZE));
parcelHelpers.export(exports, "AWS_CLOUDWATCH_MAX_EVENT_SIZE", ()=>(0, _constants.AWS_CLOUDWATCH_MAX_EVENT_SIZE));
parcelHelpers.export(exports, "AWS_CLOUDWATCH_PROVIDER_NAME", ()=>(0, _constants.AWS_CLOUDWATCH_PROVIDER_NAME));
parcelHelpers.export(exports, "NO_CREDS_ERROR_STRING", ()=>(0, _constants.NO_CREDS_ERROR_STRING));
parcelHelpers.export(exports, "RETRY_ERROR_CODES", ()=>(0, _constants.RETRY_ERROR_CODES));
parcelHelpers.export(exports, "BackgroundProcessManager", ()=>(0, _backgroundProcessManager.BackgroundProcessManager));
parcelHelpers.export(exports, "BackgroundManagerNotOpenError", ()=>(0, _backgroundProcessManager.BackgroundManagerNotOpenError));
parcelHelpers.export(exports, "BackgroundProcessManagerState", ()=>(0, _backgroundProcessManager.BackgroundProcessManagerState));
var _retry = require("./Retry");
var _mutex = require("./Mutex");
var _mutexDefault = parcelHelpers.interopDefault(_mutex);
var _reachability = require("./Reachability");
var _reachabilityDefault = parcelHelpers.interopDefault(_reachability);
var _dateUtils = require("./DateUtils");
var _stringUtils = require("./StringUtils");
var _constants = require("./Constants");
var _backgroundProcessManager = require("./BackgroundProcessManager");

},{"./Retry":"8aOZi","./Mutex":"b8Htg","./Reachability":"emyjp","./DateUtils":"hEBWb","./StringUtils":"ge69D","./Constants":"ey6Nm","./BackgroundProcessManager":"41OkH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8aOZi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "NonRetryableError", ()=>NonRetryableError);
parcelHelpers.export(exports, "isNonRetryableError", ()=>isNonRetryableError);
/**
 * @private
 * Internal use of Amplify only
 */ parcelHelpers.export(exports, "retry", ()=>retry);
/**
 * @private
 * Internal use of Amplify only
 */ parcelHelpers.export(exports, "jitteredBackoff", ()=>jitteredBackoff);
parcelHelpers.export(exports, "jitteredExponentialRetry", ()=>jitteredExponentialRetry);
var _tslib = require("tslib");
var _consoleLogger = require("../Logger/ConsoleLogger");
var logger = new (0, _consoleLogger.ConsoleLogger)("Util");
var NonRetryableError = /** @class */ function(_super) {
    (0, _tslib.__extends)(NonRetryableError, _super);
    function NonRetryableError(message) {
        var _this = _super.call(this, message) || this;
        _this.nonRetryable = true;
        return _this;
    }
    return NonRetryableError;
}(Error);
var isNonRetryableError = function(obj) {
    var key = "nonRetryable";
    return obj && obj[key];
};
function retry(functionToRetry, args, delayFn, onTerminate) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
        var _this = this;
        return (0, _tslib.__generator)(this, function(_a) {
            if (typeof functionToRetry !== "function") throw Error("functionToRetry must be a function");
            return [
                2 /*return*/ ,
                new Promise(function(resolve, reject) {
                    return (0, _tslib.__awaiter)(_this, void 0, void 0, function() {
                        var attempt, terminated, timeout, wakeUp, lastError, _loop_1, state_1;
                        return (0, _tslib.__generator)(this, function(_a) {
                            switch(_a.label){
                                case 0:
                                    attempt = 0;
                                    terminated = false;
                                    wakeUp = function() {};
                                    onTerminate && onTerminate.then(function() {
                                        // signal not to try anymore.
                                        terminated = true;
                                        // stop sleeping if we're sleeping.
                                        clearTimeout(timeout);
                                        wakeUp();
                                    });
                                    _loop_1 = function() {
                                        var _a, _b, err_1, retryIn_1;
                                        return (0, _tslib.__generator)(this, function(_c) {
                                            switch(_c.label){
                                                case 0:
                                                    attempt++;
                                                    logger.debug(functionToRetry.name + " attempt #" + attempt + " with this vars: " + JSON.stringify(args));
                                                    _c.label = 1;
                                                case 1:
                                                    _c.trys.push([
                                                        1,
                                                        3,
                                                        ,
                                                        7
                                                    ]);
                                                    _a = {};
                                                    _b = resolve;
                                                    return [
                                                        4 /*yield*/ ,
                                                        functionToRetry.apply(void 0, (0, _tslib.__spread)(args))
                                                    ];
                                                case 2:
                                                    return [
                                                        2 /*return*/ ,
                                                        (_a.value = _b.apply(void 0, [
                                                            _c.sent()
                                                        ]), _a)
                                                    ];
                                                case 3:
                                                    err_1 = _c.sent();
                                                    lastError = err_1;
                                                    logger.debug("error on " + functionToRetry.name, err_1);
                                                    if (isNonRetryableError(err_1)) {
                                                        logger.debug(functionToRetry.name + " non retryable error", err_1);
                                                        return [
                                                            2 /*return*/ ,
                                                            {
                                                                value: reject(err_1)
                                                            }
                                                        ];
                                                    }
                                                    retryIn_1 = delayFn(attempt, args, err_1);
                                                    logger.debug(functionToRetry.name + " retrying in " + retryIn_1 + " ms");
                                                    if (!(retryIn_1 === false || terminated)) return [
                                                        3 /*break*/ ,
                                                        4
                                                    ];
                                                    return [
                                                        2 /*return*/ ,
                                                        {
                                                            value: reject(err_1)
                                                        }
                                                    ];
                                                case 4:
                                                    return [
                                                        4 /*yield*/ ,
                                                        new Promise(function(r) {
                                                            wakeUp = r; // export wakeUp for onTerminate handling
                                                            timeout = setTimeout(wakeUp, retryIn_1);
                                                        })
                                                    ];
                                                case 5:
                                                    _c.sent();
                                                    _c.label = 6;
                                                case 6:
                                                    return [
                                                        3 /*break*/ ,
                                                        7
                                                    ];
                                                case 7:
                                                    return [
                                                        2 /*return*/ 
                                                    ];
                                            }
                                        });
                                    };
                                    _a.label = 1;
                                case 1:
                                    if (!!terminated) return [
                                        3 /*break*/ ,
                                        3
                                    ];
                                    return [
                                        5 /*yield**/ ,
                                        _loop_1()
                                    ];
                                case 2:
                                    state_1 = _a.sent();
                                    if (typeof state_1 === "object") return [
                                        2 /*return*/ ,
                                        state_1.value
                                    ];
                                    return [
                                        3 /*break*/ ,
                                        1
                                    ];
                                case 3:
                                    // reached if terminated while waiting for a timer.
                                    reject(lastError);
                                    return [
                                        2 /*return*/ 
                                    ];
                            }
                        });
                    });
                })
            ];
        });
    });
}
var MAX_DELAY_MS = 300000;
function jitteredBackoff(maxDelayMs) {
    if (maxDelayMs === void 0) maxDelayMs = MAX_DELAY_MS;
    var BASE_TIME_MS = 100;
    var JITTER_FACTOR = 100;
    return function(attempt) {
        var delay = Math.pow(2, attempt) * BASE_TIME_MS + JITTER_FACTOR * Math.random();
        return delay > maxDelayMs ? false : delay;
    };
}
var jitteredExponentialRetry = function(functionToRetry, args, maxDelayMs, onTerminate) {
    if (maxDelayMs === void 0) maxDelayMs = MAX_DELAY_MS;
    return retry(functionToRetry, args, jitteredBackoff(maxDelayMs), onTerminate);
};

},{"tslib":"iyInc","../Logger/ConsoleLogger":"9vCE0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b8Htg":[function(require,module,exports) {
/*!
 * The MIT License (MIT)
 *
 * Copyright (c) 2016 Christian Speckner <cnspeckn@googlemail.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var Mutex = /** @class */ function() {
    function Mutex() {
        this._queue = [];
        this._pending = false;
    }
    Mutex.prototype.isLocked = function() {
        return this._pending;
    };
    Mutex.prototype.acquire = function() {
        var _this = this;
        var ticket = new Promise(function(resolve) {
            return _this._queue.push(resolve);
        });
        if (!this._pending) this._dispatchNext();
        return ticket;
    };
    Mutex.prototype.runExclusive = function(callback) {
        return this.acquire().then(function(release) {
            var result;
            try {
                result = callback();
            } catch (e) {
                release();
                throw e;
            }
            return Promise.resolve(result).then(function(x) {
                return release(), x;
            }, function(e) {
                release();
                throw e;
            });
        });
    };
    Mutex.prototype._dispatchNext = function() {
        if (this._queue.length > 0) {
            this._pending = true;
            this._queue.shift()(this._dispatchNext.bind(this));
        } else this._pending = false;
    };
    return Mutex;
}();
exports.default = Mutex;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"emyjp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _tslib = require("tslib");
var _core = require("@aws-amplify/core");
var _zenObservableTs = require("zen-observable-ts");
var _zenObservableTsDefault = parcelHelpers.interopDefault(_zenObservableTs);
var ReachabilityNavigator = /** @class */ function() {
    function ReachabilityNavigator() {}
    ReachabilityNavigator.prototype.networkMonitor = function(netInfo) {
        if ((0, _core.browserOrNode)().isNode) return (0, _zenObservableTsDefault.default).from([
            {
                online: true
            }
        ]);
        var globalObj = (0, _core.isWebWorker)() ? self : window;
        return new (0, _zenObservableTsDefault.default)(function(observer) {
            observer.next({
                online: globalObj.navigator.onLine
            });
            var notifyOnline = function() {
                return observer.next({
                    online: true
                });
            };
            var notifyOffline = function() {
                return observer.next({
                    online: false
                });
            };
            globalObj.addEventListener("online", notifyOnline);
            globalObj.addEventListener("offline", notifyOffline);
            ReachabilityNavigator._observers.push(observer);
            return function() {
                globalObj.removeEventListener("online", notifyOnline);
                globalObj.removeEventListener("offline", notifyOffline);
                ReachabilityNavigator._observers = ReachabilityNavigator._observers.filter(function(_observer) {
                    return _observer !== observer;
                });
            };
        });
    };
    // expose observers to simulate offline mode for integration testing
    ReachabilityNavigator._observerOverride = function(status) {
        var e_1, _a;
        var _loop_1 = function(observer) {
            if (observer.closed) {
                ReachabilityNavigator._observers = ReachabilityNavigator._observers.filter(function(_observer) {
                    return _observer !== observer;
                });
                return "continue";
            }
            observer.next(status);
        };
        try {
            for(var _b = (0, _tslib.__values)(ReachabilityNavigator._observers), _c = _b.next(); !_c.done; _c = _b.next()){
                var observer = _c.value;
                _loop_1(observer);
            }
        } catch (e_1_1) {
            e_1 = {
                error: e_1_1
            };
        } finally{
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            } finally{
                if (e_1) throw e_1.error;
            }
        }
    };
    ReachabilityNavigator._observers = [];
    return ReachabilityNavigator;
}();
exports.default = ReachabilityNavigator;

},{"tslib":"iyInc","@aws-amplify/core":"hZcAF","zen-observable-ts":"92enM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"92enM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Observable", ()=>Observable);
var _zenObservable = require("zen-observable");
var _zenObservableDefault = parcelHelpers.interopDefault(_zenObservable);
var Observable = (0, _zenObservableDefault.default);
exports.default = Observable;

},{"zen-observable":"4w7A0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4w7A0":[function(require,module,exports) {
module.exports = require("51f843648b92a8cb").Observable;

},{"51f843648b92a8cb":"gVXbs"}],"gVXbs":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Observable = void 0;
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
// === Symbol Support ===
var hasSymbols = function() {
    return typeof Symbol === "function";
};
var hasSymbol = function(name) {
    return hasSymbols() && Boolean(Symbol[name]);
};
var getSymbol = function(name) {
    return hasSymbol(name) ? Symbol[name] : "@@" + name;
};
if (hasSymbols() && !hasSymbol("observable")) Symbol.observable = Symbol("observable");
var SymbolIterator = getSymbol("iterator");
var SymbolObservable = getSymbol("observable");
var SymbolSpecies = getSymbol("species"); // === Abstract Operations ===
function getMethod(obj, key) {
    var value = obj[key];
    if (value == null) return undefined;
    if (typeof value !== "function") throw new TypeError(value + " is not a function");
    return value;
}
function getSpecies(obj) {
    var ctor = obj.constructor;
    if (ctor !== undefined) {
        ctor = ctor[SymbolSpecies];
        if (ctor === null) ctor = undefined;
    }
    return ctor !== undefined ? ctor : Observable;
}
function isObservable(x) {
    return x instanceof Observable; // SPEC: Brand check
}
function hostReportError(e) {
    if (hostReportError.log) hostReportError.log(e);
    else setTimeout(function() {
        throw e;
    });
}
function enqueue(fn) {
    Promise.resolve().then(function() {
        try {
            fn();
        } catch (e) {
            hostReportError(e);
        }
    });
}
function cleanupSubscription(subscription) {
    var cleanup = subscription._cleanup;
    if (cleanup === undefined) return;
    subscription._cleanup = undefined;
    if (!cleanup) return;
    try {
        if (typeof cleanup === "function") cleanup();
        else {
            var unsubscribe = getMethod(cleanup, "unsubscribe");
            if (unsubscribe) unsubscribe.call(cleanup);
        }
    } catch (e) {
        hostReportError(e);
    }
}
function closeSubscription(subscription) {
    subscription._observer = undefined;
    subscription._queue = undefined;
    subscription._state = "closed";
}
function flushSubscription(subscription) {
    var queue = subscription._queue;
    if (!queue) return;
    subscription._queue = undefined;
    subscription._state = "ready";
    for(var i = 0; i < queue.length; ++i){
        notifySubscription(subscription, queue[i].type, queue[i].value);
        if (subscription._state === "closed") break;
    }
}
function notifySubscription(subscription, type, value) {
    subscription._state = "running";
    var observer = subscription._observer;
    try {
        var m = getMethod(observer, type);
        switch(type){
            case "next":
                if (m) m.call(observer, value);
                break;
            case "error":
                closeSubscription(subscription);
                if (m) m.call(observer, value);
                else throw value;
                break;
            case "complete":
                closeSubscription(subscription);
                if (m) m.call(observer);
                break;
        }
    } catch (e) {
        hostReportError(e);
    }
    if (subscription._state === "closed") cleanupSubscription(subscription);
    else if (subscription._state === "running") subscription._state = "ready";
}
function onNotify(subscription, type, value) {
    if (subscription._state === "closed") return;
    if (subscription._state === "buffering") {
        subscription._queue.push({
            type: type,
            value: value
        });
        return;
    }
    if (subscription._state !== "ready") {
        subscription._state = "buffering";
        subscription._queue = [
            {
                type: type,
                value: value
            }
        ];
        enqueue(function() {
            return flushSubscription(subscription);
        });
        return;
    }
    notifySubscription(subscription, type, value);
}
var Subscription = /*#__PURE__*/ function() {
    function Subscription(observer, subscriber) {
        _classCallCheck(this, Subscription);
        // ASSERT: observer is an object
        // ASSERT: subscriber is callable
        this._cleanup = undefined;
        this._observer = observer;
        this._queue = undefined;
        this._state = "initializing";
        var subscriptionObserver = new SubscriptionObserver(this);
        try {
            this._cleanup = subscriber.call(undefined, subscriptionObserver);
        } catch (e) {
            subscriptionObserver.error(e);
        }
        if (this._state === "initializing") this._state = "ready";
    }
    _createClass(Subscription, [
        {
            key: "unsubscribe",
            value: function unsubscribe() {
                if (this._state !== "closed") {
                    closeSubscription(this);
                    cleanupSubscription(this);
                }
            }
        },
        {
            key: "closed",
            get: function() {
                return this._state === "closed";
            }
        }
    ]);
    return Subscription;
}();
var SubscriptionObserver = /*#__PURE__*/ function() {
    function SubscriptionObserver(subscription) {
        _classCallCheck(this, SubscriptionObserver);
        this._subscription = subscription;
    }
    _createClass(SubscriptionObserver, [
        {
            key: "next",
            value: function next(value) {
                onNotify(this._subscription, "next", value);
            }
        },
        {
            key: "error",
            value: function error(value) {
                onNotify(this._subscription, "error", value);
            }
        },
        {
            key: "complete",
            value: function complete() {
                onNotify(this._subscription, "complete");
            }
        },
        {
            key: "closed",
            get: function() {
                return this._subscription._state === "closed";
            }
        }
    ]);
    return SubscriptionObserver;
}();
var Observable = /*#__PURE__*/ function() {
    function Observable(subscriber) {
        _classCallCheck(this, Observable);
        if (!(this instanceof Observable)) throw new TypeError("Observable cannot be called as a function");
        if (typeof subscriber !== "function") throw new TypeError("Observable initializer must be a function");
        this._subscriber = subscriber;
    }
    _createClass(Observable, [
        {
            key: "subscribe",
            value: function subscribe(observer) {
                if (typeof observer !== "object" || observer === null) observer = {
                    next: observer,
                    error: arguments[1],
                    complete: arguments[2]
                };
                return new Subscription(observer, this._subscriber);
            }
        },
        {
            key: "forEach",
            value: function forEach(fn) {
                var _this = this;
                return new Promise(function(resolve, reject) {
                    if (typeof fn !== "function") {
                        reject(new TypeError(fn + " is not a function"));
                        return;
                    }
                    function done() {
                        subscription.unsubscribe();
                        resolve();
                    }
                    var subscription = _this.subscribe({
                        next: function(value) {
                            try {
                                fn(value, done);
                            } catch (e) {
                                reject(e);
                                subscription.unsubscribe();
                            }
                        },
                        error: reject,
                        complete: resolve
                    });
                });
            }
        },
        {
            key: "map",
            value: function map(fn) {
                var _this2 = this;
                if (typeof fn !== "function") throw new TypeError(fn + " is not a function");
                var C = getSpecies(this);
                return new C(function(observer) {
                    return _this2.subscribe({
                        next: function(value) {
                            try {
                                value = fn(value);
                            } catch (e) {
                                return observer.error(e);
                            }
                            observer.next(value);
                        },
                        error: function(e) {
                            observer.error(e);
                        },
                        complete: function() {
                            observer.complete();
                        }
                    });
                });
            }
        },
        {
            key: "filter",
            value: function filter(fn) {
                var _this3 = this;
                if (typeof fn !== "function") throw new TypeError(fn + " is not a function");
                var C = getSpecies(this);
                return new C(function(observer) {
                    return _this3.subscribe({
                        next: function(value) {
                            try {
                                if (!fn(value)) return;
                            } catch (e) {
                                return observer.error(e);
                            }
                            observer.next(value);
                        },
                        error: function(e) {
                            observer.error(e);
                        },
                        complete: function() {
                            observer.complete();
                        }
                    });
                });
            }
        },
        {
            key: "reduce",
            value: function reduce(fn) {
                var _this4 = this;
                if (typeof fn !== "function") throw new TypeError(fn + " is not a function");
                var C = getSpecies(this);
                var hasSeed = arguments.length > 1;
                var hasValue = false;
                var seed = arguments[1];
                var acc = seed;
                return new C(function(observer) {
                    return _this4.subscribe({
                        next: function(value) {
                            var first = !hasValue;
                            hasValue = true;
                            if (!first || hasSeed) try {
                                acc = fn(acc, value);
                            } catch (e) {
                                return observer.error(e);
                            }
                            else acc = value;
                        },
                        error: function(e) {
                            observer.error(e);
                        },
                        complete: function() {
                            if (!hasValue && !hasSeed) return observer.error(new TypeError("Cannot reduce an empty sequence"));
                            observer.next(acc);
                            observer.complete();
                        }
                    });
                });
            }
        },
        {
            key: "concat",
            value: function concat() {
                var _this5 = this;
                for(var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++)sources[_key] = arguments[_key];
                var C = getSpecies(this);
                return new C(function(observer) {
                    var subscription;
                    var index = 0;
                    function startNext(next) {
                        subscription = next.subscribe({
                            next: function(v) {
                                observer.next(v);
                            },
                            error: function(e) {
                                observer.error(e);
                            },
                            complete: function() {
                                if (index === sources.length) {
                                    subscription = undefined;
                                    observer.complete();
                                } else startNext(C.from(sources[index++]));
                            }
                        });
                    }
                    startNext(_this5);
                    return function() {
                        if (subscription) {
                            subscription.unsubscribe();
                            subscription = undefined;
                        }
                    };
                });
            }
        },
        {
            key: "flatMap",
            value: function flatMap(fn) {
                var _this6 = this;
                if (typeof fn !== "function") throw new TypeError(fn + " is not a function");
                var C = getSpecies(this);
                return new C(function(observer) {
                    var subscriptions = [];
                    var outer = _this6.subscribe({
                        next: function(value) {
                            if (fn) try {
                                value = fn(value);
                            } catch (e) {
                                return observer.error(e);
                            }
                            var inner = C.from(value).subscribe({
                                next: function(value) {
                                    observer.next(value);
                                },
                                error: function(e) {
                                    observer.error(e);
                                },
                                complete: function() {
                                    var i = subscriptions.indexOf(inner);
                                    if (i >= 0) subscriptions.splice(i, 1);
                                    completeIfDone();
                                }
                            });
                            subscriptions.push(inner);
                        },
                        error: function(e) {
                            observer.error(e);
                        },
                        complete: function() {
                            completeIfDone();
                        }
                    });
                    function completeIfDone() {
                        if (outer.closed && subscriptions.length === 0) observer.complete();
                    }
                    return function() {
                        subscriptions.forEach(function(s) {
                            return s.unsubscribe();
                        });
                        outer.unsubscribe();
                    };
                });
            }
        },
        {
            key: SymbolObservable,
            value: function() {
                return this;
            }
        }
    ], [
        {
            key: "from",
            value: function from(x) {
                var C = typeof this === "function" ? this : Observable;
                if (x == null) throw new TypeError(x + " is not an object");
                var method = getMethod(x, SymbolObservable);
                if (method) {
                    var observable = method.call(x);
                    if (Object(observable) !== observable) throw new TypeError(observable + " is not an object");
                    if (isObservable(observable) && observable.constructor === C) return observable;
                    return new C(function(observer) {
                        return observable.subscribe(observer);
                    });
                }
                if (hasSymbol("iterator")) {
                    method = getMethod(x, SymbolIterator);
                    if (method) return new C(function(observer) {
                        enqueue(function() {
                            if (observer.closed) return;
                            var _iteratorNormalCompletion = true;
                            var _didIteratorError = false;
                            var _iteratorError = undefined;
                            try {
                                for(var _iterator = method.call(x)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                                    var _item = _step.value;
                                    observer.next(_item);
                                    if (observer.closed) return;
                                }
                            } catch (err) {
                                _didIteratorError = true;
                                _iteratorError = err;
                            } finally{
                                try {
                                    if (!_iteratorNormalCompletion && _iterator.return != null) _iterator.return();
                                } finally{
                                    if (_didIteratorError) throw _iteratorError;
                                }
                            }
                            observer.complete();
                        });
                    });
                }
                if (Array.isArray(x)) return new C(function(observer) {
                    enqueue(function() {
                        if (observer.closed) return;
                        for(var i = 0; i < x.length; ++i){
                            observer.next(x[i]);
                            if (observer.closed) return;
                        }
                        observer.complete();
                    });
                });
                throw new TypeError(x + " is not observable");
            }
        },
        {
            key: "of",
            value: function of() {
                for(var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++)items[_key2] = arguments[_key2];
                var C = typeof this === "function" ? this : Observable;
                return new C(function(observer) {
                    enqueue(function() {
                        if (observer.closed) return;
                        for(var i = 0; i < items.length; ++i){
                            observer.next(items[i]);
                            if (observer.closed) return;
                        }
                        observer.complete();
                    });
                });
            }
        },
        {
            key: SymbolSpecies,
            get: function() {
                return this;
            }
        }
    ]);
    return Observable;
}();
exports.Observable = Observable;
if (hasSymbols()) Object.defineProperty(Observable, Symbol("extensions"), {
    value: {
        symbol: SymbolObservable,
        hostReportError: hostReportError
    },
    configurable: true
});

},{}],"hEBWb":[function(require,module,exports) {
/**
 * Date & time utility functions to abstract the `aws-sdk` away from users.
 * (v2 => v3 modularization is a breaking change)
 *
 * @see https://github.com/aws/aws-sdk-js/blob/6edf586dcc1de7fe8fbfbbd9a0d2b1847921e6e1/lib/util.js#L262
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DateUtils", ()=>DateUtils);
var _tslib = require("tslib");
// Comment - TODO: remove
var FIVE_MINUTES_IN_MS = 300000;
var DateUtils = {
    /**
     * Milliseconds to offset the date to compensate for clock skew between device & services
     */ clockOffset: 0,
    getDateWithClockOffset: function() {
        if (DateUtils.clockOffset) return new Date(new Date().getTime() + DateUtils.clockOffset);
        else return new Date();
    },
    /**
     * @returns {number} Clock offset in milliseconds
     */ getClockOffset: function() {
        return DateUtils.clockOffset;
    },
    getHeaderStringFromDate: function(date) {
        if (date === void 0) date = DateUtils.getDateWithClockOffset();
        return date.toISOString().replace(/[:\-]|\.\d{3}/g, "");
    },
    getDateFromHeaderString: function(header) {
        var _a = (0, _tslib.__read)(header.match(/^(\d{4})(\d{2})(\d{2})T(\d{2})(\d{2})(\d{2}).+/), 7), year = _a[1], month = _a[2], day = _a[3], hour = _a[4], minute = _a[5], second = _a[6];
        return new Date(Date.UTC(Number(year), Number(month) - 1, Number(day), Number(hour), Number(minute), Number(second)));
    },
    isClockSkewed: function(serverDate) {
        // API gateway permits client calls that are off by no more than ±5 minutes
        return Math.abs(serverDate.getTime() - DateUtils.getDateWithClockOffset().getTime()) >= FIVE_MINUTES_IN_MS;
    },
    isClockSkewError: function(error) {
        if (!error.response || !error.response.headers) return false;
        var headers = error.response.headers;
        return Boolean([
            "BadRequestException",
            "InvalidSignatureException"
        ].includes(headers["x-amzn-errortype"]) && (headers.date || headers.Date));
    },
    /**
     * @param {number} offset Clock offset in milliseconds
     */ setClockOffset: function(offset) {
        DateUtils.clockOffset = offset;
    }
};

},{"tslib":"iyInc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ge69D":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "urlSafeEncode", ()=>urlSafeEncode);
parcelHelpers.export(exports, "urlSafeDecode", ()=>urlSafeDecode);
function urlSafeEncode(str) {
    return str.split("").map(function(char) {
        return char.charCodeAt(0).toString(16).padStart(2, "0");
    }).join("");
}
function urlSafeDecode(hex) {
    return hex.match(/.{2}/g).map(function(char) {
        return String.fromCharCode(parseInt(char, 16));
    }).join("");
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"41OkH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BackgroundProcessManager", ()=>BackgroundProcessManager);
parcelHelpers.export(exports, "BackgroundManagerNotOpenError", ()=>BackgroundManagerNotOpenError);
parcelHelpers.export(exports, "BackgroundProcessManagerState", ()=>BackgroundProcessManagerState);
var _tslib = require("tslib");
/**
 * @private For internal Amplify use.
 *
 * Creates a new scope for promises, observables, and other types of work or
 * processes that may be running in the background. This manager provides
 * an singular entrypoint to request termination and await completion.
 *
 * As work completes on its own prior to close, the manager removes them
 * from the registry to avoid holding references to completed jobs.
 */ var BackgroundProcessManager = /** @class */ function() {
    /**
     * Creates a new manager for promises, observables, and other types
     * of work that may be running in the background. This manager provides
     * a centralized mechanism to request termination and await completion.
     */ function BackgroundProcessManager() {
        /**
         * A string indicating whether the manager is accepting new work ("Open"),
         * waiting for work to complete ("Closing"), or fully done with all
         * submitted work and *not* accepting new jobs ("Closed").
         */ this._state = BackgroundProcessManagerState.Open;
        /**
         * The list of outstanding jobs we'll need to wait for upon `close()`
         */ this.jobs = new Set();
    }
    BackgroundProcessManager.prototype.add = function(jobOrDescription, optionalDescription) {
        var job;
        var description;
        if (typeof jobOrDescription === "string") {
            job = undefined;
            description = jobOrDescription;
        } else {
            job = jobOrDescription;
            description = optionalDescription;
        }
        var error = this.closedFailure(description);
        if (error) return error;
        if (job === undefined) return this.addHook(description);
        else if (typeof job === "function") return this.addFunction(job, description);
        else if (job instanceof BackgroundProcessManager) return this.addManager(job, description);
        else throw new Error("If `job` is provided, it must be an Observable, Function, or BackgroundProcessManager.");
    };
    /**
     * Adds a **cleaner** function that doesn't immediately get executed.
     * Instead, the caller gets a **terminate** function back. The *cleaner* is
     * invoked only once the mananger *closes* or the returned **terminate**
     * function is called.
     *
     * @param clean The cleanup function.
     * @param description Optional description to help identify pending jobs.
     * @returns A terminate function.
     */ BackgroundProcessManager.prototype.addCleaner = function(clean, description) {
        var _this = this;
        var _a = this.addHook(description), resolve = _a.resolve, onTerminate = _a.onTerminate;
        var proxy = function() {
            return (0, _tslib.__awaiter)(_this, void 0, void 0, function() {
                return (0, _tslib.__generator)(this, function(_a) {
                    switch(_a.label){
                        case 0:
                            return [
                                4 /*yield*/ ,
                                clean()
                            ];
                        case 1:
                            _a.sent();
                            resolve();
                            return [
                                2 /*return*/ 
                            ];
                    }
                });
            });
        };
        onTerminate.then(proxy);
        return proxy;
    };
    BackgroundProcessManager.prototype.addFunction = function(job, description) {
        // the function we call when we want to try to terminate this job.
        var terminate;
        // the promise the job can opt into listening to for termination.
        var onTerminate = new Promise(function(resolve) {
            terminate = resolve;
        });
        // finally! start the job.
        var jobResult = job(onTerminate);
        // depending on what the job gives back, register the result
        // so we can monitor for completion.
        if (typeof (jobResult === null || jobResult === void 0 ? void 0 : jobResult.then) === "function") this.registerPromise(jobResult, terminate, description);
        // At the end of the day, or you know, method call, it doesn't matter
        // what the return value is at all; we just pass it through to the
        // caller.
        return jobResult;
    };
    BackgroundProcessManager.prototype.addManager = function(manager, description) {
        var _this = this;
        this.addCleaner(function() {
            return (0, _tslib.__awaiter)(_this, void 0, void 0, function() {
                return (0, _tslib.__generator)(this, function(_a) {
                    switch(_a.label){
                        case 0:
                            return [
                                4 /*yield*/ ,
                                manager.close()
                            ];
                        case 1:
                            return [
                                2 /*return*/ ,
                                _a.sent()
                            ];
                    }
                });
            });
        }, description);
    };
    /**
     * Creates and registers a fabricated job for processes that need to operate
     * with callbacks/hooks. The returned `resolve` and `reject`
     * functions can be used to signal the job is done successfully or not.
     * The returned `onTerminate` is a promise that will resolve when the
     * manager is requesting the termination of the job.
     *
     * @param description Optional description to help identify pending jobs.
     * @returns `{ resolve, reject, onTerminate }`
     */ BackgroundProcessManager.prototype.addHook = function(description) {
        // the resolve/reject functions we'll provide to the caller to signal
        // the state of the job.
        var resolve;
        var reject;
        // the underlying promise we'll use to manage it, pretty much like
        // any other promise.
        var promise = new Promise(function(res, rej) {
            resolve = res;
            reject = rej;
        });
        // the function we call when we want to try to terminate this job.
        var terminate;
        // the promise the job can opt into listening to for termination.
        var onTerminate = new Promise(function(resolveTerminate) {
            terminate = resolveTerminate;
        });
        this.registerPromise(promise, terminate, description);
        return {
            resolve: resolve,
            reject: reject,
            onTerminate: onTerminate
        };
    };
    /**
     * Adds a Promise based job to the list of jobs for monitoring and listens
     * for either a success or failure, upon which the job is considered "done"
     * and removed from the registry.
     *
     * @param promise A promise that is on its way to being returned to a
     * caller, which needs to be tracked as a background job.
     * @param terminate The termination function to register, which can be
     * invoked to request the job stop.
     * @param description Optional description to help identify pending jobs.
     */ BackgroundProcessManager.prototype.registerPromise = function(promise, terminate, description) {
        var _this = this;
        var jobEntry = {
            promise: promise,
            terminate: terminate,
            description: description
        };
        this.jobs.add(jobEntry);
        // in all of my testing, it is safe to multi-subscribe to a promise.
        // so, rather than create another layer of promising, we're just going
        // to hook into the promise we already have, and when it's done
        // (successfully or not), we no longer need to wait for it upon close.
        //
        // sorry this is a bit hand-wavy:
        //
        // i believe we use `.then` and `.catch` instead of `.finally` because
        // `.finally` is invoked in a different order in the sequence, and this
        // breaks assumptions throughout and causes failures.
        promise.then(function() {
            _this.jobs.delete(jobEntry);
        }).catch(function() {
            _this.jobs.delete(jobEntry);
        });
    };
    Object.defineProperty(BackgroundProcessManager.prototype, "length", {
        /**
         * The number of jobs being waited on.
         *
         * We don't use this for anything. It's just informational for the caller,
         * and can be used in logging and testing.
         *
         * @returns the number of jobs.
         */ get: function() {
            return this.jobs.size;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BackgroundProcessManager.prototype, "state", {
        /**
         * The execution state of the manager. One of:
         *
         * 1. "Open" -> Accepting new jobs
         * 1. "Closing" -> Not accepting new work. Waiting for jobs to complete.
         * 1. "Closed" -> Not accepting new work. All submitted jobs are complete.
         */ get: function() {
            return this._state;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BackgroundProcessManager.prototype, "pending", {
        /**
         * The registered `description` of all still-pending jobs.
         *
         * @returns descriptions as an array.
         */ get: function() {
            return Array.from(this.jobs).map(function(job) {
                return job.description;
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BackgroundProcessManager.prototype, "isOpen", {
        /**
         * Whether the manager is accepting new jobs.
         */ get: function() {
            return this._state === BackgroundProcessManagerState.Open;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BackgroundProcessManager.prototype, "isClosing", {
        /**
         * Whether the manager is rejecting new work, but still waiting for
         * submitted work to complete.
         */ get: function() {
            return this._state === BackgroundProcessManagerState.Closing;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BackgroundProcessManager.prototype, "isClosed", {
        /**
         * Whether the manager is rejecting work and done waiting for submitted
         * work to complete.
         */ get: function() {
            return this._state === BackgroundProcessManagerState.Closed;
        },
        enumerable: true,
        configurable: true
    });
    BackgroundProcessManager.prototype.closedFailure = function(description) {
        if (!this.isOpen) return Promise.reject(new BackgroundManagerNotOpenError([
            "The manager is " + this.state + ".",
            'You tried to add "' + description + '".',
            "Pending jobs: [\n" + this.pending.map(function(t) {
                return "    " + t;
            }).join(",\n") + "\n]"
        ].join("\n")));
    };
    /**
     * Signals jobs to stop (for those that accept interruptions) and waits
     * for confirmation that jobs have stopped.
     *
     * This immediately puts the manager into a closing state and just begins
     * to reject new work. After all work in the manager is complete, the
     * manager goes into a `Completed` state and `close()` returns.
     *
     * This call is idempotent.
     *
     * If the manager is already closing or closed, `finalCleaup` is not executed.
     *
     * @param onClosed
     * @returns The settled results of each still-running job's promise. If the
     * manager is already closed, this will contain the results as of when the
     * manager's `close()` was called in an `Open` state.
     */ BackgroundProcessManager.prototype.close = function() {
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            var _a, _b, job;
            var e_1, _c;
            return (0, _tslib.__generator)(this, function(_d) {
                switch(_d.label){
                    case 0:
                        if (!this.isOpen) return [
                            3 /*break*/ ,
                            2
                        ];
                        this._state = BackgroundProcessManagerState.Closing;
                        try {
                            for(_a = (0, _tslib.__values)(Array.from(this.jobs)), _b = _a.next(); !_b.done; _b = _a.next()){
                                job = _b.value;
                                try {
                                    job.terminate();
                                } catch (error) {
                                    // Due to potential races with a job's natural completion, it's
                                    // reasonable to expect the termination call to fail. Hence,
                                    // not logging as an error.
                                    console.warn("Failed to send termination signal to job. Error: " + error.message, job);
                                }
                            }
                        } catch (e_1_1) {
                            e_1 = {
                                error: e_1_1
                            };
                        } finally{
                            try {
                                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                            } finally{
                                if (e_1) throw e_1.error;
                            }
                        }
                        // Use `allSettled()` because we want to wait for all to finish. We do
                        // not want to stop waiting if there is a failure.
                        this._closingPromise = Promise.allSettled(Array.from(this.jobs).map(function(j) {
                            return j.promise;
                        }));
                        return [
                            4 /*yield*/ ,
                            this._closingPromise
                        ];
                    case 1:
                        _d.sent();
                        this._state = BackgroundProcessManagerState.Closed;
                        _d.label = 2;
                    case 2:
                        return [
                            2 /*return*/ ,
                            this._closingPromise
                        ];
                }
            });
        });
    };
    /**
     * Signals the manager to start accepting work (again) and returns once
     * the manager is ready to do so.
     *
     * If the state is already `Open`, this call is a no-op.
     *
     * If the state is `Closed`, this call simply updates state and returns.
     *
     * If the state is `Closing`, this call waits for completion before it
     * updates the state and returns.
     */ BackgroundProcessManager.prototype.open = function() {
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            return (0, _tslib.__generator)(this, function(_a) {
                switch(_a.label){
                    case 0:
                        if (!this.isClosing) return [
                            3 /*break*/ ,
                            2
                        ];
                        return [
                            4 /*yield*/ ,
                            this.close()
                        ];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        this._state = BackgroundProcessManagerState.Open;
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    return BackgroundProcessManager;
}();
/**
 *
 */ var BackgroundManagerNotOpenError = /** @class */ function(_super) {
    (0, _tslib.__extends)(BackgroundManagerNotOpenError, _super);
    function BackgroundManagerNotOpenError(message) {
        return _super.call(this, "BackgroundManagerNotOpenError: " + message) || this;
    }
    return BackgroundManagerNotOpenError;
}(Error);
var BackgroundProcessManagerState;
(function(BackgroundProcessManagerState) {
    /**
     * Accepting new jobs.
     */ BackgroundProcessManagerState["Open"] = "Open";
    /**
     * Not accepting new jobs. Waiting for submitted jobs to complete.
     */ BackgroundProcessManagerState["Closing"] = "Closing";
    /**
     * Not accepting new jobs. All submitted jobs are complete.
     */ BackgroundProcessManagerState["Closed"] = "Closed";
})(BackgroundProcessManagerState || (BackgroundProcessManagerState = {}));

},{"tslib":"iyInc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cUjkf":[function(require,module,exports) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
// TODO: V6 replace Signer
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "signRequest", ()=>(0, _signRequest.signRequest));
parcelHelpers.export(exports, "presignUrl", ()=>(0, _presignUrl.presignUrl));
parcelHelpers.export(exports, "TOKEN_QUERY_PARAM", ()=>(0, _constants.TOKEN_QUERY_PARAM));
var _signRequest = require("./signRequest");
var _presignUrl = require("./presignUrl");
var _constants = require("./constants");

},{"./signRequest":"7lgec","./presignUrl":"1xanJ","./constants":"86NQs","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7lgec":[function(require,module,exports) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "signRequest", ()=>signRequest);
var _tslib = require("tslib");
var _getSignedHeaders = require("./utils/getSignedHeaders");
var _getSigningValues = require("./utils/getSigningValues");
var _constants = require("./constants");
var _getSignature = require("./utils/getSignature");
var signRequest = function(request, options) {
    var signingValues = (0, _getSigningValues.getSigningValues)(options);
    var accessKeyId = signingValues.accessKeyId, credentialScope = signingValues.credentialScope, longDate = signingValues.longDate, sessionToken = signingValues.sessionToken;
    // create the request to sign
    var headers = (0, _tslib.__assign)({}, request.headers);
    headers[0, _constants.HOST_HEADER] = request.url.host;
    headers[0, _constants.AMZ_DATE_HEADER] = longDate;
    if (sessionToken) headers[0, _constants.TOKEN_HEADER] = sessionToken;
    var requestToSign = (0, _tslib.__assign)((0, _tslib.__assign)({}, request), {
        headers: headers
    });
    // calculate and add the signature to the request
    var signature = (0, _getSignature.getSignature)(requestToSign, signingValues);
    var credentialEntry = "Credential=" + accessKeyId + "/" + credentialScope;
    var signedHeadersEntry = "SignedHeaders=" + (0, _getSignedHeaders.getSignedHeaders)(headers);
    var signatureEntry = "Signature=" + signature;
    headers[0, _constants.AUTH_HEADER] = (0, _constants.SHA256_ALGORITHM_IDENTIFIER) + " " + credentialEntry + ", " + signedHeadersEntry + ", " + signatureEntry;
    return requestToSign;
};

},{"tslib":"iyInc","./utils/getSignedHeaders":"7HoQ9","./utils/getSigningValues":"7Pp3N","./constants":"86NQs","./utils/getSignature":"kB6oe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7HoQ9":[function(require,module,exports) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Returns signed headers.
 *
 * @param headers `headers` from the request.
 * @returns List of headers included in canonical headers, separated by semicolons (;). This indicates which headers
 * are part of the signing process. Header names must use lowercase characters and must appear in alphabetical order.
 *
 * @internal
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getSignedHeaders", ()=>getSignedHeaders);
var getSignedHeaders = function(headers) {
    return Object.keys(headers).map(function(key) {
        return key.toLowerCase();
    }).sort().join(";");
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7Pp3N":[function(require,module,exports) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getSigningValues", ()=>getSigningValues);
var _getCredentialScope = require("./getCredentialScope");
var _getFormattedDates = require("./getFormattedDates");
var getSigningValues = function(_a) {
    var credentials = _a.credentials, _b = _a.signingDate, signingDate = _b === void 0 ? new Date() : _b, signingRegion = _a.signingRegion, signingService = _a.signingService;
    // get properties from credentials
    var accessKeyId = credentials.accessKeyId, secretAccessKey = credentials.secretAccessKey, sessionToken = credentials.sessionToken;
    // get formatted dates for signing
    var _c = (0, _getFormattedDates.getFormattedDates)(signingDate), longDate = _c.longDate, shortDate = _c.shortDate;
    // copy header and set signing properties
    var credentialScope = (0, _getCredentialScope.getCredentialScope)(shortDate, signingRegion, signingService);
    return {
        accessKeyId: accessKeyId,
        credentialScope: credentialScope,
        longDate: longDate,
        secretAccessKey: secretAccessKey,
        sessionToken: sessionToken,
        shortDate: shortDate,
        signingRegion: signingRegion,
        signingService: signingService
    };
};

},{"./getCredentialScope":"35iZH","./getFormattedDates":"1kN2C","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"35iZH":[function(require,module,exports) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getCredentialScope", ()=>getCredentialScope);
var _constants = require("../constants");
var getCredentialScope = function(date, region, service) {
    return date + "/" + region + "/" + service + "/" + (0, _constants.KEY_TYPE_IDENTIFIER);
};

},{"../constants":"86NQs","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"86NQs":[function(require,module,exports) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
// query params
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ALGORITHM_QUERY_PARAM", ()=>ALGORITHM_QUERY_PARAM);
parcelHelpers.export(exports, "AMZ_DATE_QUERY_PARAM", ()=>AMZ_DATE_QUERY_PARAM);
parcelHelpers.export(exports, "CREDENTIAL_QUERY_PARAM", ()=>CREDENTIAL_QUERY_PARAM);
parcelHelpers.export(exports, "EXPIRES_QUERY_PARAM", ()=>EXPIRES_QUERY_PARAM);
parcelHelpers.export(exports, "REGION_SET_PARAM", ()=>REGION_SET_PARAM);
parcelHelpers.export(exports, "SIGNATURE_QUERY_PARAM", ()=>SIGNATURE_QUERY_PARAM);
parcelHelpers.export(exports, "SIGNED_HEADERS_QUERY_PARAM", ()=>SIGNED_HEADERS_QUERY_PARAM);
parcelHelpers.export(exports, "TOKEN_QUERY_PARAM", ()=>TOKEN_QUERY_PARAM);
parcelHelpers.export(exports, "AUTH_HEADER", ()=>AUTH_HEADER);
parcelHelpers.export(exports, "HOST_HEADER", ()=>HOST_HEADER);
parcelHelpers.export(exports, "AMZ_DATE_HEADER", ()=>AMZ_DATE_HEADER);
parcelHelpers.export(exports, "TOKEN_HEADER", ()=>TOKEN_HEADER);
parcelHelpers.export(exports, "KEY_TYPE_IDENTIFIER", ()=>KEY_TYPE_IDENTIFIER);
parcelHelpers.export(exports, "SHA256_ALGORITHM_IDENTIFIER", ()=>SHA256_ALGORITHM_IDENTIFIER);
parcelHelpers.export(exports, "SIGNATURE_IDENTIFIER", ()=>SIGNATURE_IDENTIFIER);
parcelHelpers.export(exports, "EMPTY_HASH", ()=>EMPTY_HASH);
parcelHelpers.export(exports, "UNSIGNED_PAYLOAD", ()=>UNSIGNED_PAYLOAD);
var ALGORITHM_QUERY_PARAM = "X-Amz-Algorithm";
var AMZ_DATE_QUERY_PARAM = "X-Amz-Date";
var CREDENTIAL_QUERY_PARAM = "X-Amz-Credential";
var EXPIRES_QUERY_PARAM = "X-Amz-Expires";
var REGION_SET_PARAM = "X-Amz-Region-Set";
var SIGNATURE_QUERY_PARAM = "X-Amz-Signature";
var SIGNED_HEADERS_QUERY_PARAM = "X-Amz-SignedHeaders";
var TOKEN_QUERY_PARAM = "X-Amz-Security-Token";
var AUTH_HEADER = "authorization";
var HOST_HEADER = "host";
var AMZ_DATE_HEADER = AMZ_DATE_QUERY_PARAM.toLowerCase();
var TOKEN_HEADER = TOKEN_QUERY_PARAM.toLowerCase();
var KEY_TYPE_IDENTIFIER = "aws4_request";
var SHA256_ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256";
var SIGNATURE_IDENTIFIER = "AWS4";
var EMPTY_HASH = "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
var UNSIGNED_PAYLOAD = "UNSIGNED-PAYLOAD";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1kN2C":[function(require,module,exports) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Returns expected date strings to be used in signing.
 *
 * @param date JavaScript `Date` object.
 * @returns `FormattedDates` object containing the following:
 * - longDate: A date string in 'YYYYMMDDThhmmssZ' format
 * - shortDate: A date string in 'YYYYMMDD' format
 *
 * @internal
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getFormattedDates", ()=>getFormattedDates);
var getFormattedDates = function(date) {
    var longDate = date.toISOString().replace(/[:\-]|\.\d{3}/g, "");
    return {
        longDate: longDate,
        shortDate: longDate.slice(0, 8)
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kB6oe":[function(require,module,exports) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getSignature", ()=>getSignature);
var _dataHashHelpers = require("./dataHashHelpers");
var _getCanonicalRequest = require("./getCanonicalRequest");
var _getSigningKey = require("./getSigningKey");
var _getStringToSign = require("./getStringToSign");
var getSignature = function(request, _a) {
    var credentialScope = _a.credentialScope, longDate = _a.longDate, secretAccessKey = _a.secretAccessKey, shortDate = _a.shortDate, signingRegion = _a.signingRegion, signingService = _a.signingService;
    // step 1: create a canonical request
    var canonicalRequest = (0, _getCanonicalRequest.getCanonicalRequest)(request);
    // step 2: create a hash of the canonical request
    var hashedRequest = (0, _dataHashHelpers.getHashedDataAsHex)(null, canonicalRequest);
    // step 3: create a string to sign
    var stringToSign = (0, _getStringToSign.getStringToSign)(longDate, credentialScope, hashedRequest);
    // step 4: calculate the signature
    var signature = (0, _dataHashHelpers.getHashedDataAsHex)((0, _getSigningKey.getSigningKey)(secretAccessKey, shortDate, signingRegion, signingService), stringToSign);
    return signature;
};

},{"./dataHashHelpers":"eJ94r","./getCanonicalRequest":"bWgyq","./getSigningKey":"fpKJs","./getStringToSign":"kRe8Y","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eJ94r":[function(require,module,exports) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
// TODO: V6 update to different crypto dependency?
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getHashedData", ()=>getHashedData);
parcelHelpers.export(exports, "getHashedDataAsHex", ()=>getHashedDataAsHex);
var _sha256Js = require("@aws-crypto/sha256-js");
var _utilHexEncoding = require("@aws-sdk/util-hex-encoding");
var getHashedData = function(key, data) {
    var sha256 = new (0, _sha256Js.Sha256)(key);
    sha256.update(data);
    // TODO: V6 flip to async digest
    var hashedData = sha256.digestSync();
    return hashedData;
};
var getHashedDataAsHex = function(key, data) {
    var hashedData = getHashedData(key, data);
    return (0, _utilHexEncoding.toHex)(hashedData);
};

},{"@aws-crypto/sha256-js":"fXmvu","@aws-sdk/util-hex-encoding":"37zn6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fXmvu":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var tslib_1 = require("434af6f5bb6fc780");
(0, tslib_1.__exportStar)(require("f4048d3cba853475"), exports);

},{"434af6f5bb6fc780":"h6r7o","f4048d3cba853475":"3dWmU"}],"h6r7o":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3dWmU":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Sha256 = void 0;
var tslib_1 = require("b2529b697ad9bf1e");
var constants_1 = require("6aa0eaafe4b1ab7e");
var RawSha256_1 = require("3859a4731a910d5e");
var util_1 = require("3a7cb37b0685fa05");
var Sha256 = /** @class */ function() {
    function Sha256(secret) {
        this.hash = new RawSha256_1.RawSha256();
        if (secret) {
            this.outer = new RawSha256_1.RawSha256();
            var inner = bufferFromSecret(secret);
            var outer = new Uint8Array(constants_1.BLOCK_SIZE);
            outer.set(inner);
            for(var i = 0; i < constants_1.BLOCK_SIZE; i++){
                inner[i] ^= 0x36;
                outer[i] ^= 0x5c;
            }
            this.hash.update(inner);
            this.outer.update(outer);
            // overwrite the copied key in memory
            for(var i = 0; i < inner.byteLength; i++)inner[i] = 0;
        }
    }
    Sha256.prototype.update = function(toHash) {
        if ((0, util_1.isEmptyData)(toHash) || this.error) return;
        try {
            this.hash.update((0, util_1.convertToBuffer)(toHash));
        } catch (e) {
            this.error = e;
        }
    };
    /* This synchronous method keeps compatibility
     * with the v2 aws-sdk.
     */ Sha256.prototype.digestSync = function() {
        if (this.error) throw this.error;
        if (this.outer) {
            if (!this.outer.finished) this.outer.update(this.hash.digest());
            return this.outer.digest();
        }
        return this.hash.digest();
    };
    /* The underlying digest method here is synchronous.
     * To keep the same interface with the other hash functions
     * the default is to expose this as an async method.
     * However, it can sometimes be useful to have a sync method.
     */ Sha256.prototype.digest = function() {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function() {
            return (0, tslib_1.__generator)(this, function(_a) {
                return [
                    2 /*return*/ ,
                    this.digestSync()
                ];
            });
        });
    };
    return Sha256;
}();
exports.Sha256 = Sha256;
function bufferFromSecret(secret) {
    var input = (0, util_1.convertToBuffer)(secret);
    if (input.byteLength > constants_1.BLOCK_SIZE) {
        var bufferHash = new RawSha256_1.RawSha256();
        bufferHash.update(input);
        input = bufferHash.digest();
    }
    var buffer = new Uint8Array(constants_1.BLOCK_SIZE);
    buffer.set(input);
    return buffer;
}

},{"b2529b697ad9bf1e":"h6r7o","6aa0eaafe4b1ab7e":"hkOxZ","3859a4731a910d5e":"4LQhY","3a7cb37b0685fa05":"aDvRG"}],"hkOxZ":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.MAX_HASHABLE_LENGTH = exports.INIT = exports.KEY = exports.DIGEST_LENGTH = exports.BLOCK_SIZE = void 0;
/**
 * @internal
 */ exports.BLOCK_SIZE = 64;
/**
 * @internal
 */ exports.DIGEST_LENGTH = 32;
/**
 * @internal
 */ exports.KEY = new Uint32Array([
    0x428a2f98,
    0x71374491,
    0xb5c0fbcf,
    0xe9b5dba5,
    0x3956c25b,
    0x59f111f1,
    0x923f82a4,
    0xab1c5ed5,
    0xd807aa98,
    0x12835b01,
    0x243185be,
    0x550c7dc3,
    0x72be5d74,
    0x80deb1fe,
    0x9bdc06a7,
    0xc19bf174,
    0xe49b69c1,
    0xefbe4786,
    0x0fc19dc6,
    0x240ca1cc,
    0x2de92c6f,
    0x4a7484aa,
    0x5cb0a9dc,
    0x76f988da,
    0x983e5152,
    0xa831c66d,
    0xb00327c8,
    0xbf597fc7,
    0xc6e00bf3,
    0xd5a79147,
    0x06ca6351,
    0x14292967,
    0x27b70a85,
    0x2e1b2138,
    0x4d2c6dfc,
    0x53380d13,
    0x650a7354,
    0x766a0abb,
    0x81c2c92e,
    0x92722c85,
    0xa2bfe8a1,
    0xa81a664b,
    0xc24b8b70,
    0xc76c51a3,
    0xd192e819,
    0xd6990624,
    0xf40e3585,
    0x106aa070,
    0x19a4c116,
    0x1e376c08,
    0x2748774c,
    0x34b0bcb5,
    0x391c0cb3,
    0x4ed8aa4a,
    0x5b9cca4f,
    0x682e6ff3,
    0x748f82ee,
    0x78a5636f,
    0x84c87814,
    0x8cc70208,
    0x90befffa,
    0xa4506ceb,
    0xbef9a3f7,
    0xc67178f2
]);
/**
 * @internal
 */ exports.INIT = [
    0x6a09e667,
    0xbb67ae85,
    0x3c6ef372,
    0xa54ff53a,
    0x510e527f,
    0x9b05688c,
    0x1f83d9ab,
    0x5be0cd19
];
/**
 * @internal
 */ exports.MAX_HASHABLE_LENGTH = Math.pow(2, 53) - 1;

},{}],"4LQhY":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.RawSha256 = void 0;
var constants_1 = require("792dcabc61b5a4ca");
/**
 * @internal
 */ var RawSha256 = /** @class */ function() {
    function RawSha256() {
        this.state = Int32Array.from(constants_1.INIT);
        this.temp = new Int32Array(64);
        this.buffer = new Uint8Array(64);
        this.bufferLength = 0;
        this.bytesHashed = 0;
        /**
         * @internal
         */ this.finished = false;
    }
    RawSha256.prototype.update = function(data) {
        if (this.finished) throw new Error("Attempted to update an already finished hash.");
        var position = 0;
        var byteLength = data.byteLength;
        this.bytesHashed += byteLength;
        if (this.bytesHashed * 8 > constants_1.MAX_HASHABLE_LENGTH) throw new Error("Cannot hash more than 2^53 - 1 bits");
        while(byteLength > 0){
            this.buffer[this.bufferLength++] = data[position++];
            byteLength--;
            if (this.bufferLength === constants_1.BLOCK_SIZE) {
                this.hashBuffer();
                this.bufferLength = 0;
            }
        }
    };
    RawSha256.prototype.digest = function() {
        if (!this.finished) {
            var bitsHashed = this.bytesHashed * 8;
            var bufferView = new DataView(this.buffer.buffer, this.buffer.byteOffset, this.buffer.byteLength);
            var undecoratedLength = this.bufferLength;
            bufferView.setUint8(this.bufferLength++, 0x80);
            // Ensure the final block has enough room for the hashed length
            if (undecoratedLength % constants_1.BLOCK_SIZE >= constants_1.BLOCK_SIZE - 8) {
                for(var i = this.bufferLength; i < constants_1.BLOCK_SIZE; i++)bufferView.setUint8(i, 0);
                this.hashBuffer();
                this.bufferLength = 0;
            }
            for(var i = this.bufferLength; i < constants_1.BLOCK_SIZE - 8; i++)bufferView.setUint8(i, 0);
            bufferView.setUint32(constants_1.BLOCK_SIZE - 8, Math.floor(bitsHashed / 0x100000000), true);
            bufferView.setUint32(constants_1.BLOCK_SIZE - 4, bitsHashed);
            this.hashBuffer();
            this.finished = true;
        }
        // The value in state is little-endian rather than big-endian, so flip
        // each word into a new Uint8Array
        var out = new Uint8Array(constants_1.DIGEST_LENGTH);
        for(var i = 0; i < 8; i++){
            out[i * 4] = this.state[i] >>> 24 & 0xff;
            out[i * 4 + 1] = this.state[i] >>> 16 & 0xff;
            out[i * 4 + 2] = this.state[i] >>> 8 & 0xff;
            out[i * 4 + 3] = this.state[i] >>> 0 & 0xff;
        }
        return out;
    };
    RawSha256.prototype.hashBuffer = function() {
        var _a = this, buffer = _a.buffer, state = _a.state;
        var state0 = state[0], state1 = state[1], state2 = state[2], state3 = state[3], state4 = state[4], state5 = state[5], state6 = state[6], state7 = state[7];
        for(var i = 0; i < constants_1.BLOCK_SIZE; i++){
            if (i < 16) this.temp[i] = (buffer[i * 4] & 0xff) << 24 | (buffer[i * 4 + 1] & 0xff) << 16 | (buffer[i * 4 + 2] & 0xff) << 8 | buffer[i * 4 + 3] & 0xff;
            else {
                var u = this.temp[i - 2];
                var t1_1 = (u >>> 17 | u << 15) ^ (u >>> 19 | u << 13) ^ u >>> 10;
                u = this.temp[i - 15];
                var t2_1 = (u >>> 7 | u << 25) ^ (u >>> 18 | u << 14) ^ u >>> 3;
                this.temp[i] = (t1_1 + this.temp[i - 7] | 0) + (t2_1 + this.temp[i - 16] | 0);
            }
            var t1 = (((state4 >>> 6 | state4 << 26) ^ (state4 >>> 11 | state4 << 21) ^ (state4 >>> 25 | state4 << 7)) + (state4 & state5 ^ ~state4 & state6) | 0) + (state7 + (constants_1.KEY[i] + this.temp[i] | 0) | 0) | 0;
            var t2 = ((state0 >>> 2 | state0 << 30) ^ (state0 >>> 13 | state0 << 19) ^ (state0 >>> 22 | state0 << 10)) + (state0 & state1 ^ state0 & state2 ^ state1 & state2) | 0;
            state7 = state6;
            state6 = state5;
            state5 = state4;
            state4 = state3 + t1 | 0;
            state3 = state2;
            state2 = state1;
            state1 = state0;
            state0 = t1 + t2 | 0;
        }
        state[0] += state0;
        state[1] += state1;
        state[2] += state2;
        state[3] += state3;
        state[4] += state4;
        state[5] += state5;
        state[6] += state6;
        state[7] += state7;
    };
    return RawSha256;
}();
exports.RawSha256 = RawSha256;

},{"792dcabc61b5a4ca":"hkOxZ"}],"aDvRG":[function(require,module,exports) {
"use strict";
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.uint32ArrayFrom = exports.numToUint8 = exports.isEmptyData = exports.convertToBuffer = void 0;
var convertToBuffer_1 = require("c4067395a01bd502");
Object.defineProperty(exports, "convertToBuffer", {
    enumerable: true,
    get: function() {
        return convertToBuffer_1.convertToBuffer;
    }
});
var isEmptyData_1 = require("e00f465e438b54c6");
Object.defineProperty(exports, "isEmptyData", {
    enumerable: true,
    get: function() {
        return isEmptyData_1.isEmptyData;
    }
});
var numToUint8_1 = require("8e75d5f218b2def0");
Object.defineProperty(exports, "numToUint8", {
    enumerable: true,
    get: function() {
        return numToUint8_1.numToUint8;
    }
});
var uint32ArrayFrom_1 = require("f1e955941cf6517");
Object.defineProperty(exports, "uint32ArrayFrom", {
    enumerable: true,
    get: function() {
        return uint32ArrayFrom_1.uint32ArrayFrom;
    }
});

},{"c4067395a01bd502":"9wG1p","e00f465e438b54c6":"7lZKK","8e75d5f218b2def0":"6vB9f","f1e955941cf6517":"gwA65"}],"9wG1p":[function(require,module,exports) {
var Buffer = require("56a18e091a7fbf3a").Buffer;
"use strict";
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.convertToBuffer = void 0;
var util_utf8_browser_1 = require("136f70871940444c");
// Quick polyfill
var fromUtf8 = typeof Buffer !== "undefined" && Buffer.from ? function(input) {
    return Buffer.from(input, "utf8");
} : util_utf8_browser_1.fromUtf8;
function convertToBuffer(data) {
    // Already a Uint8, do nothing
    if (data instanceof Uint8Array) return data;
    if (typeof data === "string") return fromUtf8(data);
    if (ArrayBuffer.isView(data)) return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    return new Uint8Array(data);
}
exports.convertToBuffer = convertToBuffer;

},{"56a18e091a7fbf3a":"fCgem","136f70871940444c":"aUJSS"}],"fCgem":[function(require,module,exports) {
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */ /* eslint-disable no-proto */ "use strict";
var base64 = require("6ca09488df8d506b");
var ieee754 = require("6d41f57eed339bc2");
var customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" // eslint-disable-line dot-notation
 ? Symbol["for"]("nodejs.util.inspect.custom") // eslint-disable-line dot-notation
 : null;
exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;
var K_MAX_LENGTH = 0x7fffffff;
exports.kMaxLength = K_MAX_LENGTH;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */ Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();
if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
function typedArraySupport() {
    // Can typed array instances can be augmented?
    try {
        var arr = new Uint8Array(1);
        var proto = {
            foo: function() {
                return 42;
            }
        };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
    } catch (e) {
        return false;
    }
}
Object.defineProperty(Buffer.prototype, "parent", {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.buffer;
    }
});
Object.defineProperty(Buffer.prototype, "offset", {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.byteOffset;
    }
});
function createBuffer(length) {
    if (length > K_MAX_LENGTH) throw new RangeError('The value "' + length + '" is invalid for option "size"');
    // Return an augmented `Uint8Array` instance
    var buf = new Uint8Array(length);
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */ function Buffer(arg, encodingOrOffset, length) {
    // Common case.
    if (typeof arg === "number") {
        if (typeof encodingOrOffset === "string") throw new TypeError('The "string" argument must be of type string. Received type number');
        return allocUnsafe(arg);
    }
    return from(arg, encodingOrOffset, length);
}
Buffer.poolSize = 8192 // not used by this implementation
;
function from(value, encodingOrOffset, length) {
    if (typeof value === "string") return fromString(value, encodingOrOffset);
    if (ArrayBuffer.isView(value)) return fromArrayView(value);
    if (value == null) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
    if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) return fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) return fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof value === "number") throw new TypeError('The "value" argument must not be of type number. Received type number');
    var valueOf = value.valueOf && value.valueOf();
    if (valueOf != null && valueOf !== value) return Buffer.from(valueOf, encodingOrOffset, length);
    var b = fromObject(value);
    if (b) return b;
    if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") return Buffer.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/ Buffer.from = function(value, encodingOrOffset, length) {
    return from(value, encodingOrOffset, length);
};
// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
Object.setPrototypeOf(Buffer, Uint8Array);
function assertSize(size) {
    if (typeof size !== "number") throw new TypeError('"size" argument must be of type number');
    else if (size < 0) throw new RangeError('The value "' + size + '" is invalid for option "size"');
}
function alloc(size, fill, encoding) {
    assertSize(size);
    if (size <= 0) return createBuffer(size);
    if (fill !== undefined) // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
    return createBuffer(size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/ Buffer.alloc = function(size, fill, encoding) {
    return alloc(size, fill, encoding);
};
function allocUnsafe(size) {
    assertSize(size);
    return createBuffer(size < 0 ? 0 : checked(size) | 0);
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */ Buffer.allocUnsafe = function(size) {
    return allocUnsafe(size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */ Buffer.allocUnsafeSlow = function(size) {
    return allocUnsafe(size);
};
function fromString(string, encoding) {
    if (typeof encoding !== "string" || encoding === "") encoding = "utf8";
    if (!Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
    var length = byteLength(string, encoding) | 0;
    var buf = createBuffer(length);
    var actual = buf.write(string, encoding);
    if (actual !== length) // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual);
    return buf;
}
function fromArrayLike(array) {
    var length = array.length < 0 ? 0 : checked(array.length) | 0;
    var buf = createBuffer(length);
    for(var i = 0; i < length; i += 1)buf[i] = array[i] & 255;
    return buf;
}
function fromArrayView(arrayView) {
    if (isInstance(arrayView, Uint8Array)) {
        var copy = new Uint8Array(arrayView);
        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
    }
    return fromArrayLike(arrayView);
}
function fromArrayBuffer(array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) throw new RangeError('"offset" is outside of buffer bounds');
    if (array.byteLength < byteOffset + (length || 0)) throw new RangeError('"length" is outside of buffer bounds');
    var buf;
    if (byteOffset === undefined && length === undefined) buf = new Uint8Array(array);
    else if (length === undefined) buf = new Uint8Array(array, byteOffset);
    else buf = new Uint8Array(array, byteOffset, length);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
function fromObject(obj) {
    if (Buffer.isBuffer(obj)) {
        var len = checked(obj.length) | 0;
        var buf = createBuffer(len);
        if (buf.length === 0) return buf;
        obj.copy(buf, 0, 0, len);
        return buf;
    }
    if (obj.length !== undefined) {
        if (typeof obj.length !== "number" || numberIsNaN(obj.length)) return createBuffer(0);
        return fromArrayLike(obj);
    }
    if (obj.type === "Buffer" && Array.isArray(obj.data)) return fromArrayLike(obj.data);
}
function checked(length) {
    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= K_MAX_LENGTH) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
    return length | 0;
}
function SlowBuffer(length) {
    if (+length != length) length = 0;
    return Buffer.alloc(+length);
}
Buffer.isBuffer = function isBuffer(b) {
    return b != null && b._isBuffer === true && b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
    ;
};
Buffer.compare = function compare(a, b) {
    if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
    if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    if (a === b) return 0;
    var x = a.length;
    var y = b.length;
    for(var i = 0, len = Math.min(x, y); i < len; ++i)if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
Buffer.isEncoding = function isEncoding(encoding) {
    switch(String(encoding).toLowerCase()){
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return true;
        default:
            return false;
    }
};
Buffer.concat = function concat(list, length) {
    if (!Array.isArray(list)) throw new TypeError('"list" argument must be an Array of Buffers');
    if (list.length === 0) return Buffer.alloc(0);
    var i;
    if (length === undefined) {
        length = 0;
        for(i = 0; i < list.length; ++i)length += list[i].length;
    }
    var buffer = Buffer.allocUnsafe(length);
    var pos = 0;
    for(i = 0; i < list.length; ++i){
        var buf = list[i];
        if (isInstance(buf, Uint8Array)) {
            if (pos + buf.length > buffer.length) Buffer.from(buf).copy(buffer, pos);
            else Uint8Array.prototype.set.call(buffer, buf, pos);
        } else if (!Buffer.isBuffer(buf)) throw new TypeError('"list" argument must be an Array of Buffers');
        else buf.copy(buffer, pos);
        pos += buf.length;
    }
    return buffer;
};
function byteLength(string, encoding) {
    if (Buffer.isBuffer(string)) return string.length;
    if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) return string.byteLength;
    if (typeof string !== "string") throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string);
    var len = string.length;
    var mustMatch = arguments.length > 2 && arguments[2] === true;
    if (!mustMatch && len === 0) return 0;
    // Use a for loop to avoid recursion
    var loweredCase = false;
    for(;;)switch(encoding){
        case "ascii":
        case "latin1":
        case "binary":
            return len;
        case "utf8":
        case "utf-8":
            return utf8ToBytes(string).length;
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return len * 2;
        case "hex":
            return len >>> 1;
        case "base64":
            return base64ToBytes(string).length;
        default:
            if (loweredCase) return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
            ;
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
}
Buffer.byteLength = byteLength;
function slowToString(encoding, start, end) {
    var loweredCase = false;
    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.
    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) start = 0;
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) return "";
    if (end === undefined || end > this.length) end = this.length;
    if (end <= 0) return "";
    // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;
    if (end <= start) return "";
    if (!encoding) encoding = "utf8";
    while(true)switch(encoding){
        case "hex":
            return hexSlice(this, start, end);
        case "utf8":
        case "utf-8":
            return utf8Slice(this, start, end);
        case "ascii":
            return asciiSlice(this, start, end);
        case "latin1":
        case "binary":
            return latin1Slice(this, start, end);
        case "base64":
            return base64Slice(this, start, end);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return utf16leSlice(this, start, end);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = (encoding + "").toLowerCase();
            loweredCase = true;
    }
}
// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true;
function swap(b, n, m) {
    var i = b[n];
    b[n] = b[m];
    b[m] = i;
}
Buffer.prototype.swap16 = function swap16() {
    var len = this.length;
    if (len % 2 !== 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
    for(var i = 0; i < len; i += 2)swap(this, i, i + 1);
    return this;
};
Buffer.prototype.swap32 = function swap32() {
    var len = this.length;
    if (len % 4 !== 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
    for(var i = 0; i < len; i += 4){
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
    }
    return this;
};
Buffer.prototype.swap64 = function swap64() {
    var len = this.length;
    if (len % 8 !== 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
    for(var i = 0; i < len; i += 8){
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
    }
    return this;
};
Buffer.prototype.toString = function toString() {
    var length = this.length;
    if (length === 0) return "";
    if (arguments.length === 0) return utf8Slice(this, 0, length);
    return slowToString.apply(this, arguments);
};
Buffer.prototype.toLocaleString = Buffer.prototype.toString;
Buffer.prototype.equals = function equals(b) {
    if (!Buffer.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
    if (this === b) return true;
    return Buffer.compare(this, b) === 0;
};
Buffer.prototype.inspect = function inspect() {
    var str = "";
    var max = exports.INSPECT_MAX_BYTES;
    str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
    if (this.length > max) str += " ... ";
    return "<Buffer " + str + ">";
};
if (customInspectSymbol) Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if (isInstance(target, Uint8Array)) target = Buffer.from(target, target.offset, target.byteLength);
    if (!Buffer.isBuffer(target)) throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target);
    if (start === undefined) start = 0;
    if (end === undefined) end = target ? target.length : 0;
    if (thisStart === undefined) thisStart = 0;
    if (thisEnd === undefined) thisEnd = this.length;
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw new RangeError("out of range index");
    if (thisStart >= thisEnd && start >= end) return 0;
    if (thisStart >= thisEnd) return -1;
    if (start >= end) return 1;
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    var x = thisEnd - thisStart;
    var y = end - start;
    var len = Math.min(x, y);
    var thisCopy = this.slice(thisStart, thisEnd);
    var targetCopy = target.slice(start, end);
    for(var i = 0; i < len; ++i)if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1;
    // Normalize byteOffset
    if (typeof byteOffset === "string") {
        encoding = byteOffset;
        byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff;
    else if (byteOffset < -2147483648) byteOffset = -2147483648;
    byteOffset = +byteOffset // Coerce to Number.
    ;
    if (numberIsNaN(byteOffset)) // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
        if (dir) return -1;
        else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1;
    }
    // Normalize val
    if (typeof val === "string") val = Buffer.from(val, encoding);
    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if (Buffer.isBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) return -1;
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === "number") {
        val = val & 0xFF // Search for a byte value [0-255]
        ;
        if (typeof Uint8Array.prototype.indexOf === "function") {
            if (dir) return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            else return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
        }
        return arrayIndexOf(buffer, [
            val
        ], byteOffset, encoding, dir);
    }
    throw new TypeError("val must be string, number or Buffer");
}
function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    var indexSize = 1;
    var arrLength = arr.length;
    var valLength = val.length;
    if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
            if (arr.length < 2 || val.length < 2) return -1;
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
        }
    }
    function read(buf, i) {
        if (indexSize === 1) return buf[i];
        else return buf.readUInt16BE(i * indexSize);
    }
    var i;
    if (dir) {
        var foundIndex = -1;
        for(i = byteOffset; i < arrLength; i++)if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1) foundIndex = i;
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
        } else {
            if (foundIndex !== -1) i -= i - foundIndex;
            foundIndex = -1;
        }
    } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for(i = byteOffset; i >= 0; i--){
            var found = true;
            for(var j = 0; j < valLength; j++)if (read(arr, i + j) !== read(val, j)) {
                found = false;
                break;
            }
            if (found) return i;
        }
    }
    return -1;
}
Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
};
Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};
Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};
function hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    var remaining = buf.length - offset;
    if (!length) length = remaining;
    else {
        length = Number(length);
        if (length > remaining) length = remaining;
    }
    var strLen = string.length;
    if (length > strLen / 2) length = strLen / 2;
    for(var i = 0; i < length; ++i){
        var parsed = parseInt(string.substr(i * 2, 2), 16);
        if (numberIsNaN(parsed)) return i;
        buf[offset + i] = parsed;
    }
    return i;
}
function utf8Write(buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function asciiWrite(buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length);
}
function base64Write(buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length);
}
function ucs2Write(buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}
Buffer.prototype.write = function write(string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
        encoding = "utf8";
        length = this.length;
        offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === "string") {
        encoding = offset;
        length = this.length;
        offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === undefined) encoding = "utf8";
        } else {
            encoding = length;
            length = undefined;
        }
    } else throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
    var remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;
    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw new RangeError("Attempt to write outside buffer bounds");
    if (!encoding) encoding = "utf8";
    var loweredCase = false;
    for(;;)switch(encoding){
        case "hex":
            return hexWrite(this, string, offset, length);
        case "utf8":
        case "utf-8":
            return utf8Write(this, string, offset, length);
        case "ascii":
        case "latin1":
        case "binary":
            return asciiWrite(this, string, offset, length);
        case "base64":
            // Warning: maxLength not taken into account in base64Write
            return base64Write(this, string, offset, length);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return ucs2Write(this, string, offset, length);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
};
Buffer.prototype.toJSON = function toJSON() {
    return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
    };
};
function base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) return base64.fromByteArray(buf);
    else return base64.fromByteArray(buf.slice(start, end));
}
function utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    var res = [];
    var i = start;
    while(i < end){
        var firstByte = buf[i];
        var codePoint = null;
        var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;
        if (i + bytesPerSequence <= end) {
            var secondByte, thirdByte, fourthByte, tempCodePoint;
            switch(bytesPerSequence){
                case 1:
                    if (firstByte < 0x80) codePoint = firstByte;
                    break;
                case 2:
                    secondByte = buf[i + 1];
                    if ((secondByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
                        if (tempCodePoint > 0x7F) codePoint = tempCodePoint;
                    }
                    break;
                case 3:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
                        if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) codePoint = tempCodePoint;
                    }
                    break;
                case 4:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    fourthByte = buf[i + 3];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
                        if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) codePoint = tempCodePoint;
                    }
            }
        }
        if (codePoint === null) {
            // we did not generate a valid codePoint so insert a
            // replacement char (U+FFFD) and advance only 1 byte
            codePoint = 0xFFFD;
            bytesPerSequence = 1;
        } else if (codePoint > 0xFFFF) {
            // encode to utf16 (surrogate pair dance)
            codePoint -= 0x10000;
            res.push(codePoint >>> 10 & 0x3FF | 0xD800);
            codePoint = 0xDC00 | codePoint & 0x3FF;
        }
        res.push(codePoint);
        i += bytesPerSequence;
    }
    return decodeCodePointsArray(res);
}
// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000;
function decodeCodePointsArray(codePoints) {
    var len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    ;
    // Decode in chunks to avoid "call stack size exceeded".
    var res = "";
    var i = 0;
    while(i < len)res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
    return res;
}
function asciiSlice(buf, start, end) {
    var ret = "";
    end = Math.min(buf.length, end);
    for(var i = start; i < end; ++i)ret += String.fromCharCode(buf[i] & 0x7F);
    return ret;
}
function latin1Slice(buf, start, end) {
    var ret = "";
    end = Math.min(buf.length, end);
    for(var i = start; i < end; ++i)ret += String.fromCharCode(buf[i]);
    return ret;
}
function hexSlice(buf, start, end) {
    var len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    var out = "";
    for(var i = start; i < end; ++i)out += hexSliceLookupTable[buf[i]];
    return out;
}
function utf16leSlice(buf, start, end) {
    var bytes = buf.slice(start, end);
    var res = "";
    // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
    for(var i = 0; i < bytes.length - 1; i += 2)res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    return res;
}
Buffer.prototype.slice = function slice(start, end) {
    var len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;
    if (start < 0) {
        start += len;
        if (start < 0) start = 0;
    } else if (start > len) start = len;
    if (end < 0) {
        end += len;
        if (end < 0) end = 0;
    } else if (end > len) end = len;
    if (end < start) end = start;
    var newBuf = this.subarray(start, end);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(newBuf, Buffer.prototype);
    return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */ function checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
    if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
}
Buffer.prototype.readUintLE = Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;
    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
    return val;
};
Buffer.prototype.readUintBE = Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var val = this[offset + --byteLength];
    var mul = 1;
    while(byteLength > 0 && (mul *= 0x100))val += this[offset + --byteLength] * mul;
    return val;
};
Buffer.prototype.readUint8 = Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset];
};
Buffer.prototype.readUint16LE = Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
};
Buffer.prototype.readUint16BE = Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
};
Buffer.prototype.readUint32LE = Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};
Buffer.prototype.readUint32BE = Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};
Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;
    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var i = byteLength;
    var mul = 1;
    var val = this[offset + --i];
    while(i > 0 && (mul *= 0x100))val += this[offset + --i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return this[offset];
    return (0xff - this[offset] + 1) * -1;
};
Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset] | this[offset + 1] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset + 1] | this[offset] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};
Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};
Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, true, 23, 4);
};
Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, false, 23, 4);
};
Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, true, 52, 8);
};
Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, false, 52, 8);
};
function checkInt(buf, value, offset, ext, max, min) {
    if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
}
Buffer.prototype.writeUintLE = Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    var mul = 1;
    var i = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength;
};
Buffer.prototype.writeUintBE = Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    var i = byteLength - 1;
    var mul = 1;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength;
};
Buffer.prototype.writeUint8 = Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
    this[offset] = value & 0xff;
    return offset + 1;
};
Buffer.prototype.writeUint16LE = Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeUint16BE = Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
Buffer.prototype.writeUint32LE = Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
    return offset + 4;
};
Buffer.prototype.writeUint32BE = Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);
        checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    var i = 0;
    var mul = 1;
    var sub = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);
        checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    var i = byteLength - 1;
    var mul = 1;
    var sub = 0;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -128);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = value & 0xff;
    return offset + 1;
};
Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
    return offset + 4;
};
Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    if (value < 0) value = 0xffffffff + value + 1;
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
function checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
    if (offset < 0) throw new RangeError("Index out of range");
}
function writeFloat(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -340282346638528860000000000000000000000);
    ieee754.write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
}
Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert);
};
Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert);
};
function writeDouble(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);
    ieee754.write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
}
Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert);
};
Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert);
};
// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy(target, targetStart, start, end) {
    if (!Buffer.isBuffer(target)) throw new TypeError("argument should be a Buffer");
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;
    // Copy 0 bytes; we're done
    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0;
    // Fatal error conditions
    if (targetStart < 0) throw new RangeError("targetStart out of bounds");
    if (start < 0 || start >= this.length) throw new RangeError("Index out of range");
    if (end < 0) throw new RangeError("sourceEnd out of bounds");
    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) end = target.length - targetStart + start;
    var len = end - start;
    if (this === target && typeof Uint8Array.prototype.copyWithin === "function") // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end);
    else Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
    return len;
};
// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill(val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === "string") {
        if (typeof start === "string") {
            encoding = start;
            start = 0;
            end = this.length;
        } else if (typeof end === "string") {
            encoding = end;
            end = this.length;
        }
        if (encoding !== undefined && typeof encoding !== "string") throw new TypeError("encoding must be a string");
        if (typeof encoding === "string" && !Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
        if (val.length === 1) {
            var code = val.charCodeAt(0);
            if (encoding === "utf8" && code < 128 || encoding === "latin1") // Fast path: If `val` fits into a single byte, use that numeric value.
            val = code;
        }
    } else if (typeof val === "number") val = val & 255;
    else if (typeof val === "boolean") val = Number(val);
    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) throw new RangeError("Out of range index");
    if (end <= start) return this;
    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;
    if (!val) val = 0;
    var i;
    if (typeof val === "number") for(i = start; i < end; ++i)this[i] = val;
    else {
        var bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
        var len = bytes.length;
        if (len === 0) throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        for(i = 0; i < end - start; ++i)this[i + start] = bytes[i % len];
    }
    return this;
};
// HELPER FUNCTIONS
// ================
var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
function base64clean(str) {
    // Node takes equal signs as end of the Base64 encoding
    str = str.split("=")[0];
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = str.trim().replace(INVALID_BASE64_RE, "");
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return "";
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while(str.length % 4 !== 0)str = str + "=";
    return str;
}
function utf8ToBytes(string, units) {
    units = units || Infinity;
    var codePoint;
    var length = string.length;
    var leadSurrogate = null;
    var bytes = [];
    for(var i = 0; i < length; ++i){
        codePoint = string.charCodeAt(i);
        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
            // last char was a lead
            if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 0xDBFF) {
                    // unexpected trail
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                } else if (i + 1 === length) {
                    // unpaired lead
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                }
                // valid lead
                leadSurrogate = codePoint;
                continue;
            }
            // 2 leads in a row
            if (codePoint < 0xDC00) {
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                leadSurrogate = codePoint;
                continue;
            }
            // valid surrogate pair
            codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
        } else if (leadSurrogate) // valid bmp char, but last char was a lead
        {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        }
        leadSurrogate = null;
        // encode utf8
        if (codePoint < 0x80) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
        } else if (codePoint < 0x800) {
            if ((units -= 2) < 0) break;
            bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x10000) {
            if ((units -= 3) < 0) break;
            bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x110000) {
            if ((units -= 4) < 0) break;
            bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else throw new Error("Invalid code point");
    }
    return bytes;
}
function asciiToBytes(str) {
    var byteArray = [];
    for(var i = 0; i < str.length; ++i)// Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
    return byteArray;
}
function utf16leToBytes(str, units) {
    var c, hi, lo;
    var byteArray = [];
    for(var i = 0; i < str.length; ++i){
        if ((units -= 2) < 0) break;
        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
    }
    return byteArray;
}
function base64ToBytes(str) {
    return base64.toByteArray(base64clean(str));
}
function blitBuffer(src, dst, offset, length) {
    for(var i = 0; i < length; ++i){
        if (i + offset >= dst.length || i >= src.length) break;
        dst[i + offset] = src[i];
    }
    return i;
}
// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance(obj, type) {
    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
}
function numberIsNaN(obj) {
    // For IE11 support
    return obj !== obj // eslint-disable-line no-self-compare
    ;
}
// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
var hexSliceLookupTable = function() {
    var alphabet = "0123456789abcdef";
    var table = new Array(256);
    for(var i = 0; i < 16; ++i){
        var i16 = i * 16;
        for(var j = 0; j < 16; ++j)table[i16 + j] = alphabet[i] + alphabet[j];
    }
    return table;
}();

},{"6ca09488df8d506b":"eIiSV","6d41f57eed339bc2":"cO95r"}],"eIiSV":[function(require,module,exports) {
"use strict";
exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
for(var i = 0, len = code.length; i < len; ++i){
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
}
// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup["-".charCodeAt(0)] = 62;
revLookup["_".charCodeAt(0)] = 63;
function getLens(b64) {
    var len = b64.length;
    if (len % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
    // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
    var validLen = b64.indexOf("=");
    if (validLen === -1) validLen = len;
    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
    return [
        validLen,
        placeHoldersLen
    ];
}
// base64 is 4/3 + up to two characters of the original data
function byteLength(b64) {
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function _byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function toByteArray(b64) {
    var tmp;
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    // if there are placeholders, only get up to the last complete 4 chars
    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i;
    for(i = 0; i < len; i += 4){
        tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
        arr[curByte++] = tmp >> 16 & 0xFF;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    return arr;
}
function tripletToBase64(num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}
function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for(var i = start; i < end; i += 3){
        tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
        output.push(tripletToBase64(tmp));
    }
    return output.join("");
}
function fromByteArray(uint8) {
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
    ;
    var parts = [];
    var maxChunkLength = 16383 // must be multiple of 3
    ;
    // go through the array every three bytes, we'll deal with trailing stuff later
    for(var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength)parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
        tmp = uint8[len - 1];
        parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + "==");
    } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + "=");
    }
    return parts.join("");
}

},{}],"cO95r":[function(require,module,exports) {
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ exports.read = function(buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for(; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for(; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);
    if (e === 0) e = 1 - eBias;
    else if (e === eMax) return m ? NaN : (s ? -1 : 1) * Infinity;
    else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};
exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
    } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
        }
        if (e + eBias >= 1) value += rt / c;
        else value += rt * Math.pow(2, 1 - eBias);
        if (value * c >= 2) {
            e++;
            c /= 2;
        }
        if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
        } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
        } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
        }
    }
    for(; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);
    e = e << mLen | m;
    eLen += mLen;
    for(; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);
    buffer[offset + i - d] |= s * 128;
};

},{}],"aUJSS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fromUtf8", ()=>fromUtf8);
parcelHelpers.export(exports, "toUtf8", ()=>toUtf8);
var _pureJs = require("./pureJs");
var _whatwgEncodingApi = require("./whatwgEncodingApi");
var fromUtf8 = function(input) {
    return typeof TextEncoder === "function" ? (0, _whatwgEncodingApi.fromUtf8)(input) : (0, _pureJs.fromUtf8)(input);
};
var toUtf8 = function(input) {
    return typeof TextDecoder === "function" ? (0, _whatwgEncodingApi.toUtf8)(input) : (0, _pureJs.toUtf8)(input);
};

},{"./pureJs":"7z43D","./whatwgEncodingApi":"d3Bf3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7z43D":[function(require,module,exports) {
/**
 * Converts a JS string from its native UCS-2/UTF-16 representation into a
 * Uint8Array of the bytes used to represent the equivalent characters in UTF-8.
 *
 * Cribbed from the `goog.crypt.stringToUtf8ByteArray` function in the Google
 * Closure library, though updated to use typed arrays.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fromUtf8", ()=>fromUtf8);
parcelHelpers.export(exports, "toUtf8", ()=>toUtf8);
var fromUtf8 = function(input) {
    var bytes = [];
    for(var i = 0, len = input.length; i < len; i++){
        var value = input.charCodeAt(i);
        if (value < 0x80) bytes.push(value);
        else if (value < 0x800) bytes.push(value >> 6 | 192, value & 63 | 128);
        else if (i + 1 < input.length && (value & 0xfc00) === 0xd800 && (input.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {
            var surrogatePair = 0x10000 + ((value & 1023) << 10) + (input.charCodeAt(++i) & 1023);
            bytes.push(surrogatePair >> 18 | 240, surrogatePair >> 12 & 63 | 128, surrogatePair >> 6 & 63 | 128, surrogatePair & 63 | 128);
        } else bytes.push(value >> 12 | 224, value >> 6 & 63 | 128, value & 63 | 128);
    }
    return Uint8Array.from(bytes);
};
var toUtf8 = function(input) {
    var decoded = "";
    for(var i = 0, len = input.length; i < len; i++){
        var byte = input[i];
        if (byte < 0x80) decoded += String.fromCharCode(byte);
        else if (192 <= byte && byte < 224) {
            var nextByte = input[++i];
            decoded += String.fromCharCode((byte & 31) << 6 | nextByte & 63);
        } else if (240 <= byte && byte < 365) {
            var surrogatePair = [
                byte,
                input[++i],
                input[++i],
                input[++i]
            ];
            var encoded = "%" + surrogatePair.map(function(byteValue) {
                return byteValue.toString(16);
            }).join("%");
            decoded += decodeURIComponent(encoded);
        } else decoded += String.fromCharCode((byte & 15) << 12 | (input[++i] & 63) << 6 | input[++i] & 63);
    }
    return decoded;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d3Bf3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fromUtf8", ()=>fromUtf8);
parcelHelpers.export(exports, "toUtf8", ()=>toUtf8);
function fromUtf8(input) {
    return new TextEncoder().encode(input);
}
function toUtf8(input) {
    return new TextDecoder("utf-8").decode(input);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7lZKK":[function(require,module,exports) {
"use strict";
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isEmptyData = void 0;
function isEmptyData(data) {
    if (typeof data === "string") return data.length === 0;
    return data.byteLength === 0;
}
exports.isEmptyData = isEmptyData;

},{}],"6vB9f":[function(require,module,exports) {
"use strict";
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.numToUint8 = void 0;
function numToUint8(num) {
    return new Uint8Array([
        (num & 0xff000000) >> 24,
        (num & 0x00ff0000) >> 16,
        (num & 0x0000ff00) >> 8,
        num & 0x000000ff
    ]);
}
exports.numToUint8 = numToUint8;

},{}],"gwA65":[function(require,module,exports) {
"use strict";
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.uint32ArrayFrom = void 0;
// IE 11 does not support Array.from, so we do it manually
function uint32ArrayFrom(a_lookUpTable) {
    if (!Array.from) {
        var return_array = new Uint32Array(a_lookUpTable.length);
        var a_index = 0;
        while(a_index < a_lookUpTable.length)return_array[a_index] = a_lookUpTable[a_index];
        return return_array;
    }
    return Uint32Array.from(a_lookUpTable);
}
exports.uint32ArrayFrom = uint32ArrayFrom;

},{}],"37zn6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Converts a hexadecimal encoded string to a Uint8Array of bytes.
 *
 * @param encoded The hexadecimal encoded string
 */ parcelHelpers.export(exports, "fromHex", ()=>fromHex);
/**
 * Converts a Uint8Array of binary data to a hexadecimal encoded string.
 *
 * @param bytes The binary data to encode
 */ parcelHelpers.export(exports, "toHex", ()=>toHex);
var SHORT_TO_HEX = {};
var HEX_TO_SHORT = {};
for(var i = 0; i < 256; i++){
    var encodedByte = i.toString(16).toLowerCase();
    if (encodedByte.length === 1) encodedByte = "0" + encodedByte;
    SHORT_TO_HEX[i] = encodedByte;
    HEX_TO_SHORT[encodedByte] = i;
}
function fromHex(encoded) {
    if (encoded.length % 2 !== 0) throw new Error("Hex encoded strings must have an even number length");
    var out = new Uint8Array(encoded.length / 2);
    for(var i = 0; i < encoded.length; i += 2){
        var encodedByte = encoded.substr(i, 2).toLowerCase();
        if (encodedByte in HEX_TO_SHORT) out[i / 2] = HEX_TO_SHORT[encodedByte];
        else throw new Error("Cannot decode unrecognized sequence " + encodedByte + " as hexadecimal");
    }
    return out;
}
function toHex(bytes) {
    var out = "";
    for(var i = 0; i < bytes.byteLength; i++)out += SHORT_TO_HEX[bytes[i]];
    return out;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bWgyq":[function(require,module,exports) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getCanonicalRequest", ()=>getCanonicalRequest);
var _getCanonicalHeaders = require("./getCanonicalHeaders");
var _getCanonicalQueryString = require("./getCanonicalQueryString");
var _getCanonicalUri = require("./getCanonicalUri");
var _getHashedPayload = require("./getHashedPayload");
var _getSignedHeaders = require("./getSignedHeaders");
var getCanonicalRequest = function(_a) {
    var body = _a.body, headers = _a.headers, method = _a.method, url = _a.url;
    return [
        method,
        (0, _getCanonicalUri.getCanonicalUri)(url.pathname),
        (0, _getCanonicalQueryString.getCanonicalQueryString)(url.searchParams),
        (0, _getCanonicalHeaders.getCanonicalHeaders)(headers),
        (0, _getSignedHeaders.getSignedHeaders)(headers),
        (0, _getHashedPayload.getHashedPayload)(body)
    ].join("\n");
};

},{"./getCanonicalHeaders":"i9bNV","./getCanonicalQueryString":"4XlRG","./getCanonicalUri":"aqEwk","./getHashedPayload":"9UOZQ","./getSignedHeaders":"7HoQ9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i9bNV":[function(require,module,exports) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getCanonicalHeaders", ()=>getCanonicalHeaders);
var _tslib = require("tslib");
var getCanonicalHeaders = function(headers) {
    return Object.entries(headers).map(function(_a) {
        var _b = (0, _tslib.__read)(_a, 2), key = _b[0], value = _b[1];
        var _c;
        return {
            key: key.toLowerCase(),
            value: (_c = value === null || value === void 0 ? void 0 : value.trim().replace(/\s+/g, " ")) !== null && _c !== void 0 ? _c : ""
        };
    }).sort(function(a, b) {
        return a.key < b.key ? -1 : 1;
    }).map(function(entry) {
        return entry.key + ":" + entry.value + "\n";
    }).join("");
};

},{"tslib":"iyInc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4XlRG":[function(require,module,exports) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getCanonicalQueryString", ()=>getCanonicalQueryString);
var _tslib = require("tslib");
var getCanonicalQueryString = function(searchParams) {
    return Array.from(searchParams).sort(function(_a, _b) {
        var _c = (0, _tslib.__read)(_a, 2), keyA = _c[0], valA = _c[1];
        var _d = (0, _tslib.__read)(_b, 2), keyB = _d[0], valB = _d[1];
        if (keyA === keyB) return valA < valB ? -1 : 1;
        return keyA < keyB ? -1 : 1;
    }).map(function(_a) {
        var _b = (0, _tslib.__read)(_a, 2), key = _b[0], val = _b[1];
        return escapeUri(key) + "=" + escapeUri(val);
    }).join("&");
};
var escapeUri = function(uri) {
    return encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode);
};
var hexEncode = function(c) {
    return "%" + c.charCodeAt(0).toString(16).toUpperCase();
};

},{"tslib":"iyInc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aqEwk":[function(require,module,exports) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Returns a canonical uri.
 *
 * @param pathname `pathname` from request url.
 * @returns URI-encoded version of the absolute path component URL (everything between the host and the question mark
 * character (?) that starts the query string parameters). If the absolute path is empty, a forward slash character (/).
 *
 * @internal
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getCanonicalUri", ()=>getCanonicalUri);
var getCanonicalUri = function(pathname) {
    return pathname ? encodeURIComponent(pathname).replace(/%2F/g, "/") : "/";
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9UOZQ":[function(require,module,exports) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getHashedPayload", ()=>getHashedPayload);
var _constants = require("../constants");
var _dataHashHelpers = require("./dataHashHelpers");
var getHashedPayload = function(body) {
    // return precalculated empty hash if body is undefined or null
    if (body == null) return 0, _constants.EMPTY_HASH;
    if (isSourceData(body)) {
        var hashedData = (0, _dataHashHelpers.getHashedDataAsHex)(null, body);
        return hashedData;
    }
    // Defined body is not signable. Return unsigned payload which may or may not be accepted by the service.
    return 0, _constants.UNSIGNED_PAYLOAD;
};
var isSourceData = function(body) {
    return typeof body === "string" || ArrayBuffer.isView(body) || isArrayBuffer(body);
};
var isArrayBuffer = function(arg) {
    return typeof ArrayBuffer === "function" && arg instanceof ArrayBuffer || Object.prototype.toString.call(arg) === "[object ArrayBuffer]";
};

},{"../constants":"86NQs","./dataHashHelpers":"eJ94r","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fpKJs":[function(require,module,exports) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getSigningKey", ()=>getSigningKey);
var _constants = require("../constants");
var _dataHashHelpers = require("./dataHashHelpers");
var getSigningKey = function(secretAccessKey, date, region, service) {
    var key = "" + (0, _constants.SIGNATURE_IDENTIFIER) + secretAccessKey;
    var dateKey = (0, _dataHashHelpers.getHashedData)(key, date);
    var regionKey = (0, _dataHashHelpers.getHashedData)(dateKey, region);
    var serviceKey = (0, _dataHashHelpers.getHashedData)(regionKey, service);
    var signingKey = (0, _dataHashHelpers.getHashedData)(serviceKey, (0, _constants.KEY_TYPE_IDENTIFIER));
    return signingKey;
};

},{"../constants":"86NQs","./dataHashHelpers":"eJ94r","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kRe8Y":[function(require,module,exports) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getStringToSign", ()=>getStringToSign);
var _constants = require("../constants");
var getStringToSign = function(date, credentialScope, hashedRequest) {
    return [
        (0, _constants.SHA256_ALGORITHM_IDENTIFIER),
        date,
        credentialScope,
        hashedRequest
    ].join("\n");
};

},{"../constants":"86NQs","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1xanJ":[function(require,module,exports) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "presignUrl", ()=>presignUrl);
var _tslib = require("tslib");
var _constants = require("./constants");
var _getSigningValues = require("./utils/getSigningValues");
var _getSignature = require("./utils/getSignature");
var presignUrl = function(_a, _b) {
    var _c, _d, _e, _f;
    var body = _a.body, _g = _a.method, method = _g === void 0 ? "GET" : _g, url = _a.url;
    var expiration = _b.expiration, options = (0, _tslib.__rest)(_b, [
        "expiration"
    ]);
    var signingValues = (0, _getSigningValues.getSigningValues)(options);
    var accessKeyId = signingValues.accessKeyId, credentialScope = signingValues.credentialScope, longDate = signingValues.longDate, sessionToken = signingValues.sessionToken;
    // create the request to sign
    // @ts-ignore URL constructor accepts a URL object
    var presignedUrl = new URL(url);
    Object.entries((0, _tslib.__assign)((0, _tslib.__assign)((_c = {}, _c[0, _constants.ALGORITHM_QUERY_PARAM] = (0, _constants.SHA256_ALGORITHM_IDENTIFIER), _c[0, _constants.CREDENTIAL_QUERY_PARAM] = accessKeyId + "/" + credentialScope, _c[0, _constants.AMZ_DATE_QUERY_PARAM] = longDate, _c[0, _constants.SIGNED_HEADERS_QUERY_PARAM] = (0, _constants.HOST_HEADER), _c), expiration && (_d = {}, _d[0, _constants.EXPIRES_QUERY_PARAM] = expiration.toString(), _d)), sessionToken && (_e = {}, _e[0, _constants.TOKEN_QUERY_PARAM] = sessionToken, _e))).forEach(function(_a) {
        var _b = (0, _tslib.__read)(_a, 2), key = _b[0], value = _b[1];
        presignedUrl.searchParams.append(key, value);
    });
    var requestToSign = {
        body: body,
        headers: (_f = {}, _f[0, _constants.HOST_HEADER] = url.host, _f),
        method: method,
        url: presignedUrl
    };
    // calculate and add the signature to the url
    var signature = (0, _getSignature.getSignature)(requestToSign, signingValues);
    presignedUrl.searchParams.append((0, _constants.SIGNATURE_QUERY_PARAM), signature);
    return presignedUrl;
};

},{"tslib":"iyInc","./constants":"86NQs","./utils/getSigningValues":"7Pp3N","./utils/getSignature":"kB6oe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gsLRZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "parseAWSExports", ()=>parseAWSExports);
var _tslib = require("tslib");
var _logger = require("./Logger");
var logger = new (0, _logger.ConsoleLogger)("Parser");
var parseAWSExports = function(config) {
    var amplifyConfig = {};
    // Analytics
    if (config["aws_mobile_analytics_app_id"]) {
        var Analytics = {
            AWSPinpoint: {
                appId: config["aws_mobile_analytics_app_id"],
                region: config["aws_mobile_analytics_app_region"]
            }
        };
        amplifyConfig.Analytics = Analytics;
    }
    // Auth
    if (config["aws_cognito_identity_pool_id"] || config["aws_user_pools_id"]) amplifyConfig.Auth = {
        userPoolId: config["aws_user_pools_id"],
        userPoolWebClientId: config["aws_user_pools_web_client_id"],
        region: config["aws_cognito_region"],
        identityPoolId: config["aws_cognito_identity_pool_id"],
        identityPoolRegion: config["aws_cognito_region"],
        mandatorySignIn: config["aws_mandatory_sign_in"] === "enable",
        signUpVerificationMethod: config["aws_cognito_sign_up_verification_method"] || "code"
    };
    // Storage
    var storageConfig;
    if (config["aws_user_files_s3_bucket"]) storageConfig = {
        AWSS3: {
            bucket: config["aws_user_files_s3_bucket"],
            region: config["aws_user_files_s3_bucket_region"],
            dangerouslyConnectToHttpEndpointForTesting: config["aws_user_files_s3_dangerously_connect_to_http_endpoint_for_testing"]
        }
    };
    else storageConfig = config ? config.Storage || config : {};
    // Logging
    if (config["Logging"]) amplifyConfig.Logging = (0, _tslib.__assign)((0, _tslib.__assign)({}, config["Logging"]), {
        region: config["aws_project_region"]
    });
    // Geo
    if (config["geo"]) {
        amplifyConfig.Geo = Object.assign({}, config.geo);
        if (config.geo["amazon_location_service"]) amplifyConfig.Geo = {
            AmazonLocationService: config.geo["amazon_location_service"]
        };
    }
    amplifyConfig.Analytics = Object.assign({}, amplifyConfig.Analytics, config.Analytics);
    amplifyConfig.Auth = Object.assign({}, amplifyConfig.Auth, config.Auth);
    amplifyConfig.Storage = Object.assign({}, storageConfig);
    amplifyConfig.Logging = Object.assign({}, amplifyConfig.Logging, config.Logging);
    logger.debug("parse config", config, "to amplifyconfig", amplifyConfig);
    return amplifyConfig;
};

},{"tslib":"iyInc","./Logger":"aOIPE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8NxfE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AWSCloudWatchProvider", ()=>(0, _awscloudWatchProvider.AWSCloudWatchProvider));
var _awscloudWatchProvider = require("./AWSCloudWatchProvider");

},{"./AWSCloudWatchProvider":"8mv4U","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8mv4U":[function(require,module,exports) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AWSCloudWatchProvider", ()=>AWSCloudWatchProvider);
var _tslib = require("tslib");
var _clientCloudwatchLogs = require("@aws-sdk/client-cloudwatch-logs");
var _ = require("../..");
var _logger = require("../Logger");
var _platform = require("../Platform");
var _parseAWSExports = require("../parseAWSExports");
var _constants = require("../Util/Constants");
var logger = new (0, _logger.ConsoleLogger)("AWSCloudWatch");
var AWSCloudWatchProvider = /** @class */ function() {
    function AWSCloudWatchProvider(config) {
        this.configure(config);
        this._dataTracker = {
            eventUploadInProgress: false,
            logEvents: []
        };
        this._currentLogBatch = [];
        this._initiateLogPushInterval();
    }
    AWSCloudWatchProvider.prototype.getProviderName = function() {
        return AWSCloudWatchProvider.PROVIDER_NAME;
    };
    AWSCloudWatchProvider.prototype.getCategoryName = function() {
        return AWSCloudWatchProvider.CATEGORY;
    };
    AWSCloudWatchProvider.prototype.getLogQueue = function() {
        return this._dataTracker.logEvents;
    };
    AWSCloudWatchProvider.prototype.configure = function(config) {
        if (!config) return this._config || {};
        var conf = Object.assign({}, this._config, (0, _parseAWSExports.parseAWSExports)(config).Logging, config);
        this._config = conf;
        return this._config;
    };
    AWSCloudWatchProvider.prototype.createLogGroup = function(params) {
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            var cmd, credentialsOK, client, output, error_1;
            return (0, _tslib.__generator)(this, function(_a) {
                switch(_a.label){
                    case 0:
                        logger.debug("creating new log group in CloudWatch - ", params.logGroupName);
                        cmd = new (0, _clientCloudwatchLogs.CreateLogGroupCommand)(params);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([
                            1,
                            4,
                            ,
                            5
                        ]);
                        return [
                            4 /*yield*/ ,
                            this._ensureCredentials()
                        ];
                    case 2:
                        credentialsOK = _a.sent();
                        if (!credentialsOK) throw new Error((0, _constants.NO_CREDS_ERROR_STRING));
                        client = this._initCloudWatchLogs();
                        return [
                            4 /*yield*/ ,
                            client.send(cmd)
                        ];
                    case 3:
                        output = _a.sent();
                        return [
                            2 /*return*/ ,
                            output
                        ];
                    case 4:
                        error_1 = _a.sent();
                        logger.error("error creating log group - " + error_1);
                        throw error_1;
                    case 5:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    AWSCloudWatchProvider.prototype.getLogGroups = function(params) {
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            var cmd, credentialsOK, client, output, error_2;
            return (0, _tslib.__generator)(this, function(_a) {
                switch(_a.label){
                    case 0:
                        logger.debug("getting list of log groups");
                        cmd = new (0, _clientCloudwatchLogs.DescribeLogGroupsCommand)(params);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([
                            1,
                            4,
                            ,
                            5
                        ]);
                        return [
                            4 /*yield*/ ,
                            this._ensureCredentials()
                        ];
                    case 2:
                        credentialsOK = _a.sent();
                        if (!credentialsOK) throw new Error((0, _constants.NO_CREDS_ERROR_STRING));
                        client = this._initCloudWatchLogs();
                        return [
                            4 /*yield*/ ,
                            client.send(cmd)
                        ];
                    case 3:
                        output = _a.sent();
                        return [
                            2 /*return*/ ,
                            output
                        ];
                    case 4:
                        error_2 = _a.sent();
                        logger.error("error getting log group - " + error_2);
                        throw error_2;
                    case 5:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    AWSCloudWatchProvider.prototype.createLogStream = function(params) {
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            var cmd, credentialsOK, client, output, error_3;
            return (0, _tslib.__generator)(this, function(_a) {
                switch(_a.label){
                    case 0:
                        logger.debug("creating new log stream in CloudWatch - ", params.logStreamName);
                        cmd = new (0, _clientCloudwatchLogs.CreateLogStreamCommand)(params);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([
                            1,
                            4,
                            ,
                            5
                        ]);
                        return [
                            4 /*yield*/ ,
                            this._ensureCredentials()
                        ];
                    case 2:
                        credentialsOK = _a.sent();
                        if (!credentialsOK) throw new Error((0, _constants.NO_CREDS_ERROR_STRING));
                        client = this._initCloudWatchLogs();
                        return [
                            4 /*yield*/ ,
                            client.send(cmd)
                        ];
                    case 3:
                        output = _a.sent();
                        return [
                            2 /*return*/ ,
                            output
                        ];
                    case 4:
                        error_3 = _a.sent();
                        logger.error("error creating log stream - " + error_3);
                        throw error_3;
                    case 5:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    AWSCloudWatchProvider.prototype.getLogStreams = function(params) {
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            var cmd, credentialsOK, client, output, error_4;
            return (0, _tslib.__generator)(this, function(_a) {
                switch(_a.label){
                    case 0:
                        logger.debug("getting list of log streams");
                        cmd = new (0, _clientCloudwatchLogs.DescribeLogStreamsCommand)(params);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([
                            1,
                            4,
                            ,
                            5
                        ]);
                        return [
                            4 /*yield*/ ,
                            this._ensureCredentials()
                        ];
                    case 2:
                        credentialsOK = _a.sent();
                        if (!credentialsOK) throw new Error((0, _constants.NO_CREDS_ERROR_STRING));
                        client = this._initCloudWatchLogs();
                        return [
                            4 /*yield*/ ,
                            client.send(cmd)
                        ];
                    case 3:
                        output = _a.sent();
                        return [
                            2 /*return*/ ,
                            output
                        ];
                    case 4:
                        error_4 = _a.sent();
                        logger.error("error getting log stream - " + error_4);
                        throw error_4;
                    case 5:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    AWSCloudWatchProvider.prototype.getLogEvents = function(params) {
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            var cmd, credentialsOK, client, output, error_5;
            return (0, _tslib.__generator)(this, function(_a) {
                switch(_a.label){
                    case 0:
                        logger.debug("getting log events from stream - ", params.logStreamName);
                        cmd = new (0, _clientCloudwatchLogs.GetLogEventsCommand)(params);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([
                            1,
                            4,
                            ,
                            5
                        ]);
                        return [
                            4 /*yield*/ ,
                            this._ensureCredentials()
                        ];
                    case 2:
                        credentialsOK = _a.sent();
                        if (!credentialsOK) throw new Error((0, _constants.NO_CREDS_ERROR_STRING));
                        client = this._initCloudWatchLogs();
                        return [
                            4 /*yield*/ ,
                            client.send(cmd)
                        ];
                    case 3:
                        output = _a.sent();
                        return [
                            2 /*return*/ ,
                            output
                        ];
                    case 4:
                        error_5 = _a.sent();
                        logger.error("error getting log events - " + error_5);
                        throw error_5;
                    case 5:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    AWSCloudWatchProvider.prototype.pushLogs = function(logs) {
        logger.debug("pushing log events to Cloudwatch...");
        this._dataTracker.logEvents = (0, _tslib.__spread)(this._dataTracker.logEvents, logs);
    };
    AWSCloudWatchProvider.prototype._validateLogGroupExistsAndCreate = function(logGroupName) {
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            var credentialsOK, currGroups, foundGroups, err_1, errString;
            return (0, _tslib.__generator)(this, function(_a) {
                switch(_a.label){
                    case 0:
                        if (this._dataTracker.verifiedLogGroup) return [
                            2 /*return*/ ,
                            this._dataTracker.verifiedLogGroup
                        ];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([
                            1,
                            5,
                            ,
                            6
                        ]);
                        return [
                            4 /*yield*/ ,
                            this._ensureCredentials()
                        ];
                    case 2:
                        credentialsOK = _a.sent();
                        if (!credentialsOK) throw new Error((0, _constants.NO_CREDS_ERROR_STRING));
                        return [
                            4 /*yield*/ ,
                            this.getLogGroups({
                                logGroupNamePrefix: logGroupName
                            })
                        ];
                    case 3:
                        currGroups = _a.sent();
                        if (!(typeof currGroups === "string") && currGroups.logGroups) {
                            foundGroups = currGroups.logGroups.filter(function(group) {
                                return group.logGroupName === logGroupName;
                            });
                            if (foundGroups.length > 0) {
                                this._dataTracker.verifiedLogGroup = foundGroups[0];
                                return [
                                    2 /*return*/ ,
                                    foundGroups[0]
                                ];
                            }
                        }
                        /**
                         * If we get to this point, it means that the specified log group does not exist
                         * and we should create it.
                         */ return [
                            4 /*yield*/ ,
                            this.createLogGroup({
                                logGroupName: logGroupName
                            })
                        ];
                    case 4:
                        /**
                         * If we get to this point, it means that the specified log group does not exist
                         * and we should create it.
                         */ _a.sent();
                        return [
                            2 /*return*/ ,
                            null
                        ];
                    case 5:
                        err_1 = _a.sent();
                        errString = "failure during log group search: " + err_1;
                        logger.error(errString);
                        throw err_1;
                    case 6:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    AWSCloudWatchProvider.prototype._validateLogStreamExists = function(logGroupName, logStreamName) {
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            var credentialsOK, currStreams, foundStreams, err_2, errString;
            return (0, _tslib.__generator)(this, function(_a) {
                switch(_a.label){
                    case 0:
                        _a.trys.push([
                            0,
                            4,
                            ,
                            5
                        ]);
                        return [
                            4 /*yield*/ ,
                            this._ensureCredentials()
                        ];
                    case 1:
                        credentialsOK = _a.sent();
                        if (!credentialsOK) throw new Error((0, _constants.NO_CREDS_ERROR_STRING));
                        return [
                            4 /*yield*/ ,
                            this.getLogStreams({
                                logGroupName: logGroupName,
                                logStreamNamePrefix: logStreamName
                            })
                        ];
                    case 2:
                        currStreams = _a.sent();
                        if (currStreams.logStreams) {
                            foundStreams = currStreams.logStreams.filter(function(stream) {
                                return stream.logStreamName === logStreamName;
                            });
                            if (foundStreams.length > 0) {
                                this._nextSequenceToken = foundStreams[0].uploadSequenceToken;
                                return [
                                    2 /*return*/ ,
                                    foundStreams[0]
                                ];
                            }
                        }
                        /**
                         * If we get to this point, it means that the specified stream does not
                         * exist, and we should create it now.
                         */ return [
                            4 /*yield*/ ,
                            this.createLogStream({
                                logGroupName: logGroupName,
                                logStreamName: logStreamName
                            })
                        ];
                    case 3:
                        /**
                         * If we get to this point, it means that the specified stream does not
                         * exist, and we should create it now.
                         */ _a.sent();
                        return [
                            2 /*return*/ ,
                            null
                        ];
                    case 4:
                        err_2 = _a.sent();
                        errString = "failure during log stream search: " + err_2;
                        logger.error(errString);
                        throw err_2;
                    case 5:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    AWSCloudWatchProvider.prototype._sendLogEvents = function(params) {
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            var credentialsOK, cmd, client, output, err_3, errString;
            return (0, _tslib.__generator)(this, function(_a) {
                switch(_a.label){
                    case 0:
                        _a.trys.push([
                            0,
                            3,
                            ,
                            4
                        ]);
                        return [
                            4 /*yield*/ ,
                            this._ensureCredentials()
                        ];
                    case 1:
                        credentialsOK = _a.sent();
                        if (!credentialsOK) throw new Error((0, _constants.NO_CREDS_ERROR_STRING));
                        logger.debug("sending log events to stream - ", params.logStreamName);
                        cmd = new (0, _clientCloudwatchLogs.PutLogEventsCommand)(params);
                        client = this._initCloudWatchLogs();
                        return [
                            4 /*yield*/ ,
                            client.send(cmd)
                        ];
                    case 2:
                        output = _a.sent();
                        return [
                            2 /*return*/ ,
                            output
                        ];
                    case 3:
                        err_3 = _a.sent();
                        errString = "failure during log push: " + err_3;
                        logger.error(errString);
                        return [
                            3 /*break*/ ,
                            4
                        ];
                    case 4:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    AWSCloudWatchProvider.prototype._initCloudWatchLogs = function() {
        return new (0, _clientCloudwatchLogs.CloudWatchLogsClient)({
            region: this._config.region,
            credentials: this._config.credentials,
            customUserAgent: (0, _platform.getAmplifyUserAgent)(),
            endpoint: this._config.endpoint
        });
    };
    AWSCloudWatchProvider.prototype._ensureCredentials = function() {
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            var _this = this;
            return (0, _tslib.__generator)(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            (0, _.Credentials).get().then(function(credentials) {
                                if (!credentials) return false;
                                var cred = (0, _.Credentials).shear(credentials);
                                logger.debug("set credentials for logging", cred);
                                _this._config.credentials = cred;
                                return true;
                            }).catch(function(error) {
                                logger.warn("ensure credentials error", error);
                                return false;
                            })
                        ];
                    case 1:
                        return [
                            2 /*return*/ ,
                            _a.sent()
                        ];
                }
            });
        });
    };
    AWSCloudWatchProvider.prototype._getNextSequenceToken = function() {
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            var logStream, err_4;
            return (0, _tslib.__generator)(this, function(_a) {
                switch(_a.label){
                    case 0:
                        if (this._nextSequenceToken && this._nextSequenceToken.length > 0) return [
                            2 /*return*/ ,
                            this._nextSequenceToken
                        ];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([
                            1,
                            4,
                            ,
                            5
                        ]);
                        return [
                            4 /*yield*/ ,
                            this._validateLogGroupExistsAndCreate(this._config.logGroupName)
                        ];
                    case 2:
                        _a.sent();
                        this._nextSequenceToken = undefined;
                        return [
                            4 /*yield*/ ,
                            this._validateLogStreamExists(this._config.logGroupName, this._config.logStreamName)
                        ];
                    case 3:
                        logStream = _a.sent();
                        if (logStream) this._nextSequenceToken = logStream.uploadSequenceToken;
                        return [
                            2 /*return*/ ,
                            this._nextSequenceToken
                        ];
                    case 4:
                        err_4 = _a.sent();
                        logger.error("failure while getting next sequence token: " + err_4);
                        throw err_4;
                    case 5:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    AWSCloudWatchProvider.prototype._safeUploadLogEvents = function() {
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            var seqToken, logBatch, putLogsPayload, sendLogEventsResponse, err_5;
            return (0, _tslib.__generator)(this, function(_a) {
                switch(_a.label){
                    case 0:
                        _a.trys.push([
                            0,
                            3,
                            ,
                            4
                        ]);
                        return [
                            4 /*yield*/ ,
                            this._getNextSequenceToken()
                        ];
                    case 1:
                        seqToken = _a.sent();
                        logBatch = this._currentLogBatch.length === 0 ? this._getBufferedBatchOfLogs() : this._currentLogBatch;
                        putLogsPayload = {
                            logGroupName: this._config.logGroupName,
                            logStreamName: this._config.logStreamName,
                            logEvents: logBatch,
                            sequenceToken: seqToken
                        };
                        this._dataTracker.eventUploadInProgress = true;
                        return [
                            4 /*yield*/ ,
                            this._sendLogEvents(putLogsPayload)
                        ];
                    case 2:
                        sendLogEventsResponse = _a.sent();
                        this._nextSequenceToken = sendLogEventsResponse.nextSequenceToken;
                        this._dataTracker.eventUploadInProgress = false;
                        this._currentLogBatch = [];
                        return [
                            2 /*return*/ ,
                            sendLogEventsResponse
                        ];
                    case 3:
                        err_5 = _a.sent();
                        logger.error("error during _safeUploadLogEvents: " + err_5);
                        if ((0, _constants.RETRY_ERROR_CODES).includes(err_5.name)) this._getNewSequenceTokenAndSubmit({
                            logEvents: this._currentLogBatch,
                            logGroupName: this._config.logGroupName,
                            logStreamName: this._config.logStreamName
                        });
                        else {
                            this._dataTracker.eventUploadInProgress = false;
                            throw err_5;
                        }
                        return [
                            3 /*break*/ ,
                            4
                        ];
                    case 4:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    AWSCloudWatchProvider.prototype._getBufferedBatchOfLogs = function() {
        /**
         * CloudWatch has restrictions on the size of the log events that get sent up.
         * We need to track both the size of each event and the total size of the batch
         * of logs.
         *
         * We also need to ensure that the logs in the batch are sorted in chronological order.
         * https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutLogEvents.html
         */ var currentEventIdx = 0;
        var totalByteSize = 0;
        while(currentEventIdx < this._dataTracker.logEvents.length){
            var currentEvent = this._dataTracker.logEvents[currentEventIdx];
            var eventSize = currentEvent ? new TextEncoder().encode(currentEvent.message).length + (0, _constants.AWS_CLOUDWATCH_BASE_BUFFER_SIZE) : 0;
            if (eventSize > (0, _constants.AWS_CLOUDWATCH_MAX_EVENT_SIZE)) {
                var errString = "Log entry exceeds maximum size for CloudWatch logs. Log size: " + eventSize + ". Truncating log message.";
                logger.warn(errString);
                currentEvent.message = currentEvent.message.substring(0, eventSize);
            }
            if (totalByteSize + eventSize > (0, _constants.AWS_CLOUDWATCH_MAX_BATCH_EVENT_SIZE)) break;
            totalByteSize += eventSize;
            currentEventIdx++;
        }
        this._currentLogBatch = this._dataTracker.logEvents.splice(0, currentEventIdx);
        return this._currentLogBatch;
    };
    AWSCloudWatchProvider.prototype._getNewSequenceTokenAndSubmit = function(payload) {
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            var seqToken, sendLogEventsRepsonse, err_6;
            return (0, _tslib.__generator)(this, function(_a) {
                switch(_a.label){
                    case 0:
                        _a.trys.push([
                            0,
                            3,
                            ,
                            4
                        ]);
                        this._nextSequenceToken = undefined;
                        this._dataTracker.eventUploadInProgress = true;
                        return [
                            4 /*yield*/ ,
                            this._getNextSequenceToken()
                        ];
                    case 1:
                        seqToken = _a.sent();
                        payload.sequenceToken = seqToken;
                        return [
                            4 /*yield*/ ,
                            this._sendLogEvents(payload)
                        ];
                    case 2:
                        sendLogEventsRepsonse = _a.sent();
                        this._dataTracker.eventUploadInProgress = false;
                        this._currentLogBatch = [];
                        return [
                            2 /*return*/ ,
                            sendLogEventsRepsonse
                        ];
                    case 3:
                        err_6 = _a.sent();
                        logger.error("error when retrying log submission with new sequence token: " + err_6);
                        this._dataTracker.eventUploadInProgress = false;
                        throw err_6;
                    case 4:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    AWSCloudWatchProvider.prototype._initiateLogPushInterval = function() {
        var _this = this;
        if (this._timer) clearInterval(this._timer);
        this._timer = setInterval(function() {
            return (0, _tslib.__awaiter)(_this, void 0, void 0, function() {
                var err_7;
                return (0, _tslib.__generator)(this, function(_a) {
                    switch(_a.label){
                        case 0:
                            _a.trys.push([
                                0,
                                3,
                                ,
                                4
                            ]);
                            if (!this._getDocUploadPermissibility()) return [
                                3 /*break*/ ,
                                2
                            ];
                            return [
                                4 /*yield*/ ,
                                this._safeUploadLogEvents()
                            ];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2:
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case 3:
                            err_7 = _a.sent();
                            logger.error("error when calling _safeUploadLogEvents in the timer interval - " + err_7);
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case 4:
                            return [
                                2 /*return*/ 
                            ];
                    }
                });
            });
        }, 2000);
    };
    AWSCloudWatchProvider.prototype._getDocUploadPermissibility = function() {
        return (this._dataTracker.logEvents.length !== 0 || this._currentLogBatch.length !== 0) && !this._dataTracker.eventUploadInProgress;
    };
    AWSCloudWatchProvider.PROVIDER_NAME = (0, _constants.AWS_CLOUDWATCH_PROVIDER_NAME);
    AWSCloudWatchProvider.CATEGORY = (0, _constants.AWS_CLOUDWATCH_CATEGORY);
    return AWSCloudWatchProvider;
}();

},{"tslib":"iyInc","@aws-sdk/client-cloudwatch-logs":"bMS92","../..":"hZcAF","../Logger":"aOIPE","../Platform":"2ZOrj","../parseAWSExports":"gsLRZ","../Util/Constants":"ey6Nm","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bMS92":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _cloudWatchLogsClient = require("./CloudWatchLogsClient");
parcelHelpers.exportAll(_cloudWatchLogsClient, exports);
var _cloudWatchLogs = require("./CloudWatchLogs");
parcelHelpers.exportAll(_cloudWatchLogs, exports);
var _associateKmsKeyCommand = require("./commands/AssociateKmsKeyCommand");
parcelHelpers.exportAll(_associateKmsKeyCommand, exports);
var _cancelExportTaskCommand = require("./commands/CancelExportTaskCommand");
parcelHelpers.exportAll(_cancelExportTaskCommand, exports);
var _createExportTaskCommand = require("./commands/CreateExportTaskCommand");
parcelHelpers.exportAll(_createExportTaskCommand, exports);
var _createLogGroupCommand = require("./commands/CreateLogGroupCommand");
parcelHelpers.exportAll(_createLogGroupCommand, exports);
var _createLogStreamCommand = require("./commands/CreateLogStreamCommand");
parcelHelpers.exportAll(_createLogStreamCommand, exports);
var _deleteDestinationCommand = require("./commands/DeleteDestinationCommand");
parcelHelpers.exportAll(_deleteDestinationCommand, exports);
var _deleteLogGroupCommand = require("./commands/DeleteLogGroupCommand");
parcelHelpers.exportAll(_deleteLogGroupCommand, exports);
var _deleteLogStreamCommand = require("./commands/DeleteLogStreamCommand");
parcelHelpers.exportAll(_deleteLogStreamCommand, exports);
var _deleteMetricFilterCommand = require("./commands/DeleteMetricFilterCommand");
parcelHelpers.exportAll(_deleteMetricFilterCommand, exports);
var _deleteQueryDefinitionCommand = require("./commands/DeleteQueryDefinitionCommand");
parcelHelpers.exportAll(_deleteQueryDefinitionCommand, exports);
var _deleteResourcePolicyCommand = require("./commands/DeleteResourcePolicyCommand");
parcelHelpers.exportAll(_deleteResourcePolicyCommand, exports);
var _deleteRetentionPolicyCommand = require("./commands/DeleteRetentionPolicyCommand");
parcelHelpers.exportAll(_deleteRetentionPolicyCommand, exports);
var _deleteSubscriptionFilterCommand = require("./commands/DeleteSubscriptionFilterCommand");
parcelHelpers.exportAll(_deleteSubscriptionFilterCommand, exports);
var _describeDestinationsCommand = require("./commands/DescribeDestinationsCommand");
parcelHelpers.exportAll(_describeDestinationsCommand, exports);
var _describeDestinationsPaginator = require("./pagination/DescribeDestinationsPaginator");
parcelHelpers.exportAll(_describeDestinationsPaginator, exports);
var _describeExportTasksCommand = require("./commands/DescribeExportTasksCommand");
parcelHelpers.exportAll(_describeExportTasksCommand, exports);
var _describeLogGroupsCommand = require("./commands/DescribeLogGroupsCommand");
parcelHelpers.exportAll(_describeLogGroupsCommand, exports);
var _describeLogGroupsPaginator = require("./pagination/DescribeLogGroupsPaginator");
parcelHelpers.exportAll(_describeLogGroupsPaginator, exports);
var _describeLogStreamsCommand = require("./commands/DescribeLogStreamsCommand");
parcelHelpers.exportAll(_describeLogStreamsCommand, exports);
var _describeLogStreamsPaginator = require("./pagination/DescribeLogStreamsPaginator");
parcelHelpers.exportAll(_describeLogStreamsPaginator, exports);
var _describeMetricFiltersCommand = require("./commands/DescribeMetricFiltersCommand");
parcelHelpers.exportAll(_describeMetricFiltersCommand, exports);
var _describeMetricFiltersPaginator = require("./pagination/DescribeMetricFiltersPaginator");
parcelHelpers.exportAll(_describeMetricFiltersPaginator, exports);
var _describeQueriesCommand = require("./commands/DescribeQueriesCommand");
parcelHelpers.exportAll(_describeQueriesCommand, exports);
var _describeQueryDefinitionsCommand = require("./commands/DescribeQueryDefinitionsCommand");
parcelHelpers.exportAll(_describeQueryDefinitionsCommand, exports);
var _describeResourcePoliciesCommand = require("./commands/DescribeResourcePoliciesCommand");
parcelHelpers.exportAll(_describeResourcePoliciesCommand, exports);
var _describeSubscriptionFiltersCommand = require("./commands/DescribeSubscriptionFiltersCommand");
parcelHelpers.exportAll(_describeSubscriptionFiltersCommand, exports);
var _describeSubscriptionFiltersPaginator = require("./pagination/DescribeSubscriptionFiltersPaginator");
parcelHelpers.exportAll(_describeSubscriptionFiltersPaginator, exports);
var _disassociateKmsKeyCommand = require("./commands/DisassociateKmsKeyCommand");
parcelHelpers.exportAll(_disassociateKmsKeyCommand, exports);
var _filterLogEventsCommand = require("./commands/FilterLogEventsCommand");
parcelHelpers.exportAll(_filterLogEventsCommand, exports);
var _filterLogEventsPaginator = require("./pagination/FilterLogEventsPaginator");
parcelHelpers.exportAll(_filterLogEventsPaginator, exports);
var _getLogEventsCommand = require("./commands/GetLogEventsCommand");
parcelHelpers.exportAll(_getLogEventsCommand, exports);
var _getLogEventsPaginator = require("./pagination/GetLogEventsPaginator");
parcelHelpers.exportAll(_getLogEventsPaginator, exports);
var _getLogGroupFieldsCommand = require("./commands/GetLogGroupFieldsCommand");
parcelHelpers.exportAll(_getLogGroupFieldsCommand, exports);
var _getLogRecordCommand = require("./commands/GetLogRecordCommand");
parcelHelpers.exportAll(_getLogRecordCommand, exports);
var _getQueryResultsCommand = require("./commands/GetQueryResultsCommand");
parcelHelpers.exportAll(_getQueryResultsCommand, exports);
var _listTagsLogGroupCommand = require("./commands/ListTagsLogGroupCommand");
parcelHelpers.exportAll(_listTagsLogGroupCommand, exports);
var _putDestinationCommand = require("./commands/PutDestinationCommand");
parcelHelpers.exportAll(_putDestinationCommand, exports);
var _putDestinationPolicyCommand = require("./commands/PutDestinationPolicyCommand");
parcelHelpers.exportAll(_putDestinationPolicyCommand, exports);
var _putLogEventsCommand = require("./commands/PutLogEventsCommand");
parcelHelpers.exportAll(_putLogEventsCommand, exports);
var _putMetricFilterCommand = require("./commands/PutMetricFilterCommand");
parcelHelpers.exportAll(_putMetricFilterCommand, exports);
var _putQueryDefinitionCommand = require("./commands/PutQueryDefinitionCommand");
parcelHelpers.exportAll(_putQueryDefinitionCommand, exports);
var _putResourcePolicyCommand = require("./commands/PutResourcePolicyCommand");
parcelHelpers.exportAll(_putResourcePolicyCommand, exports);
var _putRetentionPolicyCommand = require("./commands/PutRetentionPolicyCommand");
parcelHelpers.exportAll(_putRetentionPolicyCommand, exports);
var _putSubscriptionFilterCommand = require("./commands/PutSubscriptionFilterCommand");
parcelHelpers.exportAll(_putSubscriptionFilterCommand, exports);
var _startQueryCommand = require("./commands/StartQueryCommand");
parcelHelpers.exportAll(_startQueryCommand, exports);
var _stopQueryCommand = require("./commands/StopQueryCommand");
parcelHelpers.exportAll(_stopQueryCommand, exports);
var _tagLogGroupCommand = require("./commands/TagLogGroupCommand");
parcelHelpers.exportAll(_tagLogGroupCommand, exports);
var _testMetricFilterCommand = require("./commands/TestMetricFilterCommand");
parcelHelpers.exportAll(_testMetricFilterCommand, exports);
var _untagLogGroupCommand = require("./commands/UntagLogGroupCommand");
parcelHelpers.exportAll(_untagLogGroupCommand, exports);
var _interfaces = require("./pagination/Interfaces");
parcelHelpers.exportAll(_interfaces, exports);
var _index = require("./models/index");
parcelHelpers.exportAll(_index, exports);

},{"./CloudWatchLogsClient":"d0U1q","./CloudWatchLogs":"cun4t","./commands/AssociateKmsKeyCommand":"k4WZy","./commands/CancelExportTaskCommand":"lGPz5","./commands/CreateExportTaskCommand":"cHZt6","./commands/CreateLogGroupCommand":"cZDs8","./commands/CreateLogStreamCommand":"kESLR","./commands/DeleteDestinationCommand":"eGnLp","./commands/DeleteLogGroupCommand":"k4NJk","./commands/DeleteLogStreamCommand":"b7ePR","./commands/DeleteMetricFilterCommand":"iuN0L","./commands/DeleteQueryDefinitionCommand":"l7G67","./commands/DeleteResourcePolicyCommand":"3bkx1","./commands/DeleteRetentionPolicyCommand":"ykCfV","./commands/DeleteSubscriptionFilterCommand":"2mBar","./commands/DescribeDestinationsCommand":"gW1q6","./pagination/DescribeDestinationsPaginator":"8cnzC","./commands/DescribeExportTasksCommand":"gyEdP","./commands/DescribeLogGroupsCommand":"eP5yc","./pagination/DescribeLogGroupsPaginator":"8qj6M","./commands/DescribeLogStreamsCommand":"a3nMC","./pagination/DescribeLogStreamsPaginator":"aqA7i","./commands/DescribeMetricFiltersCommand":"6Xo3P","./pagination/DescribeMetricFiltersPaginator":"aQqVB","./commands/DescribeQueriesCommand":"4jf0G","./commands/DescribeQueryDefinitionsCommand":"lWsi5","./commands/DescribeResourcePoliciesCommand":"adBnC","./commands/DescribeSubscriptionFiltersCommand":"bj8Le","./pagination/DescribeSubscriptionFiltersPaginator":"cwBOI","./commands/DisassociateKmsKeyCommand":"f4qhL","./commands/FilterLogEventsCommand":"eVZ5x","./pagination/FilterLogEventsPaginator":"eag8l","./commands/GetLogEventsCommand":"aQs9i","./pagination/GetLogEventsPaginator":"bRKnZ","./commands/GetLogGroupFieldsCommand":"2YmeP","./commands/GetLogRecordCommand":"l1BiR","./commands/GetQueryResultsCommand":"aMyWT","./commands/ListTagsLogGroupCommand":"i6kRK","./commands/PutDestinationCommand":"lkjty","./commands/PutDestinationPolicyCommand":"ad16f","./commands/PutLogEventsCommand":"fjHYs","./commands/PutMetricFilterCommand":"3E6xe","./commands/PutQueryDefinitionCommand":"eCnCq","./commands/PutResourcePolicyCommand":"4oFp5","./commands/PutRetentionPolicyCommand":"hoP3q","./commands/PutSubscriptionFilterCommand":"38fYM","./commands/StartQueryCommand":"fsVSG","./commands/StopQueryCommand":"aodZ0","./commands/TagLogGroupCommand":"43ptU","./commands/TestMetricFilterCommand":"jWtrJ","./commands/UntagLogGroupCommand":"hUuTM","./pagination/Interfaces":"lf3R3","./models/index":"lmkVM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d0U1q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CloudWatchLogsClient", ()=>CloudWatchLogsClient);
var _tslib = require("tslib");
var _runtimeConfig = require("./runtimeConfig");
var _configResolver = require("@aws-sdk/config-resolver");
var _middlewareContentLength = require("@aws-sdk/middleware-content-length");
var _middlewareHostHeader = require("@aws-sdk/middleware-host-header");
var _middlewareLogger = require("@aws-sdk/middleware-logger");
var _middlewareRetry = require("@aws-sdk/middleware-retry");
var _middlewareSigning = require("@aws-sdk/middleware-signing");
var _middlewareUserAgent = require("@aws-sdk/middleware-user-agent");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>You can use Amazon CloudWatch Logs to monitor, store, and access your log files from
 *       EC2 instances, AWS CloudTrail, or other sources. You can then retrieve the associated
 *       log data from CloudWatch Logs using the CloudWatch console, CloudWatch Logs commands in the
 *       AWS CLI, CloudWatch Logs API, or CloudWatch Logs SDK.</p>
 *          <p>You can use CloudWatch Logs to:</p>
 *          <ul>
 *             <li>
 *                <p>
 *                   <b>Monitor logs from EC2 instances in real-time</b>: You
 *           can use CloudWatch Logs to monitor applications and systems using log data. For example,
 *           CloudWatch Logs can track the number of errors that occur in your application logs and
 *           send you a notification whenever the rate of errors exceeds a threshold that you specify.
 *           CloudWatch Logs uses your log data for monitoring so no code changes are required. For
 *           example, you can monitor application logs for specific literal terms (such as
 *           "NullReferenceException") or count the number of occurrences of a literal term at a
 *           particular position in log data (such as "404" status codes in an Apache access log). When
 *           the term you are searching for is found, CloudWatch Logs reports the data to a CloudWatch
 *           metric that you specify.</p>
 *             </li>
 *             <li>
 *                <p>
 *                   <b>Monitor AWS CloudTrail logged events</b>: You can
 *           create alarms in CloudWatch and receive notifications of particular API activity as
 *           captured by CloudTrail. You can use the notification to perform troubleshooting.</p>
 *             </li>
 *             <li>
 *                <p>
 *                   <b>Archive log data</b>: You can use CloudWatch Logs to
 *           store your log data in highly durable storage. You can change the log retention setting so
 *           that any log events older than this setting are automatically deleted. The CloudWatch Logs
 *           agent makes it easy to quickly send both rotated and non-rotated log data off of a host
 *           and into the log service. You can then access the raw log data when you need it.</p>
 *             </li>
 *          </ul>
 */ var CloudWatchLogsClient = /** @class */ function(_super) {
    (0, _tslib.__extends)(CloudWatchLogsClient, _super);
    function CloudWatchLogsClient(configuration) {
        var _this = this;
        var _config_0 = (0, _tslib.__assign)((0, _tslib.__assign)({}, (0, _runtimeConfig.ClientDefaultValues)), configuration);
        var _config_1 = (0, _configResolver.resolveRegionConfig)(_config_0);
        var _config_2 = (0, _configResolver.resolveEndpointsConfig)(_config_1);
        var _config_3 = (0, _middlewareSigning.resolveAwsAuthConfig)(_config_2);
        var _config_4 = (0, _middlewareRetry.resolveRetryConfig)(_config_3);
        var _config_5 = (0, _middlewareHostHeader.resolveHostHeaderConfig)(_config_4);
        var _config_6 = (0, _middlewareUserAgent.resolveUserAgentConfig)(_config_5);
        _this = _super.call(this, _config_6) || this;
        _this.config = _config_6;
        _this.middlewareStack.use((0, _middlewareSigning.getAwsAuthPlugin)(_this.config));
        _this.middlewareStack.use((0, _middlewareRetry.getRetryPlugin)(_this.config));
        _this.middlewareStack.use((0, _middlewareContentLength.getContentLengthPlugin)(_this.config));
        _this.middlewareStack.use((0, _middlewareHostHeader.getHostHeaderPlugin)(_this.config));
        _this.middlewareStack.use((0, _middlewareLogger.getLoggerPlugin)(_this.config));
        _this.middlewareStack.use((0, _middlewareUserAgent.getUserAgentPlugin)(_this.config));
        return _this;
    }
    CloudWatchLogsClient.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
    };
    return CloudWatchLogsClient;
}((0, _smithyClient.Client));

},{"tslib":"lRdW5","./runtimeConfig":"e3sYq","@aws-sdk/config-resolver":"cd0W3","@aws-sdk/middleware-content-length":"kUr8i","@aws-sdk/middleware-host-header":"fDojh","@aws-sdk/middleware-logger":"b6LDm","@aws-sdk/middleware-retry":"hgahj","@aws-sdk/middleware-signing":"7xrR2","@aws-sdk/middleware-user-agent":"7Khhc","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lRdW5":[function(require,module,exports) {
/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__esDecorate", ()=>__esDecorate);
parcelHelpers.export(exports, "__runInitializers", ()=>__runInitializers);
parcelHelpers.export(exports, "__propKey", ()=>__propKey);
parcelHelpers.export(exports, "__setFunctionName", ()=>__setFunctionName);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
/** @deprecated */ parcelHelpers.export(exports, "__spread", ()=>__spread);
/** @deprecated */ parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__spreadArray", ()=>__spreadArray);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
parcelHelpers.export(exports, "__classPrivateFieldIn", ()=>__classPrivateFieldIn);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) {
        if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected");
        return f;
    }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for(var i = decorators.length - 1; i >= 0; i--){
        var context = {};
        for(var p in contextIn)context[p] = p === "access" ? {} : contextIn[p];
        for(var p in contextIn.access)context.access[p] = contextIn.access[p];
        context.addInitializer = function(f) {
            if (done) throw new TypeError("Cannot add initializers after decoration has completed");
            extraInitializers.push(accept(f || null));
        };
        var result = (0, decorators[i])(kind === "accessor" ? {
            get: descriptor.get,
            set: descriptor.set
        } : descriptor[key], context);
        if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.unshift(_);
        } else if (_ = accept(result)) {
            if (kind === "field") initializers.unshift(_);
            else descriptor[key] = _;
        }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
}
function __runInitializers(thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for(var i = 0; i < initializers.length; i++)value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    return useValue ? value : void 0;
}
function __propKey(x) {
    return typeof x === "symbol" ? x : "".concat(x);
}
function __setFunctionName(f, name, prefix) {
    if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
    return Object.defineProperty(f, "name", {
        configurable: true,
        value: prefix ? "".concat(prefix, " ", name) : name
    });
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(g && (g = 0, op[0] && (_ = 0)), _)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
var __createBinding = Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
};
function __exportStar(m, o) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) {
        for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: false
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
var __setModuleDefault = Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
};
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}
function __classPrivateFieldIn(state, receiver) {
    if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function") throw new TypeError("Cannot use 'in' operator on non-object");
    return typeof state === "function" ? receiver === state : state.has(receiver);
}
exports.default = {
    __extends,
    __assign,
    __rest,
    __decorate,
    __param,
    __metadata,
    __awaiter,
    __generator,
    __createBinding,
    __exportStar,
    __values,
    __read,
    __spread,
    __spreadArrays,
    __spreadArray,
    __await,
    __asyncGenerator,
    __asyncDelegator,
    __asyncValues,
    __makeTemplateObject,
    __importStar,
    __importDefault,
    __classPrivateFieldGet,
    __classPrivateFieldSet,
    __classPrivateFieldIn
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e3sYq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ClientDefaultValues", ()=>ClientDefaultValues);
var _tslib = require("tslib");
var _packageJson = require("./package.json");
var _packageJsonDefault = parcelHelpers.interopDefault(_packageJson);
var _sha256Browser = require("@aws-crypto/sha256-browser");
var _fetchHttpHandler = require("@aws-sdk/fetch-http-handler");
var _invalidDependency = require("@aws-sdk/invalid-dependency");
var _middlewareRetry = require("@aws-sdk/middleware-retry");
var _utilBase64Browser = require("@aws-sdk/util-base64-browser");
var _utilBodyLengthBrowser = require("@aws-sdk/util-body-length-browser");
var _utilUserAgentBrowser = require("@aws-sdk/util-user-agent-browser");
var _utilUtf8Browser = require("@aws-sdk/util-utf8-browser");
var _runtimeConfigShared = require("./runtimeConfig.shared");
var ClientDefaultValues = (0, _tslib.__assign)((0, _tslib.__assign)({}, (0, _runtimeConfigShared.ClientSharedValues)), {
    runtime: "browser",
    base64Decoder: (0, _utilBase64Browser.fromBase64),
    base64Encoder: (0, _utilBase64Browser.toBase64),
    bodyLengthChecker: (0, _utilBodyLengthBrowser.calculateBodyLength),
    credentialDefaultProvider: function(_) {
        return function() {
            return Promise.reject(new Error("Credential is missing"));
        };
    },
    defaultUserAgentProvider: (0, _utilUserAgentBrowser.defaultUserAgent)({
        serviceId: (0, _runtimeConfigShared.ClientSharedValues).serviceId,
        clientVersion: (0, _packageJsonDefault.default).version
    }),
    maxAttempts: (0, _middlewareRetry.DEFAULT_MAX_ATTEMPTS),
    region: (0, _invalidDependency.invalidProvider)("Region is missing"),
    requestHandler: new (0, _fetchHttpHandler.FetchHttpHandler)(),
    sha256: (0, _sha256Browser.Sha256),
    streamCollector: (0, _fetchHttpHandler.streamCollector),
    utf8Decoder: (0, _utilUtf8Browser.fromUtf8),
    utf8Encoder: (0, _utilUtf8Browser.toUtf8)
});

},{"tslib":"lRdW5","./package.json":"jHZux","@aws-crypto/sha256-browser":"h7M77","@aws-sdk/fetch-http-handler":"atrsn","@aws-sdk/invalid-dependency":"1ry3q","@aws-sdk/middleware-retry":"hgahj","@aws-sdk/util-base64-browser":"aNXKr","@aws-sdk/util-body-length-browser":"kyGUn","@aws-sdk/util-user-agent-browser":"26YQ4","@aws-sdk/util-utf8-browser":"aUJSS","./runtimeConfig.shared":"3tcwg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jHZux":[function(require,module,exports) {
module.exports = JSON.parse('{"name":"@aws-sdk/client-cloudwatch-logs","description":"AWS SDK for JavaScript Cloudwatch Logs Client for Node.js, Browser and React Native","version":"3.6.1","scripts":{"clean":"yarn remove-definitions && yarn remove-dist && yarn remove-documentation","build-documentation":"yarn remove-documentation && typedoc ./","prepublishOnly":"yarn build","pretest":"yarn build:cjs","remove-definitions":"rimraf ./types","remove-dist":"rimraf ./dist","remove-documentation":"rimraf ./docs","test":"exit 0","build:cjs":"tsc -p tsconfig.json","build:es":"tsc -p tsconfig.es.json","build":"yarn build:cjs && yarn build:es","postbuild":"downlevel-dts types types/ts3.4"},"main":"./dist/cjs/index.js","types":"./types/index.d.ts","module":"./dist/es/index.js","browser":{"./runtimeConfig":"./runtimeConfig.browser"},"react-native":{"./runtimeConfig":"./runtimeConfig.native"},"sideEffects":false,"dependencies":{"@aws-crypto/sha256-browser":"^1.0.0","@aws-crypto/sha256-js":"^1.0.0","@aws-sdk/config-resolver":"3.6.1","@aws-sdk/credential-provider-node":"3.6.1","@aws-sdk/fetch-http-handler":"3.6.1","@aws-sdk/hash-node":"3.6.1","@aws-sdk/invalid-dependency":"3.6.1","@aws-sdk/middleware-content-length":"3.6.1","@aws-sdk/middleware-host-header":"3.6.1","@aws-sdk/middleware-logger":"3.6.1","@aws-sdk/middleware-retry":"3.6.1","@aws-sdk/middleware-serde":"3.6.1","@aws-sdk/middleware-signing":"3.6.1","@aws-sdk/middleware-stack":"3.6.1","@aws-sdk/middleware-user-agent":"3.6.1","@aws-sdk/node-config-provider":"3.6.1","@aws-sdk/node-http-handler":"3.6.1","@aws-sdk/protocol-http":"3.6.1","@aws-sdk/smithy-client":"3.6.1","@aws-sdk/types":"3.6.1","@aws-sdk/url-parser":"3.6.1","@aws-sdk/url-parser-native":"3.6.1","@aws-sdk/util-base64-browser":"3.6.1","@aws-sdk/util-base64-node":"3.6.1","@aws-sdk/util-body-length-browser":"3.6.1","@aws-sdk/util-body-length-node":"3.6.1","@aws-sdk/util-user-agent-browser":"3.6.1","@aws-sdk/util-user-agent-node":"3.6.1","@aws-sdk/util-utf8-browser":"3.6.1","@aws-sdk/util-utf8-node":"3.6.1","tslib":"^2.0.0"},"devDependencies":{"@aws-sdk/client-documentation-generator":"3.6.1","@types/node":"^12.7.5","downlevel-dts":"0.7.0","jest":"^26.1.0","rimraf":"^3.0.0","typedoc":"^0.19.2","typescript":"~4.1.2"},"engines":{"node":">=10.0.0"},"typesVersions":{"<4.0":{"types/*":["types/ts3.4/*"]}},"author":{"name":"AWS SDK for JavaScript Team","url":"https://aws.amazon.com/javascript/"},"license":"Apache-2.0","homepage":"https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-cloudwatch-logs","repository":{"type":"git","url":"https://github.com/aws/aws-sdk-js-v3.git","directory":"clients/client-cloudwatch-logs"}}');

},{}],"h7M77":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.WebCryptoSha256 = exports.Ie11Sha256 = void 0;
var tslib_1 = require("e61790267abed9ce");
(0, tslib_1.__exportStar)(require("99a5b532c2108e61"), exports);
var ie11Sha256_1 = require("18885d69202b64de");
Object.defineProperty(exports, "Ie11Sha256", {
    enumerable: true,
    get: function() {
        return ie11Sha256_1.Sha256;
    }
});
var webCryptoSha256_1 = require("53d6da50dc62da02");
Object.defineProperty(exports, "WebCryptoSha256", {
    enumerable: true,
    get: function() {
        return webCryptoSha256_1.Sha256;
    }
});

},{"e61790267abed9ce":"1ibki","99a5b532c2108e61":"5zD05","18885d69202b64de":"4aNxR","53d6da50dc62da02":"1toRi"}],"1ibki":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5zD05":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Sha256 = void 0;
var ie11Sha256_1 = require("14cc8b51b10c85dd");
var webCryptoSha256_1 = require("f516e06d1474c12b");
var sha256_js_1 = require("666fcdb068087019");
var supports_web_crypto_1 = require("84e42c65b0998ef3");
var ie11_detection_1 = require("d2cdd8fb26098fe");
var util_locate_window_1 = require("5a3033de5e702229");
var Sha256 = /** @class */ function() {
    function Sha256(secret) {
        if ((0, supports_web_crypto_1.supportsWebCrypto)((0, util_locate_window_1.locateWindow)())) this.hash = new webCryptoSha256_1.Sha256(secret);
        else if ((0, ie11_detection_1.isMsWindow)((0, util_locate_window_1.locateWindow)())) this.hash = new ie11Sha256_1.Sha256(secret);
        else this.hash = new sha256_js_1.Sha256(secret);
    }
    Sha256.prototype.update = function(data, encoding) {
        this.hash.update(data, encoding);
    };
    Sha256.prototype.digest = function() {
        return this.hash.digest();
    };
    return Sha256;
}();
exports.Sha256 = Sha256;

},{"14cc8b51b10c85dd":"4aNxR","f516e06d1474c12b":"1toRi","666fcdb068087019":"fXmvu","84e42c65b0998ef3":"hF3NL","d2cdd8fb26098fe":"l9y1G","5a3033de5e702229":"7axS0"}],"4aNxR":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Sha256 = void 0;
var isEmptyData_1 = require("e16bf16ae8c716ce");
var constants_1 = require("83ff06523ae09b66");
var util_utf8_browser_1 = require("3d3988a4150dcead");
var util_locate_window_1 = require("6cedefd52bdae7ab");
var Sha256 = /** @class */ function() {
    function Sha256(secret) {
        if (secret) {
            this.operation = getKeyPromise(secret).then(function(keyData) {
                return (0, util_locate_window_1.locateWindow)().msCrypto.subtle.sign(constants_1.SHA_256_HMAC_ALGO, keyData);
            });
            this.operation.catch(function() {});
        } else this.operation = Promise.resolve((0, util_locate_window_1.locateWindow)().msCrypto.subtle.digest("SHA-256"));
    }
    Sha256.prototype.update = function(toHash) {
        var _this = this;
        if ((0, isEmptyData_1.isEmptyData)(toHash)) return;
        this.operation = this.operation.then(function(operation) {
            operation.onerror = function() {
                _this.operation = Promise.reject(new Error("Error encountered updating hash"));
            };
            operation.process(toArrayBufferView(toHash));
            return operation;
        });
        this.operation.catch(function() {});
    };
    Sha256.prototype.digest = function() {
        return this.operation.then(function(operation) {
            return new Promise(function(resolve, reject) {
                operation.onerror = function() {
                    reject(new Error("Error encountered finalizing hash"));
                };
                operation.oncomplete = function() {
                    if (operation.result) resolve(new Uint8Array(operation.result));
                    reject(new Error("Error encountered finalizing hash"));
                };
                operation.finish();
            });
        });
    };
    return Sha256;
}();
exports.Sha256 = Sha256;
function getKeyPromise(secret) {
    return new Promise(function(resolve, reject) {
        var keyOperation = (0, util_locate_window_1.locateWindow)().msCrypto.subtle.importKey("raw", toArrayBufferView(secret), constants_1.SHA_256_HMAC_ALGO, false, [
            "sign"
        ]);
        keyOperation.oncomplete = function() {
            if (keyOperation.result) resolve(keyOperation.result);
            reject(new Error("ImportKey completed without importing key."));
        };
        keyOperation.onerror = function() {
            reject(new Error("ImportKey failed to import key."));
        };
    });
}
function toArrayBufferView(data) {
    if (typeof data === "string") return (0, util_utf8_browser_1.fromUtf8)(data);
    if (ArrayBuffer.isView(data)) return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    return new Uint8Array(data);
}

},{"e16bf16ae8c716ce":"2P0qd","83ff06523ae09b66":"YaYqM","3d3988a4150dcead":"aUJSS","6cedefd52bdae7ab":"7axS0"}],"2P0qd":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isEmptyData = void 0;
function isEmptyData(data) {
    if (typeof data === "string") return data.length === 0;
    return data.byteLength === 0;
}
exports.isEmptyData = isEmptyData;

},{}],"YaYqM":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.EMPTY_DATA_SHA_256 = exports.SHA_256_HMAC_ALGO = exports.SHA_256_HASH = void 0;
exports.SHA_256_HASH = {
    name: "SHA-256"
};
exports.SHA_256_HMAC_ALGO = {
    name: "HMAC",
    hash: exports.SHA_256_HASH
};
exports.EMPTY_DATA_SHA_256 = new Uint8Array([
    227,
    176,
    196,
    66,
    152,
    252,
    28,
    20,
    154,
    251,
    244,
    200,
    153,
    111,
    185,
    36,
    39,
    174,
    65,
    228,
    100,
    155,
    147,
    76,
    164,
    149,
    153,
    27,
    120,
    82,
    184,
    85
]);

},{}],"7axS0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "locateWindow", ()=>locateWindow);
const fallbackWindow = {};
function locateWindow() {
    if (typeof window !== "undefined") return window;
    else if (typeof self !== "undefined") return self;
    return fallbackWindow;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1toRi":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Sha256 = void 0;
var util_1 = require("1ab4cca072b0541f");
var constants_1 = require("6d5fc585add900cc");
var util_locate_window_1 = require("5b0c6c1ba3eacf9");
var Sha256 = /** @class */ function() {
    function Sha256(secret) {
        this.toHash = new Uint8Array(0);
        if (secret !== void 0) {
            this.key = new Promise(function(resolve, reject) {
                (0, util_locate_window_1.locateWindow)().crypto.subtle.importKey("raw", (0, util_1.convertToBuffer)(secret), constants_1.SHA_256_HMAC_ALGO, false, [
                    "sign"
                ]).then(resolve, reject);
            });
            this.key.catch(function() {});
        }
    }
    Sha256.prototype.update = function(data) {
        if ((0, util_1.isEmptyData)(data)) return;
        var update = (0, util_1.convertToBuffer)(data);
        var typedArray = new Uint8Array(this.toHash.byteLength + update.byteLength);
        typedArray.set(this.toHash, 0);
        typedArray.set(update, this.toHash.byteLength);
        this.toHash = typedArray;
    };
    Sha256.prototype.digest = function() {
        var _this = this;
        if (this.key) return this.key.then(function(key) {
            return (0, util_locate_window_1.locateWindow)().crypto.subtle.sign(constants_1.SHA_256_HMAC_ALGO, key, _this.toHash).then(function(data) {
                return new Uint8Array(data);
            });
        });
        if ((0, util_1.isEmptyData)(this.toHash)) return Promise.resolve(constants_1.EMPTY_DATA_SHA_256);
        return Promise.resolve().then(function() {
            return (0, util_locate_window_1.locateWindow)().crypto.subtle.digest(constants_1.SHA_256_HASH, _this.toHash);
        }).then(function(data) {
            return Promise.resolve(new Uint8Array(data));
        });
    };
    return Sha256;
}();
exports.Sha256 = Sha256;

},{"1ab4cca072b0541f":"aDvRG","6d5fc585add900cc":"YaYqM","5b0c6c1ba3eacf9":"7axS0"}],"hF3NL":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var tslib_1 = require("5558aadfdffb023d");
tslib_1.__exportStar(require("177ffe00b7533847"), exports);

},{"5558aadfdffb023d":"eEys3","177ffe00b7533847":"4T8k1"}],"eEys3":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4T8k1":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.supportsZeroByteGCM = exports.supportsSubtleCrypto = exports.supportsSecureRandom = exports.supportsWebCrypto = void 0;
var tslib_1 = require("22b5af12b22cfa82");
var subtleCryptoMethods = [
    "decrypt",
    "digest",
    "encrypt",
    "exportKey",
    "generateKey",
    "importKey",
    "sign",
    "verify"
];
function supportsWebCrypto(window) {
    if (supportsSecureRandom(window) && typeof window.crypto.subtle === "object") {
        var subtle = window.crypto.subtle;
        return supportsSubtleCrypto(subtle);
    }
    return false;
}
exports.supportsWebCrypto = supportsWebCrypto;
function supportsSecureRandom(window) {
    if (typeof window === "object" && typeof window.crypto === "object") {
        var getRandomValues = window.crypto.getRandomValues;
        return typeof getRandomValues === "function";
    }
    return false;
}
exports.supportsSecureRandom = supportsSecureRandom;
function supportsSubtleCrypto(subtle) {
    return subtle && subtleCryptoMethods.every(function(methodName) {
        return typeof subtle[methodName] === "function";
    });
}
exports.supportsSubtleCrypto = supportsSubtleCrypto;
function supportsZeroByteGCM(subtle) {
    return tslib_1.__awaiter(this, void 0, void 0, function() {
        var key, zeroByteAuthTag, _a;
        return tslib_1.__generator(this, function(_b) {
            switch(_b.label){
                case 0:
                    if (!supportsSubtleCrypto(subtle)) return [
                        2 /*return*/ ,
                        false
                    ];
                    _b.label = 1;
                case 1:
                    _b.trys.push([
                        1,
                        4,
                        ,
                        5
                    ]);
                    return [
                        4 /*yield*/ ,
                        subtle.generateKey({
                            name: "AES-GCM",
                            length: 128
                        }, false, [
                            "encrypt"
                        ])
                    ];
                case 2:
                    key = _b.sent();
                    return [
                        4 /*yield*/ ,
                        subtle.encrypt({
                            name: "AES-GCM",
                            iv: new Uint8Array(Array(12)),
                            additionalData: new Uint8Array(Array(16)),
                            tagLength: 128
                        }, key, new Uint8Array(0))
                    ];
                case 3:
                    zeroByteAuthTag = _b.sent();
                    return [
                        2 /*return*/ ,
                        zeroByteAuthTag.byteLength === 16
                    ];
                case 4:
                    _a = _b.sent();
                    return [
                        2 /*return*/ ,
                        false
                    ];
                case 5:
                    return [
                        2 /*return*/ 
                    ];
            }
        });
    });
}
exports.supportsZeroByteGCM = supportsZeroByteGCM;

},{"22b5af12b22cfa82":"eEys3"}],"l9y1G":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var tslib_1 = require("e68f0b044096464d");
tslib_1.__exportStar(require("268c8dac63e2a04e"), exports);
tslib_1.__exportStar(require("ef152e2a3f78ae45"), exports);
tslib_1.__exportStar(require("e8b76c37d79d30ac"), exports);
tslib_1.__exportStar(require("bb4b068387b17bff"), exports);
tslib_1.__exportStar(require("ae6e7c3a94ec28b9"), exports);

},{"e68f0b044096464d":"8UVaX","268c8dac63e2a04e":"7MrWv","ef152e2a3f78ae45":"grtd6","e8b76c37d79d30ac":"lUZoT","bb4b068387b17bff":"690sd","ae6e7c3a94ec28b9":"jSZab"}],"8UVaX":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7MrWv":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});

},{}],"grtd6":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});

},{}],"lUZoT":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});

},{}],"690sd":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});

},{}],"jSZab":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isMsWindow = void 0;
var msSubtleCryptoMethods = [
    "decrypt",
    "digest",
    "encrypt",
    "exportKey",
    "generateKey",
    "importKey",
    "sign",
    "verify"
];
function quacksLikeAnMsWindow(window) {
    return "MSInputMethodContext" in window && "msCrypto" in window;
}
/**
 * Determines if the provided window is (or is like) the window object one would
 * expect to encounter in Internet Explorer 11.
 */ function isMsWindow(window) {
    if (quacksLikeAnMsWindow(window) && window.msCrypto.subtle !== undefined) {
        var _a = window.msCrypto, getRandomValues = _a.getRandomValues, subtle_1 = _a.subtle;
        return msSubtleCryptoMethods.map(function(methodName) {
            return subtle_1[methodName];
        }).concat(getRandomValues).every(function(method) {
            return typeof method === "function";
        });
    }
    return false;
}
exports.isMsWindow = isMsWindow;

},{}],"atrsn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _fetchHttpHandler = require("./fetch-http-handler");
parcelHelpers.exportAll(_fetchHttpHandler, exports);
var _streamCollector = require("./stream-collector");
parcelHelpers.exportAll(_streamCollector, exports);

},{"./fetch-http-handler":"5MBuP","./stream-collector":"bWFTZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5MBuP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FetchHttpHandler", ()=>FetchHttpHandler);
var _tslib = require("tslib");
var _protocolHttp = require("@aws-sdk/protocol-http");
var _querystringBuilder = require("@aws-sdk/querystring-builder");
var _requestTimeout = require("./request-timeout");
var FetchHttpHandler = /** @class */ function() {
    function FetchHttpHandler(_a) {
        var _b = _a === void 0 ? {} : _a, requestTimeout = _b.requestTimeout;
        this.requestTimeout = requestTimeout;
    }
    FetchHttpHandler.prototype.destroy = function() {
    // Do nothing. TLS and HTTP/2 connection pooling is handled by the browser.
    };
    FetchHttpHandler.prototype.handle = function(request, _a) {
        var _b = _a === void 0 ? {} : _a, abortSignal = _b.abortSignal;
        var requestTimeoutInMs = this.requestTimeout;
        // if the request was already aborted, prevent doing extra work
        if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
            var abortError = new Error("Request aborted");
            abortError.name = "AbortError";
            return Promise.reject(abortError);
        }
        var path = request.path;
        if (request.query) {
            var queryString = (0, _querystringBuilder.buildQueryString)(request.query);
            if (queryString) path += "?" + queryString;
        }
        var port = request.port, method = request.method;
        var url = request.protocol + "//" + request.hostname + (port ? ":" + port : "") + path;
        // Request constructor doesn't allow GET/HEAD request with body
        // ref: https://github.com/whatwg/fetch/issues/551
        var body = method === "GET" || method === "HEAD" ? undefined : request.body;
        var requestOptions = {
            body: body,
            headers: new Headers(request.headers),
            method: method
        };
        // some browsers support abort signal
        if (typeof AbortController !== "undefined") requestOptions["signal"] = abortSignal;
        var fetchRequest = new Request(url, requestOptions);
        var raceOfPromises = [
            fetch(fetchRequest).then(function(response) {
                var e_1, _a;
                var fetchHeaders = response.headers;
                var transformedHeaders = {};
                try {
                    for(var _b = (0, _tslib.__values)(fetchHeaders.entries()), _c = _b.next(); !_c.done; _c = _b.next()){
                        var pair = _c.value;
                        transformedHeaders[pair[0]] = pair[1];
                    }
                } catch (e_1_1) {
                    e_1 = {
                        error: e_1_1
                    };
                } finally{
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    } finally{
                        if (e_1) throw e_1.error;
                    }
                }
                var hasReadableStream = response.body !== undefined;
                // Return the response with buffered body
                if (!hasReadableStream) return response.blob().then(function(body) {
                    return {
                        response: new (0, _protocolHttp.HttpResponse)({
                            headers: transformedHeaders,
                            statusCode: response.status,
                            body: body
                        })
                    };
                });
                // Return the response with streaming body
                return {
                    response: new (0, _protocolHttp.HttpResponse)({
                        headers: transformedHeaders,
                        statusCode: response.status,
                        body: response.body
                    })
                };
            }),
            (0, _requestTimeout.requestTimeout)(requestTimeoutInMs)
        ];
        if (abortSignal) raceOfPromises.push(new Promise(function(resolve, reject) {
            abortSignal.onabort = function() {
                var abortError = new Error("Request aborted");
                abortError.name = "AbortError";
                reject(abortError);
            };
        }));
        return Promise.race(raceOfPromises);
    };
    return FetchHttpHandler;
}();

},{"tslib":"g4wY9","@aws-sdk/protocol-http":"dbzKK","@aws-sdk/querystring-builder":"2elde","./request-timeout":"c2BD8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g4wY9":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dbzKK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _httpResponse = require("./httpResponse");
parcelHelpers.exportAll(_httpResponse, exports);
var _httpRequest = require("./httpRequest");
parcelHelpers.exportAll(_httpRequest, exports);
var _httpHandler = require("./httpHandler");
parcelHelpers.exportAll(_httpHandler, exports);
var _isValidHostname = require("./isValidHostname");
parcelHelpers.exportAll(_isValidHostname, exports);

},{"./httpResponse":"iqfRF","./httpRequest":"4iqyQ","./httpHandler":"ipBda","./isValidHostname":"8SFRw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iqfRF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "HttpResponse", ()=>HttpResponse);
var HttpResponse = /** @class */ function() {
    function HttpResponse(options) {
        this.statusCode = options.statusCode;
        this.headers = options.headers || {};
        this.body = options.body;
    }
    HttpResponse.isInstance = function(response) {
        //determine if response is a valid HttpResponse
        if (!response) return false;
        var resp = response;
        return typeof resp.statusCode === "number" && typeof resp.headers === "object";
    };
    return HttpResponse;
}();

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4iqyQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "HttpRequest", ()=>HttpRequest);
var _tslib = require("tslib");
var HttpRequest = /** @class */ function() {
    function HttpRequest(options) {
        this.method = options.method || "GET";
        this.hostname = options.hostname || "localhost";
        this.port = options.port;
        this.query = options.query || {};
        this.headers = options.headers || {};
        this.body = options.body;
        this.protocol = options.protocol ? options.protocol.substr(-1) !== ":" ? options.protocol + ":" : options.protocol : "https:";
        this.path = options.path ? options.path.charAt(0) !== "/" ? "/" + options.path : options.path : "/";
    }
    HttpRequest.isInstance = function(request) {
        //determine if request is a valid httpRequest
        if (!request) return false;
        var req = request;
        return "method" in req && "protocol" in req && "hostname" in req && "path" in req && typeof req["query"] === "object" && typeof req["headers"] === "object";
    };
    HttpRequest.prototype.clone = function() {
        var cloned = new HttpRequest((0, _tslib.__assign)((0, _tslib.__assign)({}, this), {
            headers: (0, _tslib.__assign)({}, this.headers)
        }));
        if (cloned.query) cloned.query = cloneQuery(cloned.query);
        return cloned;
    };
    return HttpRequest;
}();
function cloneQuery(query) {
    return Object.keys(query).reduce(function(carry, paramName) {
        var _a;
        var param = query[paramName];
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, carry), (_a = {}, _a[paramName] = Array.isArray(param) ? (0, _tslib.__spread)(param) : param, _a));
    }, {});
}

},{"tslib":"es4g3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"es4g3":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ipBda":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8SFRw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isValidHostname", ()=>isValidHostname);
function isValidHostname(hostname) {
    var hostPattern = /^[a-z0-9][a-z0-9\.\-]*[a-z0-9]$/;
    return hostPattern.test(hostname);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2elde":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "buildQueryString", ()=>buildQueryString);
var _tslib = require("tslib");
var _utilUriEscape = require("@aws-sdk/util-uri-escape");
function buildQueryString(query) {
    var e_1, _a;
    var parts = [];
    try {
        for(var _b = (0, _tslib.__values)(Object.keys(query).sort()), _c = _b.next(); !_c.done; _c = _b.next()){
            var key = _c.value;
            var value = query[key];
            key = (0, _utilUriEscape.escapeUri)(key);
            if (Array.isArray(value)) for(var i = 0, iLen = value.length; i < iLen; i++)parts.push(key + "=" + (0, _utilUriEscape.escapeUri)(value[i]));
            else {
                var qsEntry = key;
                if (value || typeof value === "string") qsEntry += "=" + (0, _utilUriEscape.escapeUri)(value);
                parts.push(qsEntry);
            }
        }
    } catch (e_1_1) {
        e_1 = {
            error: e_1_1
        };
    } finally{
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        } finally{
            if (e_1) throw e_1.error;
        }
    }
    return parts.join("&");
}

},{"tslib":"lgCXl","@aws-sdk/util-uri-escape":"bdO3o","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lgCXl":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bdO3o":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _escapeUri = require("./escape-uri");
parcelHelpers.exportAll(_escapeUri, exports);
var _escapeUriPath = require("./escape-uri-path");
parcelHelpers.exportAll(_escapeUriPath, exports);

},{"./escape-uri":"7UvZi","./escape-uri-path":"fDIIJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7UvZi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "escapeUri", ()=>escapeUri);
var escapeUri = function(uri) {
    // AWS percent-encodes some extra non-standard characters in a URI
    return encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode);
};
var hexEncode = function(c) {
    return "%" + c.charCodeAt(0).toString(16).toUpperCase();
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fDIIJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "escapeUriPath", ()=>escapeUriPath);
var _escapeUri = require("./escape-uri");
var escapeUriPath = function(uri) {
    return uri.split("/").map((0, _escapeUri.escapeUri)).join("/");
};

},{"./escape-uri":"7UvZi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"c2BD8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "requestTimeout", ()=>requestTimeout);
function requestTimeout(timeoutInMs) {
    if (timeoutInMs === void 0) timeoutInMs = 0;
    return new Promise(function(resolve, reject) {
        if (timeoutInMs) setTimeout(function() {
            var timeoutError = new Error("Request did not complete within " + timeoutInMs + " ms");
            timeoutError.name = "TimeoutError";
            reject(timeoutError);
        }, timeoutInMs);
    });
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bWFTZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "streamCollector", ()=>streamCollector);
var _tslib = require("tslib");
var _utilBase64Browser = require("@aws-sdk/util-base64-browser");
var streamCollector = function(stream) {
    if (typeof Blob === "function" && stream instanceof Blob) return collectBlob(stream);
    return collectStream(stream);
};
function collectBlob(blob) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
        var base64, arrayBuffer;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    return [
                        4 /*yield*/ ,
                        readToBase64(blob)
                    ];
                case 1:
                    base64 = _a.sent();
                    arrayBuffer = (0, _utilBase64Browser.fromBase64)(base64);
                    return [
                        2 /*return*/ ,
                        new Uint8Array(arrayBuffer)
                    ];
            }
        });
    });
}
function collectStream(stream) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
        var res, reader, isDone, _a, done, value, prior;
        return (0, _tslib.__generator)(this, function(_b) {
            switch(_b.label){
                case 0:
                    res = new Uint8Array(0);
                    reader = stream.getReader();
                    isDone = false;
                    _b.label = 1;
                case 1:
                    if (!!isDone) return [
                        3 /*break*/ ,
                        3
                    ];
                    return [
                        4 /*yield*/ ,
                        reader.read()
                    ];
                case 2:
                    _a = _b.sent(), done = _a.done, value = _a.value;
                    if (value) {
                        prior = res;
                        res = new Uint8Array(prior.length + value.length);
                        res.set(prior);
                        res.set(value, prior.length);
                    }
                    isDone = done;
                    return [
                        3 /*break*/ ,
                        1
                    ];
                case 3:
                    return [
                        2 /*return*/ ,
                        res
                    ];
            }
        });
    });
}
function readToBase64(blob) {
    return new Promise(function(resolve, reject) {
        var reader = new FileReader();
        reader.onloadend = function() {
            var _a;
            // reference: https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsDataURL
            // response from readAsDataURL is always prepended with "data:*/*;base64,"
            if (reader.readyState !== 2) return reject(new Error("Reader aborted too early"));
            var result = (_a = reader.result) !== null && _a !== void 0 ? _a : "";
            // Response can include only 'data:' for empty blob, return empty string in this case.
            // Otherwise, return the string after ','
            var commaIndex = result.indexOf(",");
            var dataOffset = commaIndex > -1 ? commaIndex + 1 : result.length;
            resolve(result.substring(dataOffset));
        };
        reader.onabort = function() {
            return reject(new Error("Read aborted"));
        };
        reader.onerror = function() {
            return reject(reader.error);
        };
        // reader.readAsArrayBuffer is not always available
        reader.readAsDataURL(blob);
    });
}

},{"tslib":"g4wY9","@aws-sdk/util-base64-browser":"aNXKr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aNXKr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Converts a base-64 encoded string to a Uint8Array of bytes.
 *
 * @param input The base-64 encoded string
 *
 * @see https://tools.ietf.org/html/rfc4648#section-4
 */ parcelHelpers.export(exports, "fromBase64", ()=>fromBase64);
/**
 * Converts a Uint8Array of binary data to a base-64 encoded string.
 *
 * @param input The binary data to encode
 *
 * @see https://tools.ietf.org/html/rfc4648#section-4
 */ parcelHelpers.export(exports, "toBase64", ()=>toBase64);
var alphabetByEncoding = {};
var alphabetByValue = new Array(64);
for(var i = 0, start = "A".charCodeAt(0), limit = "Z".charCodeAt(0); i + start <= limit; i++){
    var char = String.fromCharCode(i + start);
    alphabetByEncoding[char] = i;
    alphabetByValue[i] = char;
}
for(var i = 0, start = "a".charCodeAt(0), limit = "z".charCodeAt(0); i + start <= limit; i++){
    var char = String.fromCharCode(i + start);
    var index = i + 26;
    alphabetByEncoding[char] = index;
    alphabetByValue[index] = char;
}
for(var i = 0; i < 10; i++){
    alphabetByEncoding[i.toString(10)] = i + 52;
    var char = i.toString(10);
    var index = i + 52;
    alphabetByEncoding[char] = index;
    alphabetByValue[index] = char;
}
alphabetByEncoding["+"] = 62;
alphabetByValue[62] = "+";
alphabetByEncoding["/"] = 63;
alphabetByValue[63] = "/";
var bitsPerLetter = 6;
var bitsPerByte = 8;
var maxLetterValue = 63;
function fromBase64(input) {
    var totalByteLength = input.length / 4 * 3;
    if (input.substr(-2) === "==") totalByteLength -= 2;
    else if (input.substr(-1) === "=") totalByteLength--;
    var out = new ArrayBuffer(totalByteLength);
    var dataView = new DataView(out);
    for(var i = 0; i < input.length; i += 4){
        var bits = 0;
        var bitLength = 0;
        for(var j = i, limit = i + 3; j <= limit; j++)if (input[j] !== "=") {
            bits |= alphabetByEncoding[input[j]] << (limit - j) * bitsPerLetter;
            bitLength += bitsPerLetter;
        } else bits >>= bitsPerLetter;
        var chunkOffset = i / 4 * 3;
        bits >>= bitLength % bitsPerByte;
        var byteLength = Math.floor(bitLength / bitsPerByte);
        for(var k = 0; k < byteLength; k++){
            var offset = (byteLength - k - 1) * bitsPerByte;
            dataView.setUint8(chunkOffset + k, (bits & 255 << offset) >> offset);
        }
    }
    return new Uint8Array(out);
}
function toBase64(input) {
    var str = "";
    for(var i = 0; i < input.length; i += 3){
        var bits = 0;
        var bitLength = 0;
        for(var j = i, limit = Math.min(i + 3, input.length); j < limit; j++){
            bits |= input[j] << (limit - j - 1) * bitsPerByte;
            bitLength += bitsPerByte;
        }
        var bitClusterCount = Math.ceil(bitLength / bitsPerLetter);
        bits <<= bitClusterCount * bitsPerLetter - bitLength;
        for(var k = 1; k <= bitClusterCount; k++){
            var offset = (bitClusterCount - k) * bitsPerLetter;
            str += alphabetByValue[(bits & maxLetterValue << offset) >> offset];
        }
        str += "==".slice(0, 4 - bitClusterCount);
    }
    return str;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1ry3q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _invalidFunction = require("./invalidFunction");
parcelHelpers.exportAll(_invalidFunction, exports);
var _invalidProvider = require("./invalidProvider");
parcelHelpers.exportAll(_invalidProvider, exports);

},{"./invalidFunction":"0Tm5F","./invalidProvider":"e5kQf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"0Tm5F":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "invalidFunction", ()=>invalidFunction);
var invalidFunction = function(message) {
    return function() {
        throw new Error(message);
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e5kQf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "invalidProvider", ()=>invalidProvider);
var invalidProvider = function(message) {
    return function() {
        return Promise.reject(message);
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hgahj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _retryMiddleware = require("./retryMiddleware");
parcelHelpers.exportAll(_retryMiddleware, exports);
var _omitRetryHeadersMiddleware = require("./omitRetryHeadersMiddleware");
parcelHelpers.exportAll(_omitRetryHeadersMiddleware, exports);
var _defaultStrategy = require("./defaultStrategy");
parcelHelpers.exportAll(_defaultStrategy, exports);
var _configurations = require("./configurations");
parcelHelpers.exportAll(_configurations, exports);
var _delayDecider = require("./delayDecider");
parcelHelpers.exportAll(_delayDecider, exports);
var _retryDecider = require("./retryDecider");
parcelHelpers.exportAll(_retryDecider, exports);

},{"./retryMiddleware":"6LirE","./omitRetryHeadersMiddleware":"cpDpC","./defaultStrategy":"9fkaR","./configurations":"eL3tJ","./delayDecider":"lpy71","./retryDecider":"a8phO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6LirE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "retryMiddleware", ()=>retryMiddleware);
parcelHelpers.export(exports, "retryMiddlewareOptions", ()=>retryMiddlewareOptions);
parcelHelpers.export(exports, "getRetryPlugin", ()=>getRetryPlugin);
var _tslib = require("tslib");
var retryMiddleware = function(options) {
    return function(next, context) {
        return function(args) {
            return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
                var _a;
                return (0, _tslib.__generator)(this, function(_b) {
                    if ((_a = options === null || options === void 0 ? void 0 : options.retryStrategy) === null || _a === void 0 ? void 0 : _a.mode) context.userAgent = (0, _tslib.__spread)(context.userAgent || [], [
                        [
                            "cfg/retry-mode",
                            options.retryStrategy.mode
                        ]
                    ]);
                    return [
                        2 /*return*/ ,
                        options.retryStrategy.retry(next, args)
                    ];
                });
            });
        };
    };
};
var retryMiddlewareOptions = {
    name: "retryMiddleware",
    tags: [
        "RETRY"
    ],
    step: "finalizeRequest",
    priority: "high",
    override: true
};
var getRetryPlugin = function(options) {
    return {
        applyToStack: function(clientStack) {
            clientStack.add(retryMiddleware(options), retryMiddlewareOptions);
        }
    };
};

},{"tslib":"ih7nG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ih7nG":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cpDpC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "omitRetryHeadersMiddleware", ()=>omitRetryHeadersMiddleware);
parcelHelpers.export(exports, "omitRetryHeadersMiddlewareOptions", ()=>omitRetryHeadersMiddlewareOptions);
parcelHelpers.export(exports, "getOmitRetryHeadersPlugin", ()=>getOmitRetryHeadersPlugin);
var _tslib = require("tslib");
var _protocolHttp = require("@aws-sdk/protocol-http");
var _constants = require("./constants");
var omitRetryHeadersMiddleware = function() {
    return function(next) {
        return function(args) {
            return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
                var request;
                return (0, _tslib.__generator)(this, function(_a) {
                    request = args.request;
                    if ((0, _protocolHttp.HttpRequest).isInstance(request)) {
                        delete request.headers[0, _constants.INVOCATION_ID_HEADER];
                        delete request.headers[0, _constants.REQUEST_HEADER];
                    }
                    return [
                        2 /*return*/ ,
                        next(args)
                    ];
                });
            });
        };
    };
};
var omitRetryHeadersMiddlewareOptions = {
    name: "omitRetryHeadersMiddleware",
    tags: [
        "RETRY",
        "HEADERS",
        "OMIT_RETRY_HEADERS"
    ],
    relation: "before",
    toMiddleware: "awsAuthMiddleware",
    override: true
};
var getOmitRetryHeadersPlugin = function(options) {
    return {
        applyToStack: function(clientStack) {
            clientStack.addRelativeTo(omitRetryHeadersMiddleware(), omitRetryHeadersMiddlewareOptions);
        }
    };
};

},{"tslib":"ih7nG","@aws-sdk/protocol-http":"dbzKK","./constants":"juS8Q","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"juS8Q":[function(require,module,exports) {
/**
 * The base number of milliseconds to use in calculating a suitable cool-down
 * time when a retryable error is encountered.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DEFAULT_RETRY_DELAY_BASE", ()=>DEFAULT_RETRY_DELAY_BASE);
parcelHelpers.export(exports, "MAXIMUM_RETRY_DELAY", ()=>MAXIMUM_RETRY_DELAY);
parcelHelpers.export(exports, "THROTTLING_RETRY_DELAY_BASE", ()=>THROTTLING_RETRY_DELAY_BASE);
parcelHelpers.export(exports, "INITIAL_RETRY_TOKENS", ()=>INITIAL_RETRY_TOKENS);
parcelHelpers.export(exports, "RETRY_COST", ()=>RETRY_COST);
parcelHelpers.export(exports, "TIMEOUT_RETRY_COST", ()=>TIMEOUT_RETRY_COST);
parcelHelpers.export(exports, "NO_RETRY_INCREMENT", ()=>NO_RETRY_INCREMENT);
parcelHelpers.export(exports, "INVOCATION_ID_HEADER", ()=>INVOCATION_ID_HEADER);
parcelHelpers.export(exports, "REQUEST_HEADER", ()=>REQUEST_HEADER);
var DEFAULT_RETRY_DELAY_BASE = 100;
var MAXIMUM_RETRY_DELAY = 20000;
var THROTTLING_RETRY_DELAY_BASE = 500;
var INITIAL_RETRY_TOKENS = 500;
var RETRY_COST = 5;
var TIMEOUT_RETRY_COST = 10;
var NO_RETRY_INCREMENT = 1;
var INVOCATION_ID_HEADER = "amz-sdk-invocation-id";
var REQUEST_HEADER = "amz-sdk-request";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9fkaR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DEFAULT_MAX_ATTEMPTS", ()=>DEFAULT_MAX_ATTEMPTS);
parcelHelpers.export(exports, "DEFAULT_RETRY_MODE", ()=>DEFAULT_RETRY_MODE);
parcelHelpers.export(exports, "StandardRetryStrategy", ()=>StandardRetryStrategy);
var _tslib = require("tslib");
var _protocolHttp = require("@aws-sdk/protocol-http");
var _serviceErrorClassification = require("@aws-sdk/service-error-classification");
var _uuid = require("uuid");
var _constants = require("./constants");
var _defaultRetryQuota = require("./defaultRetryQuota");
var _delayDecider = require("./delayDecider");
var _retryDecider = require("./retryDecider");
var DEFAULT_MAX_ATTEMPTS = 3;
var DEFAULT_RETRY_MODE = "standard";
var StandardRetryStrategy = /** @class */ function() {
    function StandardRetryStrategy(maxAttemptsProvider, options) {
        var _a, _b, _c;
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = DEFAULT_RETRY_MODE;
        this.retryDecider = (_a = options === null || options === void 0 ? void 0 : options.retryDecider) !== null && _a !== void 0 ? _a : (0, _retryDecider.defaultRetryDecider);
        this.delayDecider = (_b = options === null || options === void 0 ? void 0 : options.delayDecider) !== null && _b !== void 0 ? _b : (0, _delayDecider.defaultDelayDecider);
        this.retryQuota = (_c = options === null || options === void 0 ? void 0 : options.retryQuota) !== null && _c !== void 0 ? _c : (0, _defaultRetryQuota.getDefaultRetryQuota)((0, _constants.INITIAL_RETRY_TOKENS));
    }
    StandardRetryStrategy.prototype.shouldRetry = function(error, attempts, maxAttempts) {
        return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);
    };
    StandardRetryStrategy.prototype.getMaxAttempts = function() {
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            var maxAttempts, error_1;
            return (0, _tslib.__generator)(this, function(_a) {
                switch(_a.label){
                    case 0:
                        _a.trys.push([
                            0,
                            2,
                            ,
                            3
                        ]);
                        return [
                            4 /*yield*/ ,
                            this.maxAttemptsProvider()
                        ];
                    case 1:
                        maxAttempts = _a.sent();
                        return [
                            3 /*break*/ ,
                            3
                        ];
                    case 2:
                        error_1 = _a.sent();
                        maxAttempts = DEFAULT_MAX_ATTEMPTS;
                        return [
                            3 /*break*/ ,
                            3
                        ];
                    case 3:
                        return [
                            2 /*return*/ ,
                            maxAttempts
                        ];
                }
            });
        });
    };
    StandardRetryStrategy.prototype.retry = function(next, args) {
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            var retryTokenAmount, attempts, totalDelay, maxAttempts, request, _loop_1, this_1, state_1;
            return (0, _tslib.__generator)(this, function(_a) {
                switch(_a.label){
                    case 0:
                        attempts = 0;
                        totalDelay = 0;
                        return [
                            4 /*yield*/ ,
                            this.getMaxAttempts()
                        ];
                    case 1:
                        maxAttempts = _a.sent();
                        request = args.request;
                        if ((0, _protocolHttp.HttpRequest).isInstance(request)) request.headers[0, _constants.INVOCATION_ID_HEADER] = (0, _uuid.v4)();
                        _loop_1 = function() {
                            var _a, response, output, err_1, delay_1;
                            return (0, _tslib.__generator)(this, function(_b) {
                                switch(_b.label){
                                    case 0:
                                        _b.trys.push([
                                            0,
                                            2,
                                            ,
                                            5
                                        ]);
                                        if ((0, _protocolHttp.HttpRequest).isInstance(request)) request.headers[0, _constants.REQUEST_HEADER] = "attempt=" + (attempts + 1) + "; max=" + maxAttempts;
                                        return [
                                            4 /*yield*/ ,
                                            next(args)
                                        ];
                                    case 1:
                                        _a = _b.sent(), response = _a.response, output = _a.output;
                                        this_1.retryQuota.releaseRetryTokens(retryTokenAmount);
                                        output.$metadata.attempts = attempts + 1;
                                        output.$metadata.totalRetryDelay = totalDelay;
                                        return [
                                            2 /*return*/ ,
                                            {
                                                value: {
                                                    response: response,
                                                    output: output
                                                }
                                            }
                                        ];
                                    case 2:
                                        err_1 = _b.sent();
                                        attempts++;
                                        if (!this_1.shouldRetry(err_1, attempts, maxAttempts)) return [
                                            3 /*break*/ ,
                                            4
                                        ];
                                        retryTokenAmount = this_1.retryQuota.retrieveRetryTokens(err_1);
                                        delay_1 = this_1.delayDecider((0, _serviceErrorClassification.isThrottlingError)(err_1) ? (0, _constants.THROTTLING_RETRY_DELAY_BASE) : (0, _constants.DEFAULT_RETRY_DELAY_BASE), attempts);
                                        totalDelay += delay_1;
                                        return [
                                            4 /*yield*/ ,
                                            new Promise(function(resolve) {
                                                return setTimeout(resolve, delay_1);
                                            })
                                        ];
                                    case 3:
                                        _b.sent();
                                        return [
                                            2 /*return*/ ,
                                            "continue"
                                        ];
                                    case 4:
                                        if (!err_1.$metadata) err_1.$metadata = {};
                                        err_1.$metadata.attempts = attempts;
                                        err_1.$metadata.totalRetryDelay = totalDelay;
                                        throw err_1;
                                    case 5:
                                        return [
                                            2 /*return*/ 
                                        ];
                                }
                            });
                        };
                        this_1 = this;
                        _a.label = 2;
                    case 2:
                        return [
                            5 /*yield**/ ,
                            _loop_1()
                        ];
                    case 3:
                        state_1 = _a.sent();
                        if (typeof state_1 === "object") return [
                            2 /*return*/ ,
                            state_1.value
                        ];
                        return [
                            3 /*break*/ ,
                            2
                        ];
                    case 4:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    return StandardRetryStrategy;
}();

},{"tslib":"ih7nG","@aws-sdk/protocol-http":"dbzKK","@aws-sdk/service-error-classification":"55gX7","uuid":"2YH3o","./constants":"juS8Q","./defaultRetryQuota":"bCnN0","./delayDecider":"lpy71","./retryDecider":"a8phO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"55gX7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isRetryableByTrait", ()=>isRetryableByTrait);
parcelHelpers.export(exports, "isClockSkewError", ()=>isClockSkewError);
parcelHelpers.export(exports, "isThrottlingError", ()=>isThrottlingError);
parcelHelpers.export(exports, "isTransientError", ()=>isTransientError);
var _constants = require("./constants");
var isRetryableByTrait = function(error) {
    return error.$retryable !== undefined;
};
var isClockSkewError = function(error) {
    return (0, _constants.CLOCK_SKEW_ERROR_CODES).includes(error.name);
};
var isThrottlingError = function(error) {
    var _a, _b;
    return ((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) === 429 || (0, _constants.THROTTLING_ERROR_CODES).includes(error.name) || ((_b = error.$retryable) === null || _b === void 0 ? void 0 : _b.throttling) == true;
};
var isTransientError = function(error) {
    var _a;
    return (0, _constants.TRANSIENT_ERROR_CODES).includes(error.name) || (0, _constants.TRANSIENT_ERROR_STATUS_CODES).includes(((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) || 0);
};

},{"./constants":"afxhZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"afxhZ":[function(require,module,exports) {
/**
 * Errors encountered when the client clock and server clock cannot agree on the
 * current time.
 *
 * These errors are retryable, assuming the SDK has enabled clock skew
 * correction.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CLOCK_SKEW_ERROR_CODES", ()=>CLOCK_SKEW_ERROR_CODES);
parcelHelpers.export(exports, "THROTTLING_ERROR_CODES", ()=>THROTTLING_ERROR_CODES);
parcelHelpers.export(exports, "TRANSIENT_ERROR_CODES", ()=>TRANSIENT_ERROR_CODES);
parcelHelpers.export(exports, "TRANSIENT_ERROR_STATUS_CODES", ()=>TRANSIENT_ERROR_STATUS_CODES);
var CLOCK_SKEW_ERROR_CODES = [
    "AuthFailure",
    "InvalidSignatureException",
    "RequestExpired",
    "RequestInTheFuture",
    "RequestTimeTooSkewed",
    "SignatureDoesNotMatch"
];
var THROTTLING_ERROR_CODES = [
    "BandwidthLimitExceeded",
    "EC2ThrottledException",
    "LimitExceededException",
    "PriorRequestNotComplete",
    "ProvisionedThroughputExceededException",
    "RequestLimitExceeded",
    "RequestThrottled",
    "RequestThrottledException",
    "SlowDown",
    "ThrottledException",
    "Throttling",
    "ThrottlingException",
    "TooManyRequestsException",
    "TransactionInProgressException"
];
var TRANSIENT_ERROR_CODES = [
    "AbortError",
    "TimeoutError",
    "RequestTimeout",
    "RequestTimeoutException"
];
var TRANSIENT_ERROR_STATUS_CODES = [
    500,
    502,
    503,
    504
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2YH3o":[function(require,module,exports) {
var v1 = require("49b80c5a5c4fe230");
var v4 = require("8c2b9bce37db57aa");
var uuid = v4;
uuid.v1 = v1;
uuid.v4 = v4;
module.exports = uuid;

},{"49b80c5a5c4fe230":"1UaLK","8c2b9bce37db57aa":"nZnAg"}],"1UaLK":[function(require,module,exports) {
var rng = require("577a29ab22e5b577");
var bytesToUuid = require("4f6e16f01e7ea6b");
// **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html
var _nodeId;
var _clockseq;
// Previous uuid creation time
var _lastMSecs = 0;
var _lastNSecs = 0;
// See https://github.com/uuidjs/uuid for API details
function v1(options, buf, offset) {
    var i = buf && offset || 0;
    var b = buf || [];
    options = options || {};
    var node = options.node || _nodeId;
    var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;
    // node and clockseq need to be initialized to random values if they're not
    // specified.  We do this lazily to minimize issues related to insufficient
    // system entropy.  See #189
    if (node == null || clockseq == null) {
        var seedBytes = rng();
        if (node == null) // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
        node = _nodeId = [
            seedBytes[0] | 0x01,
            seedBytes[1],
            seedBytes[2],
            seedBytes[3],
            seedBytes[4],
            seedBytes[5]
        ];
        if (clockseq == null) // Per 4.2.2, randomize (14 bit) clockseq
        clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
    }
    // UUID timestamps are 100 nano-second units since the Gregorian epoch,
    // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
    // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
    // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
    var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();
    // Per 4.2.1.2, use count of uuid's generated during the current clock
    // cycle to simulate higher resolution clock
    var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;
    // Time since last uuid creation (in msecs)
    var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000;
    // Per 4.2.1.2, Bump clockseq on clock regression
    if (dt < 0 && options.clockseq === undefined) clockseq = clockseq + 1 & 0x3fff;
    // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
    // time interval
    if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) nsecs = 0;
    // Per 4.2.1.2 Throw error if too many uuids are requested
    if (nsecs >= 10000) throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
    _lastMSecs = msecs;
    _lastNSecs = nsecs;
    _clockseq = clockseq;
    // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
    msecs += 12219292800000;
    // `time_low`
    var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
    b[i++] = tl >>> 24 & 0xff;
    b[i++] = tl >>> 16 & 0xff;
    b[i++] = tl >>> 8 & 0xff;
    b[i++] = tl & 0xff;
    // `time_mid`
    var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
    b[i++] = tmh >>> 8 & 0xff;
    b[i++] = tmh & 0xff;
    // `time_high_and_version`
    b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
    b[i++] = tmh >>> 16 & 0xff;
    // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
    b[i++] = clockseq >>> 8 | 0x80;
    // `clock_seq_low`
    b[i++] = clockseq & 0xff;
    // `node`
    for(var n = 0; n < 6; ++n)b[i + n] = node[n];
    return buf ? buf : bytesToUuid(b);
}
module.exports = v1;

},{"577a29ab22e5b577":"575ZK","4f6e16f01e7ea6b":"hFTr1"}],"575ZK":[function(require,module,exports) {
// Unique ID creation requires a high quality random # generator.  In the
// browser this is a little complicated due to unknown quality of Math.random()
// and inconsistent support for the `crypto` API.  We do the best we can via
// feature-detection
// getRandomValues needs to be invoked in a context where "this" is a Crypto
// implementation. Also, find the complete implementation of crypto on IE11.
var getRandomValues = typeof crypto != "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto != "undefined" && typeof window.msCrypto.getRandomValues == "function" && msCrypto.getRandomValues.bind(msCrypto);
if (getRandomValues) {
    // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto
    var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef
    module.exports = function whatwgRNG() {
        getRandomValues(rnds8);
        return rnds8;
    };
} else {
    // Math.random()-based (RNG)
    //
    // If all else fails, use Math.random().  It's fast, but is of unspecified
    // quality.
    var rnds = new Array(16);
    module.exports = function mathRNG() {
        for(var i = 0, r; i < 16; i++){
            if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
            rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
        }
        return rnds;
    };
}

},{}],"hFTr1":[function(require,module,exports) {
/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */ var byteToHex = [];
for(var i = 0; i < 256; ++i)byteToHex[i] = (i + 0x100).toString(16).substr(1);
function bytesToUuid(buf, offset) {
    var i = offset || 0;
    var bth = byteToHex;
    // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4
    return [
        bth[buf[i++]],
        bth[buf[i++]],
        bth[buf[i++]],
        bth[buf[i++]],
        "-",
        bth[buf[i++]],
        bth[buf[i++]],
        "-",
        bth[buf[i++]],
        bth[buf[i++]],
        "-",
        bth[buf[i++]],
        bth[buf[i++]],
        "-",
        bth[buf[i++]],
        bth[buf[i++]],
        bth[buf[i++]],
        bth[buf[i++]],
        bth[buf[i++]],
        bth[buf[i++]]
    ].join("");
}
module.exports = bytesToUuid;

},{}],"nZnAg":[function(require,module,exports) {
var rng = require("2c0db55275b31b88");
var bytesToUuid = require("65c09e252e86e1a0");
function v4(options, buf, offset) {
    var i = buf && offset || 0;
    if (typeof options == "string") {
        buf = options === "binary" ? new Array(16) : null;
        options = null;
    }
    options = options || {};
    var rnds = options.random || (options.rng || rng)();
    // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
    rnds[6] = rnds[6] & 0x0f | 0x40;
    rnds[8] = rnds[8] & 0x3f | 0x80;
    // Copy bytes to buffer, if provided
    if (buf) for(var ii = 0; ii < 16; ++ii)buf[i + ii] = rnds[ii];
    return buf || bytesToUuid(rnds);
}
module.exports = v4;

},{"2c0db55275b31b88":"575ZK","65c09e252e86e1a0":"hFTr1"}],"bCnN0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getDefaultRetryQuota", ()=>getDefaultRetryQuota);
var _constants = require("./constants");
var getDefaultRetryQuota = function(initialRetryTokens) {
    var MAX_CAPACITY = initialRetryTokens;
    var availableCapacity = initialRetryTokens;
    var getCapacityAmount = function(error) {
        return error.name === "TimeoutError" ? (0, _constants.TIMEOUT_RETRY_COST) : (0, _constants.RETRY_COST);
    };
    var hasRetryTokens = function(error) {
        return getCapacityAmount(error) <= availableCapacity;
    };
    var retrieveRetryTokens = function(error) {
        if (!hasRetryTokens(error)) // retryStrategy should stop retrying, and return last error
        throw new Error("No retry token available");
        var capacityAmount = getCapacityAmount(error);
        availableCapacity -= capacityAmount;
        return capacityAmount;
    };
    var releaseRetryTokens = function(capacityReleaseAmount) {
        availableCapacity += capacityReleaseAmount !== null && capacityReleaseAmount !== void 0 ? capacityReleaseAmount : (0, _constants.NO_RETRY_INCREMENT);
        availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);
    };
    return Object.freeze({
        hasRetryTokens: hasRetryTokens,
        retrieveRetryTokens: retrieveRetryTokens,
        releaseRetryTokens: releaseRetryTokens
    });
};

},{"./constants":"juS8Q","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lpy71":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "defaultDelayDecider", ()=>defaultDelayDecider);
var _constants = require("./constants");
var defaultDelayDecider = function(delayBase, attempts) {
    return Math.floor(Math.min((0, _constants.MAXIMUM_RETRY_DELAY), Math.random() * Math.pow(2, attempts) * delayBase));
};

},{"./constants":"juS8Q","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a8phO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "defaultRetryDecider", ()=>defaultRetryDecider);
var _serviceErrorClassification = require("@aws-sdk/service-error-classification");
var defaultRetryDecider = function(error) {
    if (!error) return false;
    return (0, _serviceErrorClassification.isRetryableByTrait)(error) || (0, _serviceErrorClassification.isClockSkewError)(error) || (0, _serviceErrorClassification.isThrottlingError)(error) || (0, _serviceErrorClassification.isTransientError)(error);
};

},{"@aws-sdk/service-error-classification":"55gX7","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eL3tJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ENV_MAX_ATTEMPTS", ()=>ENV_MAX_ATTEMPTS);
parcelHelpers.export(exports, "CONFIG_MAX_ATTEMPTS", ()=>CONFIG_MAX_ATTEMPTS);
parcelHelpers.export(exports, "NODE_MAX_ATTEMPT_CONFIG_OPTIONS", ()=>NODE_MAX_ATTEMPT_CONFIG_OPTIONS);
parcelHelpers.export(exports, "resolveRetryConfig", ()=>resolveRetryConfig);
parcelHelpers.export(exports, "ENV_RETRY_MODE", ()=>ENV_RETRY_MODE);
parcelHelpers.export(exports, "CONFIG_RETRY_MODE", ()=>CONFIG_RETRY_MODE);
parcelHelpers.export(exports, "NODE_RETRY_MODE_CONFIG_OPTIONS", ()=>NODE_RETRY_MODE_CONFIG_OPTIONS);
var _tslib = require("tslib");
var _defaultStrategy = require("./defaultStrategy");
var ENV_MAX_ATTEMPTS = "AWS_MAX_ATTEMPTS";
var CONFIG_MAX_ATTEMPTS = "max_attempts";
var NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {
    environmentVariableSelector: function(env) {
        var value = env[ENV_MAX_ATTEMPTS];
        if (!value) return undefined;
        var maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) throw new Error("Environment variable " + ENV_MAX_ATTEMPTS + ' mast be a number, got "' + value + '"');
        return maxAttempt;
    },
    configFileSelector: function(profile) {
        var value = profile[CONFIG_MAX_ATTEMPTS];
        if (!value) return undefined;
        var maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) throw new Error("Shared config file entry " + CONFIG_MAX_ATTEMPTS + ' mast be a number, got "' + value + '"');
        return maxAttempt;
    },
    default: (0, _defaultStrategy.DEFAULT_MAX_ATTEMPTS)
};
var resolveRetryConfig = function(input) {
    var maxAttempts = normalizeMaxAttempts(input.maxAttempts);
    return (0, _tslib.__assign)((0, _tslib.__assign)({}, input), {
        maxAttempts: maxAttempts,
        retryStrategy: input.retryStrategy || new (0, _defaultStrategy.StandardRetryStrategy)(maxAttempts)
    });
};
var normalizeMaxAttempts = function(maxAttempts) {
    if (maxAttempts === void 0) maxAttempts = (0, _defaultStrategy.DEFAULT_MAX_ATTEMPTS);
    if (typeof maxAttempts === "number") {
        var promisified_1 = Promise.resolve(maxAttempts);
        return function() {
            return promisified_1;
        };
    }
    return maxAttempts;
};
var ENV_RETRY_MODE = "AWS_RETRY_MODE";
var CONFIG_RETRY_MODE = "retry_mode";
var NODE_RETRY_MODE_CONFIG_OPTIONS = {
    environmentVariableSelector: function(env) {
        return env[ENV_RETRY_MODE];
    },
    configFileSelector: function(profile) {
        return profile[CONFIG_RETRY_MODE];
    },
    default: (0, _defaultStrategy.DEFAULT_RETRY_MODE)
};

},{"tslib":"ih7nG","./defaultStrategy":"9fkaR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kyGUn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "calculateBodyLength", ()=>calculateBodyLength);
function calculateBodyLength(body) {
    if (typeof body === "string") {
        var len = body.length;
        for(var i = len - 1; i >= 0; i--){
            var code = body.charCodeAt(i);
            if (code > 0x7f && code <= 0x7ff) len++;
            else if (code > 0x7ff && code <= 0xffff) len += 2;
        }
        return len;
    } else if (typeof body.byteLength === "number") // handles Uint8Array, ArrayBuffer, Buffer, and ArrayBufferView
    return body.byteLength;
    else if (typeof body.size === "number") // handles browser File object
    return body.size;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"26YQ4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "defaultUserAgent", ()=>defaultUserAgent);
var _tslib = require("tslib");
var _bowser = require("bowser");
var _bowserDefault = parcelHelpers.interopDefault(_bowser);
var defaultUserAgent = function(_a) {
    var serviceId = _a.serviceId, clientVersion = _a.clientVersion;
    return function() {
        return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
            var parsedUA, sections;
            var _a, _b, _c, _d, _e, _f, _g;
            return (0, _tslib.__generator)(this, function(_h) {
                parsedUA = ((_a = window === null || window === void 0 ? void 0 : window.navigator) === null || _a === void 0 ? void 0 : _a.userAgent) ? (0, _bowserDefault.default).parse(window.navigator.userAgent) : undefined;
                sections = [
                    // sdk-metadata
                    [
                        "aws-sdk-js",
                        clientVersion
                    ],
                    // os-metadata
                    [
                        "os/" + (((_b = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.os) === null || _b === void 0 ? void 0 : _b.name) || "other"),
                        (_c = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.os) === null || _c === void 0 ? void 0 : _c.version
                    ],
                    // language-metadata
                    // ECMAScript edition doesn't matter in JS.
                    [
                        "lang/js"
                    ],
                    // browser vendor and version.
                    [
                        "md/browser",
                        ((_e = (_d = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.browser) === null || _d === void 0 ? void 0 : _d.name) !== null && _e !== void 0 ? _e : "unknown") + "_" + ((_g = (_f = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.browser) === null || _f === void 0 ? void 0 : _f.version) !== null && _g !== void 0 ? _g : "unknown")
                    ]
                ];
                if (serviceId) // api-metadata
                // service Id may not appear in non-AWS clients
                sections.push([
                    "api/" + serviceId,
                    clientVersion
                ]);
                return [
                    2 /*return*/ ,
                    sections
                ];
            });
        });
    };
};

},{"tslib":"3QGSn","bowser":"5jYCf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3QGSn":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5jYCf":[function(require,module,exports) {
!function(e, t) {
    module.exports = t();
}(this, function() {
    return function(e) {
        var t = {};
        function r(n) {
            if (t[n]) return t[n].exports;
            var i = t[n] = {
                i: n,
                l: !1,
                exports: {}
            };
            return e[n].call(i.exports, i, i.exports, r), i.l = !0, i.exports;
        }
        return r.m = e, r.c = t, r.d = function(e, t, n) {
            r.o(e, t) || Object.defineProperty(e, t, {
                enumerable: !0,
                get: n
            });
        }, r.r = function(e) {
            "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {
                value: "Module"
            }), Object.defineProperty(e, "__esModule", {
                value: !0
            });
        }, r.t = function(e, t) {
            if (1 & t && (e = r(e)), 8 & t) return e;
            if (4 & t && "object" == typeof e && e && e.__esModule) return e;
            var n = Object.create(null);
            if (r.r(n), Object.defineProperty(n, "default", {
                enumerable: !0,
                value: e
            }), 2 & t && "string" != typeof e) for(var i in e)r.d(n, i, (function(t) {
                return e[t];
            }).bind(null, i));
            return n;
        }, r.n = function(e) {
            var t = e && e.__esModule ? function() {
                return e.default;
            } : function() {
                return e;
            };
            return r.d(t, "a", t), t;
        }, r.o = function(e, t) {
            return Object.prototype.hasOwnProperty.call(e, t);
        }, r.p = "", r(r.s = 90);
    }({
        17: function(e, t, r) {
            "use strict";
            t.__esModule = !0, t.default = void 0;
            var n = r(18), i = function() {
                function e() {}
                return e.getFirstMatch = function(e, t) {
                    var r = t.match(e);
                    return r && r.length > 0 && r[1] || "";
                }, e.getSecondMatch = function(e, t) {
                    var r = t.match(e);
                    return r && r.length > 1 && r[2] || "";
                }, e.matchAndReturnConst = function(e, t, r) {
                    if (e.test(t)) return r;
                }, e.getWindowsVersionName = function(e) {
                    switch(e){
                        case "NT":
                            return "NT";
                        case "XP":
                            return "XP";
                        case "NT 5.0":
                            return "2000";
                        case "NT 5.1":
                            return "XP";
                        case "NT 5.2":
                            return "2003";
                        case "NT 6.0":
                            return "Vista";
                        case "NT 6.1":
                            return "7";
                        case "NT 6.2":
                            return "8";
                        case "NT 6.3":
                            return "8.1";
                        case "NT 10.0":
                            return "10";
                        default:
                            return;
                    }
                }, e.getMacOSVersionName = function(e) {
                    var t = e.split(".").splice(0, 2).map(function(e) {
                        return parseInt(e, 10) || 0;
                    });
                    if (t.push(0), 10 === t[0]) switch(t[1]){
                        case 5:
                            return "Leopard";
                        case 6:
                            return "Snow Leopard";
                        case 7:
                            return "Lion";
                        case 8:
                            return "Mountain Lion";
                        case 9:
                            return "Mavericks";
                        case 10:
                            return "Yosemite";
                        case 11:
                            return "El Capitan";
                        case 12:
                            return "Sierra";
                        case 13:
                            return "High Sierra";
                        case 14:
                            return "Mojave";
                        case 15:
                            return "Catalina";
                        default:
                            return;
                    }
                }, e.getAndroidVersionName = function(e) {
                    var t = e.split(".").splice(0, 2).map(function(e) {
                        return parseInt(e, 10) || 0;
                    });
                    if (t.push(0), !(1 === t[0] && t[1] < 5)) return 1 === t[0] && t[1] < 6 ? "Cupcake" : 1 === t[0] && t[1] >= 6 ? "Donut" : 2 === t[0] && t[1] < 2 ? "Eclair" : 2 === t[0] && 2 === t[1] ? "Froyo" : 2 === t[0] && t[1] > 2 ? "Gingerbread" : 3 === t[0] ? "Honeycomb" : 4 === t[0] && t[1] < 1 ? "Ice Cream Sandwich" : 4 === t[0] && t[1] < 4 ? "Jelly Bean" : 4 === t[0] && t[1] >= 4 ? "KitKat" : 5 === t[0] ? "Lollipop" : 6 === t[0] ? "Marshmallow" : 7 === t[0] ? "Nougat" : 8 === t[0] ? "Oreo" : 9 === t[0] ? "Pie" : void 0;
                }, e.getVersionPrecision = function(e) {
                    return e.split(".").length;
                }, e.compareVersions = function(t, r, n) {
                    void 0 === n && (n = !1);
                    var i = e.getVersionPrecision(t), s = e.getVersionPrecision(r), a = Math.max(i, s), o = 0, u = e.map([
                        t,
                        r
                    ], function(t) {
                        var r = a - e.getVersionPrecision(t), n = t + new Array(r + 1).join(".0");
                        return e.map(n.split("."), function(e) {
                            return new Array(20 - e.length).join("0") + e;
                        }).reverse();
                    });
                    for(n && (o = a - Math.min(i, s)), a -= 1; a >= o;){
                        if (u[0][a] > u[1][a]) return 1;
                        if (u[0][a] === u[1][a]) {
                            if (a === o) return 0;
                            a -= 1;
                        } else if (u[0][a] < u[1][a]) return -1;
                    }
                }, e.map = function(e, t) {
                    var r, n = [];
                    if (Array.prototype.map) return Array.prototype.map.call(e, t);
                    for(r = 0; r < e.length; r += 1)n.push(t(e[r]));
                    return n;
                }, e.find = function(e, t) {
                    var r, n;
                    if (Array.prototype.find) return Array.prototype.find.call(e, t);
                    for(r = 0, n = e.length; r < n; r += 1){
                        var i = e[r];
                        if (t(i, r)) return i;
                    }
                }, e.assign = function(e) {
                    for(var t, r, n = e, i = arguments.length, s = new Array(i > 1 ? i - 1 : 0), a = 1; a < i; a++)s[a - 1] = arguments[a];
                    if (Object.assign) return Object.assign.apply(Object, [
                        e
                    ].concat(s));
                    var o = function() {
                        var e = s[t];
                        "object" == typeof e && null !== e && Object.keys(e).forEach(function(t) {
                            n[t] = e[t];
                        });
                    };
                    for(t = 0, r = s.length; t < r; t += 1)o();
                    return e;
                }, e.getBrowserAlias = function(e) {
                    return n.BROWSER_ALIASES_MAP[e];
                }, e.getBrowserTypeByAlias = function(e) {
                    return n.BROWSER_MAP[e] || "";
                }, e;
            }();
            t.default = i, e.exports = t.default;
        },
        18: function(e, t, r) {
            "use strict";
            t.__esModule = !0, t.ENGINE_MAP = t.OS_MAP = t.PLATFORMS_MAP = t.BROWSER_MAP = t.BROWSER_ALIASES_MAP = void 0;
            t.BROWSER_ALIASES_MAP = {
                "Amazon Silk": "amazon_silk",
                "Android Browser": "android",
                Bada: "bada",
                BlackBerry: "blackberry",
                Chrome: "chrome",
                Chromium: "chromium",
                Electron: "electron",
                Epiphany: "epiphany",
                Firefox: "firefox",
                Focus: "focus",
                Generic: "generic",
                "Google Search": "google_search",
                Googlebot: "googlebot",
                "Internet Explorer": "ie",
                "K-Meleon": "k_meleon",
                Maxthon: "maxthon",
                "Microsoft Edge": "edge",
                "MZ Browser": "mz",
                "NAVER Whale Browser": "naver",
                Opera: "opera",
                "Opera Coast": "opera_coast",
                PhantomJS: "phantomjs",
                Puffin: "puffin",
                QupZilla: "qupzilla",
                QQ: "qq",
                QQLite: "qqlite",
                Safari: "safari",
                Sailfish: "sailfish",
                "Samsung Internet for Android": "samsung_internet",
                SeaMonkey: "seamonkey",
                Sleipnir: "sleipnir",
                Swing: "swing",
                Tizen: "tizen",
                "UC Browser": "uc",
                Vivaldi: "vivaldi",
                "WebOS Browser": "webos",
                WeChat: "wechat",
                "Yandex Browser": "yandex",
                Roku: "roku"
            };
            t.BROWSER_MAP = {
                amazon_silk: "Amazon Silk",
                android: "Android Browser",
                bada: "Bada",
                blackberry: "BlackBerry",
                chrome: "Chrome",
                chromium: "Chromium",
                electron: "Electron",
                epiphany: "Epiphany",
                firefox: "Firefox",
                focus: "Focus",
                generic: "Generic",
                googlebot: "Googlebot",
                google_search: "Google Search",
                ie: "Internet Explorer",
                k_meleon: "K-Meleon",
                maxthon: "Maxthon",
                edge: "Microsoft Edge",
                mz: "MZ Browser",
                naver: "NAVER Whale Browser",
                opera: "Opera",
                opera_coast: "Opera Coast",
                phantomjs: "PhantomJS",
                puffin: "Puffin",
                qupzilla: "QupZilla",
                qq: "QQ Browser",
                qqlite: "QQ Browser Lite",
                safari: "Safari",
                sailfish: "Sailfish",
                samsung_internet: "Samsung Internet for Android",
                seamonkey: "SeaMonkey",
                sleipnir: "Sleipnir",
                swing: "Swing",
                tizen: "Tizen",
                uc: "UC Browser",
                vivaldi: "Vivaldi",
                webos: "WebOS Browser",
                wechat: "WeChat",
                yandex: "Yandex Browser"
            };
            t.PLATFORMS_MAP = {
                tablet: "tablet",
                mobile: "mobile",
                desktop: "desktop",
                tv: "tv"
            };
            t.OS_MAP = {
                WindowsPhone: "Windows Phone",
                Windows: "Windows",
                MacOS: "macOS",
                iOS: "iOS",
                Android: "Android",
                WebOS: "WebOS",
                BlackBerry: "BlackBerry",
                Bada: "Bada",
                Tizen: "Tizen",
                Linux: "Linux",
                ChromeOS: "Chrome OS",
                PlayStation4: "PlayStation 4",
                Roku: "Roku"
            };
            t.ENGINE_MAP = {
                EdgeHTML: "EdgeHTML",
                Blink: "Blink",
                Trident: "Trident",
                Presto: "Presto",
                Gecko: "Gecko",
                WebKit: "WebKit"
            };
        },
        90: function(e, t, r) {
            "use strict";
            t.__esModule = !0, t.default = void 0;
            var n, i = (n = r(91)) && n.__esModule ? n : {
                default: n
            }, s = r(18);
            function a(e, t) {
                for(var r = 0; r < t.length; r++){
                    var n = t[r];
                    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
                }
            }
            var o = function() {
                function e() {}
                var t, r, n;
                return e.getParser = function(e, t) {
                    if (void 0 === t && (t = !1), "string" != typeof e) throw new Error("UserAgent should be a string");
                    return new i.default(e, t);
                }, e.parse = function(e) {
                    return new i.default(e).getResult();
                }, t = e, n = [
                    {
                        key: "BROWSER_MAP",
                        get: function() {
                            return s.BROWSER_MAP;
                        }
                    },
                    {
                        key: "ENGINE_MAP",
                        get: function() {
                            return s.ENGINE_MAP;
                        }
                    },
                    {
                        key: "OS_MAP",
                        get: function() {
                            return s.OS_MAP;
                        }
                    },
                    {
                        key: "PLATFORMS_MAP",
                        get: function() {
                            return s.PLATFORMS_MAP;
                        }
                    }
                ], r = null, n && a(t, n), e;
            }();
            t.default = o, e.exports = t.default;
        },
        91: function(e, t, r) {
            "use strict";
            t.__esModule = !0, t.default = void 0;
            var n = u(r(92)), i = u(r(93)), s = u(r(94)), a = u(r(95)), o = u(r(17));
            function u(e) {
                return e && e.__esModule ? e : {
                    default: e
                };
            }
            var d = function() {
                function e(e, t) {
                    if (void 0 === t && (t = !1), null == e || "" === e) throw new Error("UserAgent parameter can't be empty");
                    this._ua = e, this.parsedResult = {}, !0 !== t && this.parse();
                }
                var t = e.prototype;
                return t.getUA = function() {
                    return this._ua;
                }, t.test = function(e) {
                    return e.test(this._ua);
                }, t.parseBrowser = function() {
                    var e = this;
                    this.parsedResult.browser = {};
                    var t = o.default.find(n.default, function(t) {
                        if ("function" == typeof t.test) return t.test(e);
                        if (t.test instanceof Array) return t.test.some(function(t) {
                            return e.test(t);
                        });
                        throw new Error("Browser's test function is not valid");
                    });
                    return t && (this.parsedResult.browser = t.describe(this.getUA())), this.parsedResult.browser;
                }, t.getBrowser = function() {
                    return this.parsedResult.browser ? this.parsedResult.browser : this.parseBrowser();
                }, t.getBrowserName = function(e) {
                    return e ? String(this.getBrowser().name).toLowerCase() || "" : this.getBrowser().name || "";
                }, t.getBrowserVersion = function() {
                    return this.getBrowser().version;
                }, t.getOS = function() {
                    return this.parsedResult.os ? this.parsedResult.os : this.parseOS();
                }, t.parseOS = function() {
                    var e = this;
                    this.parsedResult.os = {};
                    var t = o.default.find(i.default, function(t) {
                        if ("function" == typeof t.test) return t.test(e);
                        if (t.test instanceof Array) return t.test.some(function(t) {
                            return e.test(t);
                        });
                        throw new Error("Browser's test function is not valid");
                    });
                    return t && (this.parsedResult.os = t.describe(this.getUA())), this.parsedResult.os;
                }, t.getOSName = function(e) {
                    var t = this.getOS().name;
                    return e ? String(t).toLowerCase() || "" : t || "";
                }, t.getOSVersion = function() {
                    return this.getOS().version;
                }, t.getPlatform = function() {
                    return this.parsedResult.platform ? this.parsedResult.platform : this.parsePlatform();
                }, t.getPlatformType = function(e) {
                    void 0 === e && (e = !1);
                    var t = this.getPlatform().type;
                    return e ? String(t).toLowerCase() || "" : t || "";
                }, t.parsePlatform = function() {
                    var e = this;
                    this.parsedResult.platform = {};
                    var t = o.default.find(s.default, function(t) {
                        if ("function" == typeof t.test) return t.test(e);
                        if (t.test instanceof Array) return t.test.some(function(t) {
                            return e.test(t);
                        });
                        throw new Error("Browser's test function is not valid");
                    });
                    return t && (this.parsedResult.platform = t.describe(this.getUA())), this.parsedResult.platform;
                }, t.getEngine = function() {
                    return this.parsedResult.engine ? this.parsedResult.engine : this.parseEngine();
                }, t.getEngineName = function(e) {
                    return e ? String(this.getEngine().name).toLowerCase() || "" : this.getEngine().name || "";
                }, t.parseEngine = function() {
                    var e = this;
                    this.parsedResult.engine = {};
                    var t = o.default.find(a.default, function(t) {
                        if ("function" == typeof t.test) return t.test(e);
                        if (t.test instanceof Array) return t.test.some(function(t) {
                            return e.test(t);
                        });
                        throw new Error("Browser's test function is not valid");
                    });
                    return t && (this.parsedResult.engine = t.describe(this.getUA())), this.parsedResult.engine;
                }, t.parse = function() {
                    return this.parseBrowser(), this.parseOS(), this.parsePlatform(), this.parseEngine(), this;
                }, t.getResult = function() {
                    return o.default.assign({}, this.parsedResult);
                }, t.satisfies = function(e) {
                    var t = this, r = {}, n = 0, i = {}, s = 0;
                    if (Object.keys(e).forEach(function(t) {
                        var a = e[t];
                        "string" == typeof a ? (i[t] = a, s += 1) : "object" == typeof a && (r[t] = a, n += 1);
                    }), n > 0) {
                        var a = Object.keys(r), u = o.default.find(a, function(e) {
                            return t.isOS(e);
                        });
                        if (u) {
                            var d = this.satisfies(r[u]);
                            if (void 0 !== d) return d;
                        }
                        var c = o.default.find(a, function(e) {
                            return t.isPlatform(e);
                        });
                        if (c) {
                            var f = this.satisfies(r[c]);
                            if (void 0 !== f) return f;
                        }
                    }
                    if (s > 0) {
                        var l = Object.keys(i), h = o.default.find(l, function(e) {
                            return t.isBrowser(e, !0);
                        });
                        if (void 0 !== h) return this.compareVersion(i[h]);
                    }
                }, t.isBrowser = function(e, t) {
                    void 0 === t && (t = !1);
                    var r = this.getBrowserName().toLowerCase(), n = e.toLowerCase(), i = o.default.getBrowserTypeByAlias(n);
                    return t && i && (n = i.toLowerCase()), n === r;
                }, t.compareVersion = function(e) {
                    var t = [
                        0
                    ], r = e, n = !1, i = this.getBrowserVersion();
                    if ("string" == typeof i) return ">" === e[0] || "<" === e[0] ? (r = e.substr(1), "=" === e[1] ? (n = !0, r = e.substr(2)) : t = [], ">" === e[0] ? t.push(1) : t.push(-1)) : "=" === e[0] ? r = e.substr(1) : "~" === e[0] && (n = !0, r = e.substr(1)), t.indexOf(o.default.compareVersions(i, r, n)) > -1;
                }, t.isOS = function(e) {
                    return this.getOSName(!0) === String(e).toLowerCase();
                }, t.isPlatform = function(e) {
                    return this.getPlatformType(!0) === String(e).toLowerCase();
                }, t.isEngine = function(e) {
                    return this.getEngineName(!0) === String(e).toLowerCase();
                }, t.is = function(e, t) {
                    return void 0 === t && (t = !1), this.isBrowser(e, t) || this.isOS(e) || this.isPlatform(e);
                }, t.some = function(e) {
                    var t = this;
                    return void 0 === e && (e = []), e.some(function(e) {
                        return t.is(e);
                    });
                }, e;
            }();
            t.default = d, e.exports = t.default;
        },
        92: function(e, t, r) {
            "use strict";
            t.__esModule = !0, t.default = void 0;
            var n, i = (n = r(17)) && n.__esModule ? n : {
                default: n
            };
            var s = /version\/(\d+(\.?_?\d+)+)/i, a = [
                {
                    test: [
                        /googlebot/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Googlebot"
                        }, r = i.default.getFirstMatch(/googlebot\/(\d+(\.\d+))/i, e) || i.default.getFirstMatch(s, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /opera/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Opera"
                        }, r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:opera)[\s/](\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /opr\/|opios/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Opera"
                        }, r = i.default.getFirstMatch(/(?:opr|opios)[\s/](\S+)/i, e) || i.default.getFirstMatch(s, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /SamsungBrowser/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Samsung Internet for Android"
                        }, r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:SamsungBrowser)[\s/](\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /Whale/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "NAVER Whale Browser"
                        }, r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:whale)[\s/](\d+(?:\.\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /MZBrowser/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "MZ Browser"
                        }, r = i.default.getFirstMatch(/(?:MZBrowser)[\s/](\d+(?:\.\d+)+)/i, e) || i.default.getFirstMatch(s, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /focus/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Focus"
                        }, r = i.default.getFirstMatch(/(?:focus)[\s/](\d+(?:\.\d+)+)/i, e) || i.default.getFirstMatch(s, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /swing/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Swing"
                        }, r = i.default.getFirstMatch(/(?:swing)[\s/](\d+(?:\.\d+)+)/i, e) || i.default.getFirstMatch(s, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /coast/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Opera Coast"
                        }, r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:coast)[\s/](\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /opt\/\d+(?:.?_?\d+)+/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Opera Touch"
                        }, r = i.default.getFirstMatch(/(?:opt)[\s/](\d+(\.?_?\d+)+)/i, e) || i.default.getFirstMatch(s, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /yabrowser/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Yandex Browser"
                        }, r = i.default.getFirstMatch(/(?:yabrowser)[\s/](\d+(\.?_?\d+)+)/i, e) || i.default.getFirstMatch(s, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /ucbrowser/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "UC Browser"
                        }, r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:ucbrowser)[\s/](\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /Maxthon|mxios/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Maxthon"
                        }, r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:Maxthon|mxios)[\s/](\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /epiphany/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Epiphany"
                        }, r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:epiphany)[\s/](\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /puffin/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Puffin"
                        }, r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:puffin)[\s/](\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /sleipnir/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Sleipnir"
                        }, r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:sleipnir)[\s/](\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /k-meleon/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "K-Meleon"
                        }, r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:k-meleon)[\s/](\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /micromessenger/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "WeChat"
                        }, r = i.default.getFirstMatch(/(?:micromessenger)[\s/](\d+(\.?_?\d+)+)/i, e) || i.default.getFirstMatch(s, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /qqbrowser/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: /qqbrowserlite/i.test(e) ? "QQ Browser Lite" : "QQ Browser"
                        }, r = i.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\d+(\.?_?\d+)+)/i, e) || i.default.getFirstMatch(s, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /msie|trident/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Internet Explorer"
                        }, r = i.default.getFirstMatch(/(?:msie |rv:)(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /\sedg\//i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Microsoft Edge"
                        }, r = i.default.getFirstMatch(/\sedg\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /edg([ea]|ios)/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Microsoft Edge"
                        }, r = i.default.getSecondMatch(/edg([ea]|ios)\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /vivaldi/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Vivaldi"
                        }, r = i.default.getFirstMatch(/vivaldi\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /seamonkey/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "SeaMonkey"
                        }, r = i.default.getFirstMatch(/seamonkey\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /sailfish/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Sailfish"
                        }, r = i.default.getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /silk/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Amazon Silk"
                        }, r = i.default.getFirstMatch(/silk\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /phantom/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "PhantomJS"
                        }, r = i.default.getFirstMatch(/phantomjs\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /slimerjs/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "SlimerJS"
                        }, r = i.default.getFirstMatch(/slimerjs\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /blackberry|\bbb\d+/i,
                        /rim\stablet/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "BlackBerry"
                        }, r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/blackberry[\d]+\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /(web|hpw)[o0]s/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "WebOS Browser"
                        }, r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /bada/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Bada"
                        }, r = i.default.getFirstMatch(/dolfin\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /tizen/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Tizen"
                        }, r = i.default.getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.?_?\d+)+)/i, e) || i.default.getFirstMatch(s, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /qupzilla/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "QupZilla"
                        }, r = i.default.getFirstMatch(/(?:qupzilla)[\s/](\d+(\.?_?\d+)+)/i, e) || i.default.getFirstMatch(s, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /firefox|iceweasel|fxios/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Firefox"
                        }, r = i.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\s/](\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /electron/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Electron"
                        }, r = i.default.getFirstMatch(/(?:electron)\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /MiuiBrowser/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Miui"
                        }, r = i.default.getFirstMatch(/(?:MiuiBrowser)[\s/](\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /chromium/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Chromium"
                        }, r = i.default.getFirstMatch(/(?:chromium)[\s/](\d+(\.?_?\d+)+)/i, e) || i.default.getFirstMatch(s, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /chrome|crios|crmo/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Chrome"
                        }, r = i.default.getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /GSA/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Google Search"
                        }, r = i.default.getFirstMatch(/(?:GSA)\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: function(e) {
                        var t = !e.test(/like android/i), r = e.test(/android/i);
                        return t && r;
                    },
                    describe: function(e) {
                        var t = {
                            name: "Android Browser"
                        }, r = i.default.getFirstMatch(s, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /playstation 4/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "PlayStation 4"
                        }, r = i.default.getFirstMatch(s, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /safari|applewebkit/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Safari"
                        }, r = i.default.getFirstMatch(s, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /.*/i
                    ],
                    describe: function(e) {
                        var t = -1 !== e.search("\\(") ? /^(.*)\/(.*)[ \t]\((.*)/ : /^(.*)\/(.*) /;
                        return {
                            name: i.default.getFirstMatch(t, e),
                            version: i.default.getSecondMatch(t, e)
                        };
                    }
                }
            ];
            t.default = a, e.exports = t.default;
        },
        93: function(e, t, r) {
            "use strict";
            t.__esModule = !0, t.default = void 0;
            var n, i = (n = r(17)) && n.__esModule ? n : {
                default: n
            }, s = r(18);
            var a = [
                {
                    test: [
                        /Roku\/DVP/
                    ],
                    describe: function(e) {
                        var t = i.default.getFirstMatch(/Roku\/DVP-(\d+\.\d+)/i, e);
                        return {
                            name: s.OS_MAP.Roku,
                            version: t
                        };
                    }
                },
                {
                    test: [
                        /windows phone/i
                    ],
                    describe: function(e) {
                        var t = i.default.getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i, e);
                        return {
                            name: s.OS_MAP.WindowsPhone,
                            version: t
                        };
                    }
                },
                {
                    test: [
                        /windows /i
                    ],
                    describe: function(e) {
                        var t = i.default.getFirstMatch(/Windows ((NT|XP)( \d\d?.\d)?)/i, e), r = i.default.getWindowsVersionName(t);
                        return {
                            name: s.OS_MAP.Windows,
                            version: t,
                            versionName: r
                        };
                    }
                },
                {
                    test: [
                        /Macintosh(.*?) FxiOS(.*?)\//
                    ],
                    describe: function(e) {
                        var t = {
                            name: s.OS_MAP.iOS
                        }, r = i.default.getSecondMatch(/(Version\/)(\d[\d.]+)/, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /macintosh/i
                    ],
                    describe: function(e) {
                        var t = i.default.getFirstMatch(/mac os x (\d+(\.?_?\d+)+)/i, e).replace(/[_\s]/g, "."), r = i.default.getMacOSVersionName(t), n = {
                            name: s.OS_MAP.MacOS,
                            version: t
                        };
                        return r && (n.versionName = r), n;
                    }
                },
                {
                    test: [
                        /(ipod|iphone|ipad)/i
                    ],
                    describe: function(e) {
                        var t = i.default.getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i, e).replace(/[_\s]/g, ".");
                        return {
                            name: s.OS_MAP.iOS,
                            version: t
                        };
                    }
                },
                {
                    test: function(e) {
                        var t = !e.test(/like android/i), r = e.test(/android/i);
                        return t && r;
                    },
                    describe: function(e) {
                        var t = i.default.getFirstMatch(/android[\s/-](\d+(\.\d+)*)/i, e), r = i.default.getAndroidVersionName(t), n = {
                            name: s.OS_MAP.Android,
                            version: t
                        };
                        return r && (n.versionName = r), n;
                    }
                },
                {
                    test: [
                        /(web|hpw)[o0]s/i
                    ],
                    describe: function(e) {
                        var t = i.default.getFirstMatch(/(?:web|hpw)[o0]s\/(\d+(\.\d+)*)/i, e), r = {
                            name: s.OS_MAP.WebOS
                        };
                        return t && t.length && (r.version = t), r;
                    }
                },
                {
                    test: [
                        /blackberry|\bbb\d+/i,
                        /rim\stablet/i
                    ],
                    describe: function(e) {
                        var t = i.default.getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i, e) || i.default.getFirstMatch(/blackberry\d+\/(\d+([_\s]\d+)*)/i, e) || i.default.getFirstMatch(/\bbb(\d+)/i, e);
                        return {
                            name: s.OS_MAP.BlackBerry,
                            version: t
                        };
                    }
                },
                {
                    test: [
                        /bada/i
                    ],
                    describe: function(e) {
                        var t = i.default.getFirstMatch(/bada\/(\d+(\.\d+)*)/i, e);
                        return {
                            name: s.OS_MAP.Bada,
                            version: t
                        };
                    }
                },
                {
                    test: [
                        /tizen/i
                    ],
                    describe: function(e) {
                        var t = i.default.getFirstMatch(/tizen[/\s](\d+(\.\d+)*)/i, e);
                        return {
                            name: s.OS_MAP.Tizen,
                            version: t
                        };
                    }
                },
                {
                    test: [
                        /linux/i
                    ],
                    describe: function() {
                        return {
                            name: s.OS_MAP.Linux
                        };
                    }
                },
                {
                    test: [
                        /CrOS/
                    ],
                    describe: function() {
                        return {
                            name: s.OS_MAP.ChromeOS
                        };
                    }
                },
                {
                    test: [
                        /PlayStation 4/
                    ],
                    describe: function(e) {
                        var t = i.default.getFirstMatch(/PlayStation 4[/\s](\d+(\.\d+)*)/i, e);
                        return {
                            name: s.OS_MAP.PlayStation4,
                            version: t
                        };
                    }
                }
            ];
            t.default = a, e.exports = t.default;
        },
        94: function(e, t, r) {
            "use strict";
            t.__esModule = !0, t.default = void 0;
            var n, i = (n = r(17)) && n.__esModule ? n : {
                default: n
            }, s = r(18);
            var a = [
                {
                    test: [
                        /googlebot/i
                    ],
                    describe: function() {
                        return {
                            type: "bot",
                            vendor: "Google"
                        };
                    }
                },
                {
                    test: [
                        /huawei/i
                    ],
                    describe: function(e) {
                        var t = i.default.getFirstMatch(/(can-l01)/i, e) && "Nova", r = {
                            type: s.PLATFORMS_MAP.mobile,
                            vendor: "Huawei"
                        };
                        return t && (r.model = t), r;
                    }
                },
                {
                    test: [
                        /nexus\s*(?:7|8|9|10).*/i
                    ],
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.tablet,
                            vendor: "Nexus"
                        };
                    }
                },
                {
                    test: [
                        /ipad/i
                    ],
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.tablet,
                            vendor: "Apple",
                            model: "iPad"
                        };
                    }
                },
                {
                    test: [
                        /Macintosh(.*?) FxiOS(.*?)\//
                    ],
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.tablet,
                            vendor: "Apple",
                            model: "iPad"
                        };
                    }
                },
                {
                    test: [
                        /kftt build/i
                    ],
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.tablet,
                            vendor: "Amazon",
                            model: "Kindle Fire HD 7"
                        };
                    }
                },
                {
                    test: [
                        /silk/i
                    ],
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.tablet,
                            vendor: "Amazon"
                        };
                    }
                },
                {
                    test: [
                        /tablet(?! pc)/i
                    ],
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.tablet
                        };
                    }
                },
                {
                    test: function(e) {
                        var t = e.test(/ipod|iphone/i), r = e.test(/like (ipod|iphone)/i);
                        return t && !r;
                    },
                    describe: function(e) {
                        var t = i.default.getFirstMatch(/(ipod|iphone)/i, e);
                        return {
                            type: s.PLATFORMS_MAP.mobile,
                            vendor: "Apple",
                            model: t
                        };
                    }
                },
                {
                    test: [
                        /nexus\s*[0-6].*/i,
                        /galaxy nexus/i
                    ],
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.mobile,
                            vendor: "Nexus"
                        };
                    }
                },
                {
                    test: [
                        /[^-]mobi/i
                    ],
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.mobile
                        };
                    }
                },
                {
                    test: function(e) {
                        return "blackberry" === e.getBrowserName(!0);
                    },
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.mobile,
                            vendor: "BlackBerry"
                        };
                    }
                },
                {
                    test: function(e) {
                        return "bada" === e.getBrowserName(!0);
                    },
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.mobile
                        };
                    }
                },
                {
                    test: function(e) {
                        return "windows phone" === e.getBrowserName();
                    },
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.mobile,
                            vendor: "Microsoft"
                        };
                    }
                },
                {
                    test: function(e) {
                        var t = Number(String(e.getOSVersion()).split(".")[0]);
                        return "android" === e.getOSName(!0) && t >= 3;
                    },
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.tablet
                        };
                    }
                },
                {
                    test: function(e) {
                        return "android" === e.getOSName(!0);
                    },
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.mobile
                        };
                    }
                },
                {
                    test: function(e) {
                        return "macos" === e.getOSName(!0);
                    },
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.desktop,
                            vendor: "Apple"
                        };
                    }
                },
                {
                    test: function(e) {
                        return "windows" === e.getOSName(!0);
                    },
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.desktop
                        };
                    }
                },
                {
                    test: function(e) {
                        return "linux" === e.getOSName(!0);
                    },
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.desktop
                        };
                    }
                },
                {
                    test: function(e) {
                        return "playstation 4" === e.getOSName(!0);
                    },
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.tv
                        };
                    }
                },
                {
                    test: function(e) {
                        return "roku" === e.getOSName(!0);
                    },
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.tv
                        };
                    }
                }
            ];
            t.default = a, e.exports = t.default;
        },
        95: function(e, t, r) {
            "use strict";
            t.__esModule = !0, t.default = void 0;
            var n, i = (n = r(17)) && n.__esModule ? n : {
                default: n
            }, s = r(18);
            var a = [
                {
                    test: function(e) {
                        return "microsoft edge" === e.getBrowserName(!0);
                    },
                    describe: function(e) {
                        if (/\sedg\//i.test(e)) return {
                            name: s.ENGINE_MAP.Blink
                        };
                        var t = i.default.getFirstMatch(/edge\/(\d+(\.?_?\d+)+)/i, e);
                        return {
                            name: s.ENGINE_MAP.EdgeHTML,
                            version: t
                        };
                    }
                },
                {
                    test: [
                        /trident/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: s.ENGINE_MAP.Trident
                        }, r = i.default.getFirstMatch(/trident\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: function(e) {
                        return e.test(/presto/i);
                    },
                    describe: function(e) {
                        var t = {
                            name: s.ENGINE_MAP.Presto
                        }, r = i.default.getFirstMatch(/presto\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: function(e) {
                        var t = e.test(/gecko/i), r = e.test(/like gecko/i);
                        return t && !r;
                    },
                    describe: function(e) {
                        var t = {
                            name: s.ENGINE_MAP.Gecko
                        }, r = i.default.getFirstMatch(/gecko\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /(apple)?webkit\/537\.36/i
                    ],
                    describe: function() {
                        return {
                            name: s.ENGINE_MAP.Blink
                        };
                    }
                },
                {
                    test: [
                        /(apple)?webkit/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: s.ENGINE_MAP.WebKit
                        }, r = i.default.getFirstMatch(/webkit\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                }
            ];
            t.default = a, e.exports = t.default;
        }
    });
});

},{}],"3tcwg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ClientSharedValues", ()=>ClientSharedValues);
var _endpoints = require("./endpoints");
var _urlParser = require("@aws-sdk/url-parser");
var ClientSharedValues = {
    apiVersion: "2014-03-28",
    disableHostPrefix: false,
    logger: {},
    regionInfoProvider: (0, _endpoints.defaultRegionInfoProvider),
    serviceId: "CloudWatch Logs",
    urlParser: (0, _urlParser.parseUrl)
};

},{"./endpoints":"8dShU","@aws-sdk/url-parser":"aIEzl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8dShU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "defaultRegionInfoProvider", ()=>defaultRegionInfoProvider);
var _tslib = require("tslib");
// Partition default templates
var AWS_TEMPLATE = "logs.{region}.amazonaws.com";
var AWS_CN_TEMPLATE = "logs.{region}.amazonaws.com.cn";
var AWS_ISO_TEMPLATE = "logs.{region}.c2s.ic.gov";
var AWS_ISO_B_TEMPLATE = "logs.{region}.sc2s.sgov.gov";
var AWS_US_GOV_TEMPLATE = "logs.{region}.amazonaws.com";
// Partition regions
var AWS_REGIONS = new Set([
    "af-south-1",
    "ap-east-1",
    "ap-northeast-1",
    "ap-northeast-2",
    "ap-south-1",
    "ap-southeast-1",
    "ap-southeast-2",
    "ca-central-1",
    "eu-central-1",
    "eu-north-1",
    "eu-south-1",
    "eu-west-1",
    "eu-west-2",
    "eu-west-3",
    "me-south-1",
    "sa-east-1",
    "us-east-1",
    "us-east-2",
    "us-west-1",
    "us-west-2"
]);
var AWS_CN_REGIONS = new Set([
    "cn-north-1",
    "cn-northwest-1"
]);
var AWS_ISO_REGIONS = new Set([
    "us-iso-east-1"
]);
var AWS_ISO_B_REGIONS = new Set([
    "us-isob-east-1"
]);
var AWS_US_GOV_REGIONS = new Set([
    "us-gov-east-1",
    "us-gov-west-1"
]);
var defaultRegionInfoProvider = function(region, options) {
    var regionInfo = undefined;
    switch(region){
        // First, try to match exact region names.
        case "af-south-1":
            regionInfo = {
                hostname: "logs.af-south-1.amazonaws.com",
                partition: "aws"
            };
            break;
        case "ap-east-1":
            regionInfo = {
                hostname: "logs.ap-east-1.amazonaws.com",
                partition: "aws"
            };
            break;
        case "ap-northeast-1":
            regionInfo = {
                hostname: "logs.ap-northeast-1.amazonaws.com",
                partition: "aws"
            };
            break;
        case "ap-northeast-2":
            regionInfo = {
                hostname: "logs.ap-northeast-2.amazonaws.com",
                partition: "aws"
            };
            break;
        case "ap-south-1":
            regionInfo = {
                hostname: "logs.ap-south-1.amazonaws.com",
                partition: "aws"
            };
            break;
        case "ap-southeast-1":
            regionInfo = {
                hostname: "logs.ap-southeast-1.amazonaws.com",
                partition: "aws"
            };
            break;
        case "ap-southeast-2":
            regionInfo = {
                hostname: "logs.ap-southeast-2.amazonaws.com",
                partition: "aws"
            };
            break;
        case "ca-central-1":
            regionInfo = {
                hostname: "logs.ca-central-1.amazonaws.com",
                partition: "aws"
            };
            break;
        case "cn-north-1":
            regionInfo = {
                hostname: "logs.cn-north-1.amazonaws.com.cn",
                partition: "aws-cn"
            };
            break;
        case "cn-northwest-1":
            regionInfo = {
                hostname: "logs.cn-northwest-1.amazonaws.com.cn",
                partition: "aws-cn"
            };
            break;
        case "eu-central-1":
            regionInfo = {
                hostname: "logs.eu-central-1.amazonaws.com",
                partition: "aws"
            };
            break;
        case "eu-north-1":
            regionInfo = {
                hostname: "logs.eu-north-1.amazonaws.com",
                partition: "aws"
            };
            break;
        case "eu-south-1":
            regionInfo = {
                hostname: "logs.eu-south-1.amazonaws.com",
                partition: "aws"
            };
            break;
        case "eu-west-1":
            regionInfo = {
                hostname: "logs.eu-west-1.amazonaws.com",
                partition: "aws"
            };
            break;
        case "eu-west-2":
            regionInfo = {
                hostname: "logs.eu-west-2.amazonaws.com",
                partition: "aws"
            };
            break;
        case "eu-west-3":
            regionInfo = {
                hostname: "logs.eu-west-3.amazonaws.com",
                partition: "aws"
            };
            break;
        case "fips-us-east-1":
            regionInfo = {
                hostname: "logs-fips.us-east-1.amazonaws.com",
                partition: "aws",
                signingRegion: "us-east-1"
            };
            break;
        case "fips-us-east-2":
            regionInfo = {
                hostname: "logs-fips.us-east-2.amazonaws.com",
                partition: "aws",
                signingRegion: "us-east-2"
            };
            break;
        case "fips-us-west-1":
            regionInfo = {
                hostname: "logs-fips.us-west-1.amazonaws.com",
                partition: "aws",
                signingRegion: "us-west-1"
            };
            break;
        case "fips-us-west-2":
            regionInfo = {
                hostname: "logs-fips.us-west-2.amazonaws.com",
                partition: "aws",
                signingRegion: "us-west-2"
            };
            break;
        case "me-south-1":
            regionInfo = {
                hostname: "logs.me-south-1.amazonaws.com",
                partition: "aws"
            };
            break;
        case "sa-east-1":
            regionInfo = {
                hostname: "logs.sa-east-1.amazonaws.com",
                partition: "aws"
            };
            break;
        case "us-east-1":
            regionInfo = {
                hostname: "logs.us-east-1.amazonaws.com",
                partition: "aws"
            };
            break;
        case "us-east-2":
            regionInfo = {
                hostname: "logs.us-east-2.amazonaws.com",
                partition: "aws"
            };
            break;
        case "us-gov-east-1":
            regionInfo = {
                hostname: "logs.us-gov-east-1.amazonaws.com",
                partition: "aws-us-gov",
                signingRegion: "us-gov-east-1"
            };
            break;
        case "us-gov-west-1":
            regionInfo = {
                hostname: "logs.us-gov-west-1.amazonaws.com",
                partition: "aws-us-gov",
                signingRegion: "us-gov-west-1"
            };
            break;
        case "us-iso-east-1":
            regionInfo = {
                hostname: "logs.us-iso-east-1.c2s.ic.gov",
                partition: "aws-iso"
            };
            break;
        case "us-isob-east-1":
            regionInfo = {
                hostname: "logs.us-isob-east-1.sc2s.sgov.gov",
                partition: "aws-iso-b"
            };
            break;
        case "us-west-1":
            regionInfo = {
                hostname: "logs.us-west-1.amazonaws.com",
                partition: "aws"
            };
            break;
        case "us-west-2":
            regionInfo = {
                hostname: "logs.us-west-2.amazonaws.com",
                partition: "aws"
            };
            break;
        // Next, try to match partition endpoints.
        default:
            if (AWS_REGIONS.has(region)) regionInfo = {
                hostname: AWS_TEMPLATE.replace("{region}", region),
                partition: "aws"
            };
            if (AWS_CN_REGIONS.has(region)) regionInfo = {
                hostname: AWS_CN_TEMPLATE.replace("{region}", region),
                partition: "aws-cn"
            };
            if (AWS_ISO_REGIONS.has(region)) regionInfo = {
                hostname: AWS_ISO_TEMPLATE.replace("{region}", region),
                partition: "aws-iso"
            };
            if (AWS_ISO_B_REGIONS.has(region)) regionInfo = {
                hostname: AWS_ISO_B_TEMPLATE.replace("{region}", region),
                partition: "aws-iso-b"
            };
            if (AWS_US_GOV_REGIONS.has(region)) regionInfo = {
                hostname: AWS_US_GOV_TEMPLATE.replace("{region}", region),
                partition: "aws-us-gov"
            };
            // Finally, assume it's an AWS partition endpoint.
            if (regionInfo === undefined) regionInfo = {
                hostname: AWS_TEMPLATE.replace("{region}", region),
                partition: "aws"
            };
    }
    return Promise.resolve((0, _tslib.__assign)({
        signingService: "logs"
    }, regionInfo));
};

},{"tslib":"lRdW5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aIEzl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "parseUrl", ()=>parseUrl);
var _querystringParser = require("@aws-sdk/querystring-parser");
var parseUrl = function(url) {
    var _a = new URL(url), hostname = _a.hostname, pathname = _a.pathname, port = _a.port, protocol = _a.protocol, search = _a.search;
    var query;
    if (search) query = (0, _querystringParser.parseQueryString)(search);
    return {
        hostname: hostname,
        port: port ? parseInt(port) : undefined,
        protocol: protocol,
        path: pathname,
        query: query
    };
};

},{"@aws-sdk/querystring-parser":"9Nn3I","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9Nn3I":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "parseQueryString", ()=>parseQueryString);
var _tslib = require("tslib");
function parseQueryString(querystring) {
    var e_1, _a;
    var query = {};
    querystring = querystring.replace(/^\?/, "");
    if (querystring) try {
        for(var _b = (0, _tslib.__values)(querystring.split("&")), _c = _b.next(); !_c.done; _c = _b.next()){
            var pair = _c.value;
            var _d = (0, _tslib.__read)(pair.split("="), 2), key = _d[0], _e = _d[1], value = _e === void 0 ? null : _e;
            key = decodeURIComponent(key);
            if (value) value = decodeURIComponent(value);
            if (!(key in query)) query[key] = value;
            else if (Array.isArray(query[key])) query[key].push(value);
            else query[key] = [
                query[key],
                value
            ];
        }
    } catch (e_1_1) {
        e_1 = {
            error: e_1_1
        };
    } finally{
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        } finally{
            if (e_1) throw e_1.error;
        }
    }
    return query;
}

},{"tslib":"bF81B","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bF81B":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cd0W3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _endpointsConfig = require("./EndpointsConfig");
parcelHelpers.exportAll(_endpointsConfig, exports);
var _regionConfig = require("./RegionConfig");
parcelHelpers.exportAll(_regionConfig, exports);

},{"./EndpointsConfig":"6dFGU","./RegionConfig":"2VMMN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6dFGU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resolveEndpointsConfig", ()=>resolveEndpointsConfig);
var _tslib = require("tslib");
var resolveEndpointsConfig = function(input) {
    var _a;
    return (0, _tslib.__assign)((0, _tslib.__assign)({}, input), {
        tls: (_a = input.tls) !== null && _a !== void 0 ? _a : true,
        endpoint: input.endpoint ? normalizeEndpoint(input) : function() {
            return getEndPointFromRegion(input);
        },
        isCustomEndpoint: input.endpoint ? true : false
    });
};
var normalizeEndpoint = function(input) {
    var endpoint = input.endpoint, urlParser = input.urlParser;
    if (typeof endpoint === "string") {
        var promisified_1 = Promise.resolve(urlParser(endpoint));
        return function() {
            return promisified_1;
        };
    } else if (typeof endpoint === "object") {
        var promisified_2 = Promise.resolve(endpoint);
        return function() {
            return promisified_2;
        };
    }
    return endpoint;
};
var getEndPointFromRegion = function(input) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var _a, tls, region, dnsHostRegex, hostname;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = input.tls, tls = _a === void 0 ? true : _a;
                    return [
                        4 /*yield*/ ,
                        input.region()
                    ];
                case 1:
                    region = _c.sent();
                    dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);
                    if (!dnsHostRegex.test(region)) throw new Error("Invalid region in client config");
                    return [
                        4 /*yield*/ ,
                        input.regionInfoProvider(region)
                    ];
                case 2:
                    hostname = ((_b = _c.sent()) !== null && _b !== void 0 ? _b : {}).hostname;
                    if (!hostname) throw new Error("Cannot resolve hostname from client config");
                    return [
                        2 /*return*/ ,
                        input.urlParser((tls ? "https:" : "http:") + "//" + hostname)
                    ];
            }
        });
    });
};

},{"tslib":"dDV07","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dDV07":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2VMMN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "REGION_ENV_NAME", ()=>REGION_ENV_NAME);
parcelHelpers.export(exports, "REGION_INI_NAME", ()=>REGION_INI_NAME);
parcelHelpers.export(exports, "NODE_REGION_CONFIG_OPTIONS", ()=>NODE_REGION_CONFIG_OPTIONS);
parcelHelpers.export(exports, "NODE_REGION_CONFIG_FILE_OPTIONS", ()=>NODE_REGION_CONFIG_FILE_OPTIONS);
parcelHelpers.export(exports, "resolveRegionConfig", ()=>resolveRegionConfig);
var _tslib = require("tslib");
var REGION_ENV_NAME = "AWS_REGION";
var REGION_INI_NAME = "region";
var NODE_REGION_CONFIG_OPTIONS = {
    environmentVariableSelector: function(env) {
        return env[REGION_ENV_NAME];
    },
    configFileSelector: function(profile) {
        return profile[REGION_INI_NAME];
    },
    default: function() {
        throw new Error("Region is missing");
    }
};
var NODE_REGION_CONFIG_FILE_OPTIONS = {
    preferredFile: "credentials"
};
var resolveRegionConfig = function(input) {
    if (!input.region) throw new Error("Region is missing");
    return (0, _tslib.__assign)((0, _tslib.__assign)({}, input), {
        region: normalizeRegion(input.region)
    });
};
var normalizeRegion = function(region) {
    if (typeof region === "string") {
        var promisified_1 = Promise.resolve(region);
        return function() {
            return promisified_1;
        };
    }
    return region;
};

},{"tslib":"dDV07","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kUr8i":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "contentLengthMiddleware", ()=>contentLengthMiddleware);
parcelHelpers.export(exports, "contentLengthMiddlewareOptions", ()=>contentLengthMiddlewareOptions);
parcelHelpers.export(exports, "getContentLengthPlugin", ()=>getContentLengthPlugin);
var _tslib = require("tslib");
var _protocolHttp = require("@aws-sdk/protocol-http");
var CONTENT_LENGTH_HEADER = "content-length";
function contentLengthMiddleware(bodyLengthChecker) {
    var _this = this;
    return function(next) {
        return function(args) {
            return (0, _tslib.__awaiter)(_this, void 0, void 0, function() {
                var request, body, headers, length;
                var _a;
                return (0, _tslib.__generator)(this, function(_b) {
                    request = args.request;
                    if ((0, _protocolHttp.HttpRequest).isInstance(request)) {
                        body = request.body, headers = request.headers;
                        if (body && Object.keys(headers).map(function(str) {
                            return str.toLowerCase();
                        }).indexOf(CONTENT_LENGTH_HEADER) === -1) {
                            length = bodyLengthChecker(body);
                            if (length !== undefined) request.headers = (0, _tslib.__assign)((0, _tslib.__assign)({}, request.headers), (_a = {}, _a[CONTENT_LENGTH_HEADER] = String(length), _a));
                        }
                    }
                    return [
                        2 /*return*/ ,
                        next((0, _tslib.__assign)((0, _tslib.__assign)({}, args), {
                            request: request
                        }))
                    ];
                });
            });
        };
    };
}
var contentLengthMiddlewareOptions = {
    step: "build",
    tags: [
        "SET_CONTENT_LENGTH",
        "CONTENT_LENGTH"
    ],
    name: "contentLengthMiddleware",
    override: true
};
var getContentLengthPlugin = function(options) {
    return {
        applyToStack: function(clientStack) {
            clientStack.add(contentLengthMiddleware(options.bodyLengthChecker), contentLengthMiddlewareOptions);
        }
    };
};

},{"tslib":"b3FUQ","@aws-sdk/protocol-http":"dbzKK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b3FUQ":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fDojh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resolveHostHeaderConfig", ()=>resolveHostHeaderConfig);
parcelHelpers.export(exports, "hostHeaderMiddleware", ()=>hostHeaderMiddleware);
parcelHelpers.export(exports, "hostHeaderMiddlewareOptions", ()=>hostHeaderMiddlewareOptions);
parcelHelpers.export(exports, "getHostHeaderPlugin", ()=>getHostHeaderPlugin);
var _tslib = require("tslib");
var _protocolHttp = require("@aws-sdk/protocol-http");
function resolveHostHeaderConfig(input) {
    return input;
}
var hostHeaderMiddleware = function(options) {
    return function(next) {
        return function(args) {
            return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
                var request, _a, handlerProtocol;
                return (0, _tslib.__generator)(this, function(_b) {
                    if (!(0, _protocolHttp.HttpRequest).isInstance(args.request)) return [
                        2 /*return*/ ,
                        next(args)
                    ];
                    request = args.request;
                    _a = (options.requestHandler.metadata || {}).handlerProtocol, handlerProtocol = _a === void 0 ? "" : _a;
                    //For H2 request, remove 'host' header and use ':authority' header instead
                    //reference: https://nodejs.org/dist/latest-v13.x/docs/api/errors.html#ERR_HTTP2_INVALID_CONNECTION_HEADERS
                    if (handlerProtocol.indexOf("h2") >= 0 && !request.headers[":authority"]) {
                        delete request.headers["host"];
                        request.headers[":authority"] = "";
                    //non-H2 request and 'host' header is not set, set the 'host' header to request's hostname.
                    } else if (!request.headers["host"]) request.headers["host"] = request.hostname;
                    return [
                        2 /*return*/ ,
                        next(args)
                    ];
                });
            });
        };
    };
};
var hostHeaderMiddlewareOptions = {
    name: "hostHeaderMiddleware",
    step: "build",
    priority: "low",
    tags: [
        "HOST"
    ],
    override: true
};
var getHostHeaderPlugin = function(options) {
    return {
        applyToStack: function(clientStack) {
            clientStack.add(hostHeaderMiddleware(options), hostHeaderMiddlewareOptions);
        }
    };
};

},{"tslib":"3d0he","@aws-sdk/protocol-http":"dbzKK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3d0he":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b6LDm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _loggerMiddleware = require("./loggerMiddleware");
parcelHelpers.exportAll(_loggerMiddleware, exports);

},{"./loggerMiddleware":"1pfff","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1pfff":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "loggerMiddleware", ()=>loggerMiddleware);
parcelHelpers.export(exports, "loggerMiddlewareOptions", ()=>loggerMiddlewareOptions);
parcelHelpers.export(exports, "getLoggerPlugin", ()=>getLoggerPlugin);
var _tslib = require("tslib");
var loggerMiddleware = function() {
    return function(next, context) {
        return function(args) {
            return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
                var clientName, commandName, inputFilterSensitiveLog, logger, outputFilterSensitiveLog, response, _a, $metadata, outputWithoutMetadata;
                return (0, _tslib.__generator)(this, function(_b) {
                    switch(_b.label){
                        case 0:
                            clientName = context.clientName, commandName = context.commandName, inputFilterSensitiveLog = context.inputFilterSensitiveLog, logger = context.logger, outputFilterSensitiveLog = context.outputFilterSensitiveLog;
                            return [
                                4 /*yield*/ ,
                                next(args)
                            ];
                        case 1:
                            response = _b.sent();
                            if (!logger) return [
                                2 /*return*/ ,
                                response
                            ];
                            if (typeof logger.info === "function") {
                                _a = response.output, $metadata = _a.$metadata, outputWithoutMetadata = (0, _tslib.__rest)(_a, [
                                    "$metadata"
                                ]);
                                logger.info({
                                    clientName: clientName,
                                    commandName: commandName,
                                    input: inputFilterSensitiveLog(args.input),
                                    output: outputFilterSensitiveLog(outputWithoutMetadata),
                                    metadata: $metadata
                                });
                            }
                            return [
                                2 /*return*/ ,
                                response
                            ];
                    }
                });
            });
        };
    };
};
var loggerMiddlewareOptions = {
    name: "loggerMiddleware",
    tags: [
        "LOGGER"
    ],
    step: "initialize",
    override: true
};
var getLoggerPlugin = function(options) {
    return {
        applyToStack: function(clientStack) {
            clientStack.add(loggerMiddleware(), loggerMiddlewareOptions);
        }
    };
};

},{"tslib":"cc3oQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cc3oQ":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7xrR2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _configurations = require("./configurations");
parcelHelpers.exportAll(_configurations, exports);
var _middleware = require("./middleware");
parcelHelpers.exportAll(_middleware, exports);

},{"./configurations":"iBrsu","./middleware":"4hxVN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iBrsu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resolveAwsAuthConfig", ()=>resolveAwsAuthConfig);
var _tslib = require("tslib");
var _signatureV4 = require("@aws-sdk/signature-v4");
function resolveAwsAuthConfig(input) {
    var _this = this;
    var credentials = input.credentials || input.credentialDefaultProvider(input);
    var normalizedCreds = normalizeProvider(credentials);
    var _a = input.signingEscapePath, signingEscapePath = _a === void 0 ? true : _a, _b = input.systemClockOffset, systemClockOffset = _b === void 0 ? input.systemClockOffset || 0 : _b, sha256 = input.sha256;
    var signer;
    if (input.signer) //if signer is supplied by user, normalize it to a function returning a promise for signer.
    signer = normalizeProvider(input.signer);
    else //construct a provider inferring signing from region.
    signer = function() {
        return normalizeProvider(input.region)().then(function(region) {
            return (0, _tslib.__awaiter)(_this, void 0, void 0, function() {
                return (0, _tslib.__generator)(this, function(_a) {
                    switch(_a.label){
                        case 0:
                            return [
                                4 /*yield*/ ,
                                input.regionInfoProvider(region)
                            ];
                        case 1:
                            return [
                                2 /*return*/ ,
                                [
                                    _a.sent() || {},
                                    region
                                ]
                            ];
                    }
                });
            });
        }).then(function(_a) {
            var _b = (0, _tslib.__read)(_a, 2), regionInfo = _b[0], region = _b[1];
            var signingRegion = regionInfo.signingRegion, signingService = regionInfo.signingService;
            //update client's singing region and signing service config if they are resolved.
            //signing region resolving order: user supplied signingRegion -> endpoints.json inferred region -> client region
            input.signingRegion = input.signingRegion || signingRegion || region;
            //signing name resolving order:
            //user supplied signingName -> endpoints.json inferred (credential scope -> model arnNamespace) -> model service id
            input.signingName = input.signingName || signingService || input.serviceId;
            return new (0, _signatureV4.SignatureV4)({
                credentials: normalizedCreds,
                region: input.signingRegion,
                service: input.signingName,
                sha256: sha256,
                uriEscapePath: signingEscapePath
            });
        });
    };
    return (0, _tslib.__assign)((0, _tslib.__assign)({}, input), {
        systemClockOffset: systemClockOffset,
        signingEscapePath: signingEscapePath,
        credentials: normalizedCreds,
        signer: signer
    });
}
function normalizeProvider(input) {
    if (typeof input === "object") {
        var promisified_1 = Promise.resolve(input);
        return function() {
            return promisified_1;
        };
    }
    return input;
}

},{"tslib":"5IeWg","@aws-sdk/signature-v4":"1wfLZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5IeWg":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1wfLZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _credentialDerivation = require("./credentialDerivation");
parcelHelpers.exportAll(_credentialDerivation, exports);
var _signatureV4 = require("./SignatureV4");
parcelHelpers.exportAll(_signatureV4, exports);

},{"./credentialDerivation":"kcQd2","./SignatureV4":"gytoI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kcQd2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Create a string describing the scope of credentials used to sign a request.
 *
 * @param shortDate The current calendar date in the form YYYYMMDD.
 * @param region    The AWS region in which the service resides.
 * @param service   The service to which the signed request is being sent.
 */ parcelHelpers.export(exports, "createScope", ()=>createScope);
parcelHelpers.export(exports, "getSigningKey", ()=>getSigningKey);
/**
 * @internal
 */ parcelHelpers.export(exports, "clearCredentialCache", ()=>clearCredentialCache);
var _tslib = require("tslib");
var _utilHexEncoding = require("@aws-sdk/util-hex-encoding");
var _constants = require("./constants");
var signingKeyCache = {};
var cacheQueue = [];
function createScope(shortDate, region, service) {
    return shortDate + "/" + region + "/" + service + "/" + (0, _constants.KEY_TYPE_IDENTIFIER);
}
var getSigningKey = function(sha256Constructor, credentials, shortDate, region, service) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var credsHash, cacheKey, key, _a, _b, signable, e_1_1;
        var e_1, _c;
        return (0, _tslib.__generator)(this, function(_d) {
            switch(_d.label){
                case 0:
                    return [
                        4 /*yield*/ ,
                        hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId)
                    ];
                case 1:
                    credsHash = _d.sent();
                    cacheKey = shortDate + ":" + region + ":" + service + ":" + (0, _utilHexEncoding.toHex)(credsHash) + ":" + credentials.sessionToken;
                    if (cacheKey in signingKeyCache) return [
                        2 /*return*/ ,
                        signingKeyCache[cacheKey]
                    ];
                    cacheQueue.push(cacheKey);
                    while(cacheQueue.length > (0, _constants.MAX_CACHE_SIZE))delete signingKeyCache[cacheQueue.shift()];
                    key = "AWS4" + credentials.secretAccessKey;
                    _d.label = 2;
                case 2:
                    _d.trys.push([
                        2,
                        7,
                        8,
                        9
                    ]);
                    _a = (0, _tslib.__values)([
                        shortDate,
                        region,
                        service,
                        (0, _constants.KEY_TYPE_IDENTIFIER)
                    ]), _b = _a.next();
                    _d.label = 3;
                case 3:
                    if (!!_b.done) return [
                        3 /*break*/ ,
                        6
                    ];
                    signable = _b.value;
                    return [
                        4 /*yield*/ ,
                        hmac(sha256Constructor, key, signable)
                    ];
                case 4:
                    key = _d.sent();
                    _d.label = 5;
                case 5:
                    _b = _a.next();
                    return [
                        3 /*break*/ ,
                        3
                    ];
                case 6:
                    return [
                        3 /*break*/ ,
                        9
                    ];
                case 7:
                    e_1_1 = _d.sent();
                    e_1 = {
                        error: e_1_1
                    };
                    return [
                        3 /*break*/ ,
                        9
                    ];
                case 8:
                    try {
                        if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                    } finally{
                        if (e_1) throw e_1.error;
                    }
                    return [
                        7 /*endfinally*/ 
                    ];
                case 9:
                    return [
                        2 /*return*/ ,
                        signingKeyCache[cacheKey] = key
                    ];
            }
        });
    });
};
function clearCredentialCache() {
    cacheQueue.length = 0;
    Object.keys(signingKeyCache).forEach(function(cacheKey) {
        delete signingKeyCache[cacheKey];
    });
}
function hmac(ctor, secret, data) {
    var hash = new ctor(secret);
    hash.update(data);
    return hash.digest();
}

},{"tslib":"4oKW1","@aws-sdk/util-hex-encoding":"37zn6","./constants":"lYFXA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4oKW1":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lYFXA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ALGORITHM_QUERY_PARAM", ()=>ALGORITHM_QUERY_PARAM);
parcelHelpers.export(exports, "CREDENTIAL_QUERY_PARAM", ()=>CREDENTIAL_QUERY_PARAM);
parcelHelpers.export(exports, "AMZ_DATE_QUERY_PARAM", ()=>AMZ_DATE_QUERY_PARAM);
parcelHelpers.export(exports, "SIGNED_HEADERS_QUERY_PARAM", ()=>SIGNED_HEADERS_QUERY_PARAM);
parcelHelpers.export(exports, "EXPIRES_QUERY_PARAM", ()=>EXPIRES_QUERY_PARAM);
parcelHelpers.export(exports, "SIGNATURE_QUERY_PARAM", ()=>SIGNATURE_QUERY_PARAM);
parcelHelpers.export(exports, "TOKEN_QUERY_PARAM", ()=>TOKEN_QUERY_PARAM);
parcelHelpers.export(exports, "AUTH_HEADER", ()=>AUTH_HEADER);
parcelHelpers.export(exports, "AMZ_DATE_HEADER", ()=>AMZ_DATE_HEADER);
parcelHelpers.export(exports, "DATE_HEADER", ()=>DATE_HEADER);
parcelHelpers.export(exports, "GENERATED_HEADERS", ()=>GENERATED_HEADERS);
parcelHelpers.export(exports, "SIGNATURE_HEADER", ()=>SIGNATURE_HEADER);
parcelHelpers.export(exports, "SHA256_HEADER", ()=>SHA256_HEADER);
parcelHelpers.export(exports, "TOKEN_HEADER", ()=>TOKEN_HEADER);
parcelHelpers.export(exports, "HOST_HEADER", ()=>HOST_HEADER);
parcelHelpers.export(exports, "ALWAYS_UNSIGNABLE_HEADERS", ()=>ALWAYS_UNSIGNABLE_HEADERS);
parcelHelpers.export(exports, "PROXY_HEADER_PATTERN", ()=>PROXY_HEADER_PATTERN);
parcelHelpers.export(exports, "SEC_HEADER_PATTERN", ()=>SEC_HEADER_PATTERN);
parcelHelpers.export(exports, "UNSIGNABLE_PATTERNS", ()=>UNSIGNABLE_PATTERNS);
parcelHelpers.export(exports, "ALGORITHM_IDENTIFIER", ()=>ALGORITHM_IDENTIFIER);
parcelHelpers.export(exports, "EVENT_ALGORITHM_IDENTIFIER", ()=>EVENT_ALGORITHM_IDENTIFIER);
parcelHelpers.export(exports, "UNSIGNED_PAYLOAD", ()=>UNSIGNED_PAYLOAD);
parcelHelpers.export(exports, "MAX_CACHE_SIZE", ()=>MAX_CACHE_SIZE);
parcelHelpers.export(exports, "KEY_TYPE_IDENTIFIER", ()=>KEY_TYPE_IDENTIFIER);
parcelHelpers.export(exports, "MAX_PRESIGNED_TTL", ()=>MAX_PRESIGNED_TTL);
var ALGORITHM_QUERY_PARAM = "X-Amz-Algorithm";
var CREDENTIAL_QUERY_PARAM = "X-Amz-Credential";
var AMZ_DATE_QUERY_PARAM = "X-Amz-Date";
var SIGNED_HEADERS_QUERY_PARAM = "X-Amz-SignedHeaders";
var EXPIRES_QUERY_PARAM = "X-Amz-Expires";
var SIGNATURE_QUERY_PARAM = "X-Amz-Signature";
var TOKEN_QUERY_PARAM = "X-Amz-Security-Token";
var AUTH_HEADER = "authorization";
var AMZ_DATE_HEADER = AMZ_DATE_QUERY_PARAM.toLowerCase();
var DATE_HEADER = "date";
var GENERATED_HEADERS = [
    AUTH_HEADER,
    AMZ_DATE_HEADER,
    DATE_HEADER
];
var SIGNATURE_HEADER = SIGNATURE_QUERY_PARAM.toLowerCase();
var SHA256_HEADER = "x-amz-content-sha256";
var TOKEN_HEADER = TOKEN_QUERY_PARAM.toLowerCase();
var HOST_HEADER = "host";
var ALWAYS_UNSIGNABLE_HEADERS = {
    authorization: true,
    "cache-control": true,
    connection: true,
    expect: true,
    from: true,
    "keep-alive": true,
    "max-forwards": true,
    pragma: true,
    referer: true,
    te: true,
    trailer: true,
    "transfer-encoding": true,
    upgrade: true,
    "user-agent": true,
    "x-amzn-trace-id": true
};
var PROXY_HEADER_PATTERN = /^proxy-/;
var SEC_HEADER_PATTERN = /^sec-/;
var UNSIGNABLE_PATTERNS = [
    /^proxy-/i,
    /^sec-/i
];
var ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256";
var EVENT_ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256-PAYLOAD";
var UNSIGNED_PAYLOAD = "UNSIGNED-PAYLOAD";
var MAX_CACHE_SIZE = 50;
var KEY_TYPE_IDENTIFIER = "aws4_request";
var MAX_PRESIGNED_TTL = 604800;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gytoI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SignatureV4", ()=>SignatureV4);
var _tslib = require("tslib");
var _utilHexEncoding = require("@aws-sdk/util-hex-encoding");
var _constants = require("./constants");
var _credentialDerivation = require("./credentialDerivation");
var _getCanonicalHeaders = require("./getCanonicalHeaders");
var _getCanonicalQuery = require("./getCanonicalQuery");
var _getPayloadHash = require("./getPayloadHash");
var _hasHeader = require("./hasHeader");
var _moveHeadersToQuery = require("./moveHeadersToQuery");
var _prepareRequest = require("./prepareRequest");
var _utilDate = require("./utilDate");
var SignatureV4 = /** @class */ function() {
    function SignatureV4(_a) {
        var applyChecksum = _a.applyChecksum, credentials = _a.credentials, region = _a.region, service = _a.service, sha256 = _a.sha256, _b = _a.uriEscapePath, uriEscapePath = _b === void 0 ? true : _b;
        this.service = service;
        this.sha256 = sha256;
        this.uriEscapePath = uriEscapePath;
        // default to true if applyChecksum isn't set
        this.applyChecksum = typeof applyChecksum === "boolean" ? applyChecksum : true;
        this.regionProvider = normalizeRegionProvider(region);
        this.credentialProvider = normalizeCredentialsProvider(credentials);
    }
    SignatureV4.prototype.presign = function(originalRequest, options) {
        if (options === void 0) options = {};
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            var _a, signingDate, _b, expiresIn, unsignableHeaders, unhoistableHeaders, signableHeaders, signingRegion, signingService, credentials, region, _c, _d, longDate, shortDate, scope, request, canonicalHeaders, _e, _f, _g, _h, _j, _k;
            return (0, _tslib.__generator)(this, function(_l) {
                switch(_l.label){
                    case 0:
                        _a = options.signingDate, signingDate = _a === void 0 ? new Date() : _a, _b = options.expiresIn, expiresIn = _b === void 0 ? 3600 : _b, unsignableHeaders = options.unsignableHeaders, unhoistableHeaders = options.unhoistableHeaders, signableHeaders = options.signableHeaders, signingRegion = options.signingRegion, signingService = options.signingService;
                        return [
                            4 /*yield*/ ,
                            this.credentialProvider()
                        ];
                    case 1:
                        credentials = _l.sent();
                        if (!(signingRegion !== null && signingRegion !== void 0)) return [
                            3 /*break*/ ,
                            2
                        ];
                        _c = signingRegion;
                        return [
                            3 /*break*/ ,
                            4
                        ];
                    case 2:
                        return [
                            4 /*yield*/ ,
                            this.regionProvider()
                        ];
                    case 3:
                        _c = _l.sent();
                        _l.label = 4;
                    case 4:
                        region = _c;
                        _d = formatDate(signingDate), longDate = _d.longDate, shortDate = _d.shortDate;
                        if (expiresIn > (0, _constants.MAX_PRESIGNED_TTL)) return [
                            2 /*return*/ ,
                            Promise.reject("Signature version 4 presigned URLs must have an expiration date less than one week in the future")
                        ];
                        scope = (0, _credentialDerivation.createScope)(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
                        request = (0, _moveHeadersToQuery.moveHeadersToQuery)((0, _prepareRequest.prepareRequest)(originalRequest), {
                            unhoistableHeaders: unhoistableHeaders
                        });
                        if (credentials.sessionToken) request.query[0, _constants.TOKEN_QUERY_PARAM] = credentials.sessionToken;
                        request.query[0, _constants.ALGORITHM_QUERY_PARAM] = (0, _constants.ALGORITHM_IDENTIFIER);
                        request.query[0, _constants.CREDENTIAL_QUERY_PARAM] = credentials.accessKeyId + "/" + scope;
                        request.query[0, _constants.AMZ_DATE_QUERY_PARAM] = longDate;
                        request.query[0, _constants.EXPIRES_QUERY_PARAM] = expiresIn.toString(10);
                        canonicalHeaders = (0, _getCanonicalHeaders.getCanonicalHeaders)(request, unsignableHeaders, signableHeaders);
                        request.query[0, _constants.SIGNED_HEADERS_QUERY_PARAM] = getCanonicalHeaderList(canonicalHeaders);
                        _e = request.query;
                        _f = (0, _constants.SIGNATURE_QUERY_PARAM);
                        _g = this.getSignature;
                        _h = [
                            longDate,
                            scope,
                            this.getSigningKey(credentials, region, shortDate, signingService)
                        ];
                        _j = this.createCanonicalRequest;
                        _k = [
                            request,
                            canonicalHeaders
                        ];
                        return [
                            4 /*yield*/ ,
                            (0, _getPayloadHash.getPayloadHash)(originalRequest, this.sha256)
                        ];
                    case 5:
                        return [
                            4 /*yield*/ ,
                            _g.apply(this, _h.concat([
                                _j.apply(this, _k.concat([
                                    _l.sent()
                                ]))
                            ]))
                        ];
                    case 6:
                        _e[_f] = _l.sent();
                        return [
                            2 /*return*/ ,
                            request
                        ];
                }
            });
        });
    };
    SignatureV4.prototype.sign = function(toSign, options) {
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            return (0, _tslib.__generator)(this, function(_a) {
                if (typeof toSign === "string") return [
                    2 /*return*/ ,
                    this.signString(toSign, options)
                ];
                else if (toSign.headers && toSign.payload) return [
                    2 /*return*/ ,
                    this.signEvent(toSign, options)
                ];
                else return [
                    2 /*return*/ ,
                    this.signRequest(toSign, options)
                ];
                return [
                    2 /*return*/ 
                ];
            });
        });
    };
    SignatureV4.prototype.signEvent = function(_a, _b) {
        var headers = _a.headers, payload = _a.payload;
        var _c = _b.signingDate, signingDate = _c === void 0 ? new Date() : _c, priorSignature = _b.priorSignature, signingRegion = _b.signingRegion, signingService = _b.signingService;
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            var region, _d, _e, shortDate, longDate, scope, hashedPayload, hash, hashedHeaders, _f, stringToSign;
            return (0, _tslib.__generator)(this, function(_g) {
                switch(_g.label){
                    case 0:
                        if (!(signingRegion !== null && signingRegion !== void 0)) return [
                            3 /*break*/ ,
                            1
                        ];
                        _d = signingRegion;
                        return [
                            3 /*break*/ ,
                            3
                        ];
                    case 1:
                        return [
                            4 /*yield*/ ,
                            this.regionProvider()
                        ];
                    case 2:
                        _d = _g.sent();
                        _g.label = 3;
                    case 3:
                        region = _d;
                        _e = formatDate(signingDate), shortDate = _e.shortDate, longDate = _e.longDate;
                        scope = (0, _credentialDerivation.createScope)(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
                        return [
                            4 /*yield*/ ,
                            (0, _getPayloadHash.getPayloadHash)({
                                headers: {},
                                body: payload
                            }, this.sha256)
                        ];
                    case 4:
                        hashedPayload = _g.sent();
                        hash = new this.sha256();
                        hash.update(headers);
                        _f = (0, _utilHexEncoding.toHex);
                        return [
                            4 /*yield*/ ,
                            hash.digest()
                        ];
                    case 5:
                        hashedHeaders = _f.apply(void 0, [
                            _g.sent()
                        ]);
                        stringToSign = [
                            (0, _constants.EVENT_ALGORITHM_IDENTIFIER),
                            longDate,
                            scope,
                            priorSignature,
                            hashedHeaders,
                            hashedPayload
                        ].join("\n");
                        return [
                            2 /*return*/ ,
                            this.signString(stringToSign, {
                                signingDate: signingDate,
                                signingRegion: region,
                                signingService: signingService
                            })
                        ];
                }
            });
        });
    };
    SignatureV4.prototype.signString = function(stringToSign, _a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.signingDate, signingDate = _c === void 0 ? new Date() : _c, signingRegion = _b.signingRegion, signingService = _b.signingService;
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            var credentials, region, _d, shortDate, hash, _e, _f, _g;
            return (0, _tslib.__generator)(this, function(_h) {
                switch(_h.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            this.credentialProvider()
                        ];
                    case 1:
                        credentials = _h.sent();
                        if (!(signingRegion !== null && signingRegion !== void 0)) return [
                            3 /*break*/ ,
                            2
                        ];
                        _d = signingRegion;
                        return [
                            3 /*break*/ ,
                            4
                        ];
                    case 2:
                        return [
                            4 /*yield*/ ,
                            this.regionProvider()
                        ];
                    case 3:
                        _d = _h.sent();
                        _h.label = 4;
                    case 4:
                        region = _d;
                        shortDate = formatDate(signingDate).shortDate;
                        _f = (_e = this.sha256).bind;
                        return [
                            4 /*yield*/ ,
                            this.getSigningKey(credentials, region, shortDate, signingService)
                        ];
                    case 5:
                        hash = new (_f.apply(_e, [
                            void 0,
                            _h.sent()
                        ]))();
                        hash.update(stringToSign);
                        _g = (0, _utilHexEncoding.toHex);
                        return [
                            4 /*yield*/ ,
                            hash.digest()
                        ];
                    case 6:
                        return [
                            2 /*return*/ ,
                            _g.apply(void 0, [
                                _h.sent()
                            ])
                        ];
                }
            });
        });
    };
    SignatureV4.prototype.signRequest = function(requestToSign, _a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.signingDate, signingDate = _c === void 0 ? new Date() : _c, signableHeaders = _b.signableHeaders, unsignableHeaders = _b.unsignableHeaders, signingRegion = _b.signingRegion, signingService = _b.signingService;
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            var credentials, region, _d, request, _e, longDate, shortDate, scope, payloadHash, canonicalHeaders, signature;
            return (0, _tslib.__generator)(this, function(_f) {
                switch(_f.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            this.credentialProvider()
                        ];
                    case 1:
                        credentials = _f.sent();
                        if (!(signingRegion !== null && signingRegion !== void 0)) return [
                            3 /*break*/ ,
                            2
                        ];
                        _d = signingRegion;
                        return [
                            3 /*break*/ ,
                            4
                        ];
                    case 2:
                        return [
                            4 /*yield*/ ,
                            this.regionProvider()
                        ];
                    case 3:
                        _d = _f.sent();
                        _f.label = 4;
                    case 4:
                        region = _d;
                        request = (0, _prepareRequest.prepareRequest)(requestToSign);
                        _e = formatDate(signingDate), longDate = _e.longDate, shortDate = _e.shortDate;
                        scope = (0, _credentialDerivation.createScope)(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
                        request.headers[0, _constants.AMZ_DATE_HEADER] = longDate;
                        if (credentials.sessionToken) request.headers[0, _constants.TOKEN_HEADER] = credentials.sessionToken;
                        return [
                            4 /*yield*/ ,
                            (0, _getPayloadHash.getPayloadHash)(request, this.sha256)
                        ];
                    case 5:
                        payloadHash = _f.sent();
                        if (!(0, _hasHeader.hasHeader)((0, _constants.SHA256_HEADER), request.headers) && this.applyChecksum) request.headers[0, _constants.SHA256_HEADER] = payloadHash;
                        canonicalHeaders = (0, _getCanonicalHeaders.getCanonicalHeaders)(request, unsignableHeaders, signableHeaders);
                        return [
                            4 /*yield*/ ,
                            this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, payloadHash))
                        ];
                    case 6:
                        signature = _f.sent();
                        request.headers[0, _constants.AUTH_HEADER] = (0, _constants.ALGORITHM_IDENTIFIER) + " " + ("Credential=" + credentials.accessKeyId + "/" + scope + ", ") + ("SignedHeaders=" + getCanonicalHeaderList(canonicalHeaders) + ", ") + ("Signature=" + signature);
                        return [
                            2 /*return*/ ,
                            request
                        ];
                }
            });
        });
    };
    SignatureV4.prototype.createCanonicalRequest = function(request, canonicalHeaders, payloadHash) {
        var sortedHeaders = Object.keys(canonicalHeaders).sort();
        return request.method + "\n" + this.getCanonicalPath(request) + "\n" + (0, _getCanonicalQuery.getCanonicalQuery)(request) + "\n" + sortedHeaders.map(function(name) {
            return name + ":" + canonicalHeaders[name];
        }).join("\n") + "\n\n" + sortedHeaders.join(";") + "\n" + payloadHash;
    };
    SignatureV4.prototype.createStringToSign = function(longDate, credentialScope, canonicalRequest) {
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            var hash, hashedRequest;
            return (0, _tslib.__generator)(this, function(_a) {
                switch(_a.label){
                    case 0:
                        hash = new this.sha256();
                        hash.update(canonicalRequest);
                        return [
                            4 /*yield*/ ,
                            hash.digest()
                        ];
                    case 1:
                        hashedRequest = _a.sent();
                        return [
                            2 /*return*/ ,
                            (0, _constants.ALGORITHM_IDENTIFIER) + "\n" + longDate + "\n" + credentialScope + "\n" + (0, _utilHexEncoding.toHex)(hashedRequest)
                        ];
                }
            });
        });
    };
    SignatureV4.prototype.getCanonicalPath = function(_a) {
        var path = _a.path;
        if (this.uriEscapePath) {
            var doubleEncoded = encodeURIComponent(path.replace(/^\//, ""));
            return "/" + doubleEncoded.replace(/%2F/g, "/");
        }
        return path;
    };
    SignatureV4.prototype.getSignature = function(longDate, credentialScope, keyPromise, canonicalRequest) {
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            var stringToSign, hash, _a, _b, _c;
            return (0, _tslib.__generator)(this, function(_d) {
                switch(_d.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            this.createStringToSign(longDate, credentialScope, canonicalRequest)
                        ];
                    case 1:
                        stringToSign = _d.sent();
                        _b = (_a = this.sha256).bind;
                        return [
                            4 /*yield*/ ,
                            keyPromise
                        ];
                    case 2:
                        hash = new (_b.apply(_a, [
                            void 0,
                            _d.sent()
                        ]))();
                        hash.update(stringToSign);
                        _c = (0, _utilHexEncoding.toHex);
                        return [
                            4 /*yield*/ ,
                            hash.digest()
                        ];
                    case 3:
                        return [
                            2 /*return*/ ,
                            _c.apply(void 0, [
                                _d.sent()
                            ])
                        ];
                }
            });
        });
    };
    SignatureV4.prototype.getSigningKey = function(credentials, region, shortDate, service) {
        return (0, _credentialDerivation.getSigningKey)(this.sha256, credentials, shortDate, region, service || this.service);
    };
    return SignatureV4;
}();
var formatDate = function(now) {
    var longDate = (0, _utilDate.iso8601)(now).replace(/[\-:]/g, "");
    return {
        longDate: longDate,
        shortDate: longDate.substr(0, 8)
    };
};
var getCanonicalHeaderList = function(headers) {
    return Object.keys(headers).sort().join(";");
};
var normalizeRegionProvider = function(region) {
    if (typeof region === "string") {
        var promisified_1 = Promise.resolve(region);
        return function() {
            return promisified_1;
        };
    } else return region;
};
var normalizeCredentialsProvider = function(credentials) {
    if (typeof credentials === "object") {
        var promisified_2 = Promise.resolve(credentials);
        return function() {
            return promisified_2;
        };
    } else return credentials;
};

},{"tslib":"4oKW1","@aws-sdk/util-hex-encoding":"37zn6","./constants":"lYFXA","./credentialDerivation":"kcQd2","./getCanonicalHeaders":"dF1i0","./getCanonicalQuery":"fQrSo","./getPayloadHash":"2y4Gv","./hasHeader":"cm35Y","./moveHeadersToQuery":"8im4t","./prepareRequest":"6nKci","./utilDate":"a0UVL","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dF1i0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @internal
 */ parcelHelpers.export(exports, "getCanonicalHeaders", ()=>getCanonicalHeaders);
var _tslib = require("tslib");
var _constants = require("./constants");
function getCanonicalHeaders(_a, unsignableHeaders, signableHeaders) {
    var e_1, _b;
    var headers = _a.headers;
    var canonical = {};
    try {
        for(var _c = (0, _tslib.__values)(Object.keys(headers).sort()), _d = _c.next(); !_d.done; _d = _c.next()){
            var headerName = _d.value;
            var canonicalHeaderName = headerName.toLowerCase();
            if (canonicalHeaderName in (0, _constants.ALWAYS_UNSIGNABLE_HEADERS) || (unsignableHeaders === null || unsignableHeaders === void 0 ? void 0 : unsignableHeaders.has(canonicalHeaderName)) || (0, _constants.PROXY_HEADER_PATTERN).test(canonicalHeaderName) || (0, _constants.SEC_HEADER_PATTERN).test(canonicalHeaderName)) {
                if (!signableHeaders || signableHeaders && !signableHeaders.has(canonicalHeaderName)) continue;
            }
            canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\s+/g, " ");
        }
    } catch (e_1_1) {
        e_1 = {
            error: e_1_1
        };
    } finally{
        try {
            if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
        } finally{
            if (e_1) throw e_1.error;
        }
    }
    return canonical;
}

},{"tslib":"4oKW1","./constants":"lYFXA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fQrSo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @internal
 */ parcelHelpers.export(exports, "getCanonicalQuery", ()=>getCanonicalQuery);
var _tslib = require("tslib");
var _utilUriEscape = require("@aws-sdk/util-uri-escape");
var _constants = require("./constants");
function getCanonicalQuery(_a) {
    var e_1, _b;
    var _c = _a.query, query = _c === void 0 ? {} : _c;
    var keys = [];
    var serialized = {};
    var _loop_1 = function(key) {
        if (key.toLowerCase() === (0, _constants.SIGNATURE_HEADER)) return "continue";
        keys.push(key);
        var value = query[key];
        if (typeof value === "string") serialized[key] = (0, _utilUriEscape.escapeUri)(key) + "=" + (0, _utilUriEscape.escapeUri)(value);
        else if (Array.isArray(value)) serialized[key] = value.slice(0).sort().reduce(function(encoded, value) {
            return encoded.concat([
                (0, _utilUriEscape.escapeUri)(key) + "=" + (0, _utilUriEscape.escapeUri)(value)
            ]);
        }, []).join("&");
    };
    try {
        for(var _d = (0, _tslib.__values)(Object.keys(query).sort()), _e = _d.next(); !_e.done; _e = _d.next()){
            var key = _e.value;
            _loop_1(key);
        }
    } catch (e_1_1) {
        e_1 = {
            error: e_1_1
        };
    } finally{
        try {
            if (_e && !_e.done && (_b = _d.return)) _b.call(_d);
        } finally{
            if (e_1) throw e_1.error;
        }
    }
    return keys.map(function(key) {
        return serialized[key];
    }).filter(function(serialized) {
        return serialized;
    }) // omit any falsy values
    .join("&");
}

},{"tslib":"4oKW1","@aws-sdk/util-uri-escape":"bdO3o","./constants":"lYFXA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2y4Gv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @internal
 */ parcelHelpers.export(exports, "getPayloadHash", ()=>getPayloadHash);
var _tslib = require("tslib");
var _isArrayBuffer = require("@aws-sdk/is-array-buffer");
var _utilHexEncoding = require("@aws-sdk/util-hex-encoding");
var _constants = require("./constants");
function getPayloadHash(_a, hashConstructor) {
    var headers = _a.headers, body = _a.body;
    return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
        var _b, _c, headerName, hashCtor, _d;
        var e_1, _e;
        return (0, _tslib.__generator)(this, function(_f) {
            switch(_f.label){
                case 0:
                    try {
                        for(_b = (0, _tslib.__values)(Object.keys(headers)), _c = _b.next(); !_c.done; _c = _b.next()){
                            headerName = _c.value;
                            if (headerName.toLowerCase() === (0, _constants.SHA256_HEADER)) return [
                                2 /*return*/ ,
                                headers[headerName]
                            ];
                        }
                    } catch (e_1_1) {
                        e_1 = {
                            error: e_1_1
                        };
                    } finally{
                        try {
                            if (_c && !_c.done && (_e = _b.return)) _e.call(_b);
                        } finally{
                            if (e_1) throw e_1.error;
                        }
                    }
                    if (!(body == undefined)) return [
                        3 /*break*/ ,
                        1
                    ];
                    return [
                        2 /*return*/ ,
                        "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
                    ];
                case 1:
                    if (!(typeof body === "string" || ArrayBuffer.isView(body) || (0, _isArrayBuffer.isArrayBuffer)(body))) return [
                        3 /*break*/ ,
                        3
                    ];
                    hashCtor = new hashConstructor();
                    hashCtor.update(body);
                    _d = (0, _utilHexEncoding.toHex);
                    return [
                        4 /*yield*/ ,
                        hashCtor.digest()
                    ];
                case 2:
                    return [
                        2 /*return*/ ,
                        _d.apply(void 0, [
                            _f.sent()
                        ])
                    ];
                case 3:
                    // As any defined body that is not a string or binary data is a stream, this
                    // body is unsignable. Attempt to send the request with an unsigned payload,
                    // which may or may not be accepted by the service.
                    return [
                        2 /*return*/ ,
                        (0, _constants.UNSIGNED_PAYLOAD)
                    ];
            }
        });
    });
}

},{"tslib":"4oKW1","@aws-sdk/is-array-buffer":"66qD0","@aws-sdk/util-hex-encoding":"37zn6","./constants":"lYFXA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"66qD0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isArrayBuffer", ()=>isArrayBuffer);
var isArrayBuffer = function(arg) {
    return typeof ArrayBuffer === "function" && arg instanceof ArrayBuffer || Object.prototype.toString.call(arg) === "[object ArrayBuffer]";
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cm35Y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "hasHeader", ()=>hasHeader);
var _tslib = require("tslib");
function hasHeader(soughtHeader, headers) {
    var e_1, _a;
    soughtHeader = soughtHeader.toLowerCase();
    try {
        for(var _b = (0, _tslib.__values)(Object.keys(headers)), _c = _b.next(); !_c.done; _c = _b.next()){
            var headerName = _c.value;
            if (soughtHeader === headerName.toLowerCase()) return true;
        }
    } catch (e_1_1) {
        e_1 = {
            error: e_1_1
        };
    } finally{
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        } finally{
            if (e_1) throw e_1.error;
        }
    }
    return false;
}

},{"tslib":"4oKW1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8im4t":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @internal
 */ parcelHelpers.export(exports, "moveHeadersToQuery", ()=>moveHeadersToQuery);
var _tslib = require("tslib");
var _cloneRequest = require("./cloneRequest");
function moveHeadersToQuery(request, options) {
    var e_1, _a;
    var _b;
    if (options === void 0) options = {};
    var _c = typeof request.clone === "function" ? request.clone() : (0, _cloneRequest.cloneRequest)(request), headers = _c.headers, _d = _c.query, query = _d === void 0 ? {} : _d;
    try {
        for(var _e = (0, _tslib.__values)(Object.keys(headers)), _f = _e.next(); !_f.done; _f = _e.next()){
            var name = _f.value;
            var lname = name.toLowerCase();
            if (lname.substr(0, 6) === "x-amz-" && !((_b = options.unhoistableHeaders) === null || _b === void 0 ? void 0 : _b.has(lname))) {
                query[name] = headers[name];
                delete headers[name];
            }
        }
    } catch (e_1_1) {
        e_1 = {
            error: e_1_1
        };
    } finally{
        try {
            if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
        } finally{
            if (e_1) throw e_1.error;
        }
    }
    return (0, _tslib.__assign)((0, _tslib.__assign)({}, request), {
        headers: headers,
        query: query
    });
}

},{"tslib":"4oKW1","./cloneRequest":"cZ3v1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cZ3v1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @internal
 */ parcelHelpers.export(exports, "cloneRequest", ()=>cloneRequest);
var _tslib = require("tslib");
function cloneRequest(_a) {
    var headers = _a.headers, query = _a.query, rest = (0, _tslib.__rest)(_a, [
        "headers",
        "query"
    ]);
    return (0, _tslib.__assign)((0, _tslib.__assign)({}, rest), {
        headers: (0, _tslib.__assign)({}, headers),
        query: query ? cloneQuery(query) : undefined
    });
}
function cloneQuery(query) {
    return Object.keys(query).reduce(function(carry, paramName) {
        var _a;
        var param = query[paramName];
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, carry), (_a = {}, _a[paramName] = Array.isArray(param) ? (0, _tslib.__spread)(param) : param, _a));
    }, {});
}

},{"tslib":"4oKW1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6nKci":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @internal
 */ parcelHelpers.export(exports, "prepareRequest", ()=>prepareRequest);
var _tslib = require("tslib");
var _cloneRequest = require("./cloneRequest");
var _constants = require("./constants");
function prepareRequest(request) {
    var e_1, _a;
    // Create a clone of the request object that does not clone the body
    request = typeof request.clone === "function" ? request.clone() : (0, _cloneRequest.cloneRequest)(request);
    try {
        for(var _b = (0, _tslib.__values)(Object.keys(request.headers)), _c = _b.next(); !_c.done; _c = _b.next()){
            var headerName = _c.value;
            if ((0, _constants.GENERATED_HEADERS).indexOf(headerName.toLowerCase()) > -1) delete request.headers[headerName];
        }
    } catch (e_1_1) {
        e_1 = {
            error: e_1_1
        };
    } finally{
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        } finally{
            if (e_1) throw e_1.error;
        }
    }
    return request;
}

},{"tslib":"4oKW1","./cloneRequest":"cZ3v1","./constants":"lYFXA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a0UVL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "iso8601", ()=>iso8601);
parcelHelpers.export(exports, "toDate", ()=>toDate);
function iso8601(time) {
    return toDate(time).toISOString().replace(/\.\d{3}Z$/, "Z");
}
function toDate(time) {
    if (typeof time === "number") return new Date(time * 1000);
    if (typeof time === "string") {
        if (Number(time)) return new Date(Number(time) * 1000);
        return new Date(time);
    }
    return time;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4hxVN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "awsAuthMiddleware", ()=>awsAuthMiddleware);
parcelHelpers.export(exports, "awsAuthMiddlewareOptions", ()=>awsAuthMiddlewareOptions);
parcelHelpers.export(exports, "getAwsAuthPlugin", ()=>getAwsAuthPlugin);
var _tslib = require("tslib");
var _protocolHttp = require("@aws-sdk/protocol-http");
var isClockSkewed = function(newServerTime, systemClockOffset) {
    return Math.abs(getSkewCorrectedDate(systemClockOffset).getTime() - newServerTime) >= 300000;
};
var getSkewCorrectedDate = function(systemClockOffset) {
    return new Date(Date.now() + systemClockOffset);
};
function awsAuthMiddleware(options) {
    return function(next, context) {
        return function(args) {
            return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
                var signer, _a, output, _b, _c, headers, dateHeader, serverTime;
                var _d;
                return (0, _tslib.__generator)(this, function(_e) {
                    switch(_e.label){
                        case 0:
                            if (!(0, _protocolHttp.HttpRequest).isInstance(args.request)) return [
                                2 /*return*/ ,
                                next(args)
                            ];
                            if (!(typeof options.signer === "function")) return [
                                3 /*break*/ ,
                                2
                            ];
                            return [
                                4 /*yield*/ ,
                                options.signer()
                            ];
                        case 1:
                            _a = _e.sent();
                            return [
                                3 /*break*/ ,
                                3
                            ];
                        case 2:
                            _a = options.signer;
                            _e.label = 3;
                        case 3:
                            signer = _a;
                            _b = next;
                            _c = [
                                (0, _tslib.__assign)({}, args)
                            ];
                            _d = {};
                            return [
                                4 /*yield*/ ,
                                signer.sign(args.request, {
                                    signingDate: new Date(Date.now() + options.systemClockOffset),
                                    signingRegion: context["signing_region"],
                                    signingService: context["signing_service"]
                                })
                            ];
                        case 4:
                            return [
                                4 /*yield*/ ,
                                _b.apply(void 0, [
                                    (0, _tslib.__assign).apply(void 0, _c.concat([
                                        (_d.request = _e.sent(), _d)
                                    ]))
                                ])
                            ];
                        case 5:
                            output = _e.sent();
                            headers = output.response.headers;
                            dateHeader = headers && (headers.date || headers.Date);
                            if (dateHeader) {
                                serverTime = Date.parse(dateHeader);
                                if (isClockSkewed(serverTime, options.systemClockOffset)) options.systemClockOffset = serverTime - Date.now();
                            }
                            return [
                                2 /*return*/ ,
                                output
                            ];
                    }
                });
            });
        };
    };
}
var awsAuthMiddlewareOptions = {
    name: "awsAuthMiddleware",
    tags: [
        "SIGNATURE",
        "AWSAUTH"
    ],
    relation: "after",
    toMiddleware: "retryMiddleware",
    override: true
};
var getAwsAuthPlugin = function(options) {
    return {
        applyToStack: function(clientStack) {
            clientStack.addRelativeTo(awsAuthMiddleware(options), awsAuthMiddlewareOptions);
        }
    };
};

},{"tslib":"5IeWg","@aws-sdk/protocol-http":"dbzKK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7Khhc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _configurations = require("./configurations");
parcelHelpers.exportAll(_configurations, exports);
var _userAgentMiddleware = require("./user-agent-middleware");
parcelHelpers.exportAll(_userAgentMiddleware, exports);

},{"./configurations":"eisA8","./user-agent-middleware":"6BGgE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eisA8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resolveUserAgentConfig", ()=>resolveUserAgentConfig);
var _tslib = require("tslib");
function resolveUserAgentConfig(input) {
    return (0, _tslib.__assign)((0, _tslib.__assign)({}, input), {
        customUserAgent: typeof input.customUserAgent === "string" ? [
            [
                input.customUserAgent
            ]
        ] : input.customUserAgent
    });
}

},{"tslib":"fs9RH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fs9RH":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6BGgE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "userAgentMiddleware", ()=>userAgentMiddleware);
parcelHelpers.export(exports, "getUserAgentMiddlewareOptions", ()=>getUserAgentMiddlewareOptions);
parcelHelpers.export(exports, "getUserAgentPlugin", ()=>getUserAgentPlugin);
var _tslib = require("tslib");
var _protocolHttp = require("@aws-sdk/protocol-http");
var _constants = require("./constants");
var userAgentMiddleware = function(options) {
    return function(next, context) {
        return function(args) {
            return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
                var request, headers, userAgent, defaultUserAgent, customUserAgent, normalUAValue;
                var _a, _b;
                return (0, _tslib.__generator)(this, function(_c) {
                    switch(_c.label){
                        case 0:
                            request = args.request;
                            if (!(0, _protocolHttp.HttpRequest).isInstance(request)) return [
                                2 /*return*/ ,
                                next(args)
                            ];
                            headers = request.headers;
                            userAgent = ((_a = context === null || context === void 0 ? void 0 : context.userAgent) === null || _a === void 0 ? void 0 : _a.map(escapeUserAgent)) || [];
                            return [
                                4 /*yield*/ ,
                                options.defaultUserAgentProvider()
                            ];
                        case 1:
                            defaultUserAgent = _c.sent().map(escapeUserAgent);
                            customUserAgent = ((_b = options === null || options === void 0 ? void 0 : options.customUserAgent) === null || _b === void 0 ? void 0 : _b.map(escapeUserAgent)) || [];
                            // Set value to AWS-specific user agent header
                            headers[0, _constants.X_AMZ_USER_AGENT] = (0, _tslib.__spread)(defaultUserAgent, userAgent, customUserAgent).join((0, _constants.SPACE));
                            normalUAValue = (0, _tslib.__spread)(defaultUserAgent.filter(function(section) {
                                return section.startsWith("aws-sdk-");
                            }), customUserAgent).join((0, _constants.SPACE));
                            if (options.runtime !== "browser" && normalUAValue) headers[0, _constants.USER_AGENT] = headers[0, _constants.USER_AGENT] ? headers[0, _constants.USER_AGENT] + " " + normalUAValue : normalUAValue;
                            return [
                                2 /*return*/ ,
                                next((0, _tslib.__assign)((0, _tslib.__assign)({}, args), {
                                    request: request
                                }))
                            ];
                    }
                });
            });
        };
    };
};
/**
 * Escape the each pair according to https://tools.ietf.org/html/rfc5234 and join the pair with pattern `name/version`.
 * User agent name may include prefix like `md/`, `api/`, `os/` etc., we should not escape the `/` after the prefix.
 * @private
 */ var escapeUserAgent = function(_a) {
    var _b = (0, _tslib.__read)(_a, 2), name = _b[0], version = _b[1];
    var prefixSeparatorIndex = name.indexOf("/");
    var prefix = name.substring(0, prefixSeparatorIndex); // If no prefix, prefix is just ""
    var uaName = name.substring(prefixSeparatorIndex + 1);
    if (prefix === "api") uaName = uaName.toLowerCase();
    return [
        prefix,
        uaName,
        version
    ].filter(function(item) {
        return item && item.length > 0;
    }).map(function(item) {
        return item === null || item === void 0 ? void 0 : item.replace((0, _constants.UA_ESCAPE_REGEX), "_");
    }).join("/");
};
var getUserAgentMiddlewareOptions = {
    name: "getUserAgentMiddleware",
    step: "build",
    priority: "low",
    tags: [
        "SET_USER_AGENT",
        "USER_AGENT"
    ],
    override: true
};
var getUserAgentPlugin = function(config) {
    return {
        applyToStack: function(clientStack) {
            clientStack.add(userAgentMiddleware(config), getUserAgentMiddlewareOptions);
        }
    };
};

},{"tslib":"fs9RH","@aws-sdk/protocol-http":"dbzKK","./constants":"4uvb6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4uvb6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "USER_AGENT", ()=>USER_AGENT);
parcelHelpers.export(exports, "X_AMZ_USER_AGENT", ()=>X_AMZ_USER_AGENT);
parcelHelpers.export(exports, "SPACE", ()=>SPACE);
parcelHelpers.export(exports, "UA_ESCAPE_REGEX", ()=>UA_ESCAPE_REGEX);
var USER_AGENT = "user-agent";
var X_AMZ_USER_AGENT = "x-amz-user-agent";
var SPACE = " ";
var UA_ESCAPE_REGEX = /[^\!\#\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kA4IO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _client = require("./client");
parcelHelpers.exportAll(_client, exports);
var _command = require("./command");
parcelHelpers.exportAll(_command, exports);
var _documentType = require("./document-type");
parcelHelpers.exportAll(_documentType, exports);
var _exception = require("./exception");
parcelHelpers.exportAll(_exception, exports);
var _extendedEncodeUriComponent = require("./extended-encode-uri-component");
parcelHelpers.exportAll(_extendedEncodeUriComponent, exports);
var _getArrayIfSingleItem = require("./get-array-if-single-item");
parcelHelpers.exportAll(_getArrayIfSingleItem, exports);
var _getValueFromTextNode = require("./get-value-from-text-node");
parcelHelpers.exportAll(_getValueFromTextNode, exports);
var _lazyJson = require("./lazy-json");
parcelHelpers.exportAll(_lazyJson, exports);
var _dateUtils = require("./date-utils");
parcelHelpers.exportAll(_dateUtils, exports);
var _splitEvery = require("./split-every");
parcelHelpers.exportAll(_splitEvery, exports);
var _constants = require("./constants");
parcelHelpers.exportAll(_constants, exports);
var _retryableTrait = require("./retryable-trait");
parcelHelpers.exportAll(_retryableTrait, exports);
var _sdkError = require("./sdk-error");
parcelHelpers.exportAll(_sdkError, exports);

},{"./client":"hYTHc","./command":"6AmgY","./document-type":"dmYK8","./exception":"lfzpT","./extended-encode-uri-component":"82TgW","./get-array-if-single-item":"abGYw","./get-value-from-text-node":"2cDAX","./lazy-json":"kHCxp","./date-utils":"h0Yds","./split-every":"4qr44","./constants":"82I4K","./retryable-trait":"hxkUR","./sdk-error":"gO6h5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hYTHc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Client", ()=>Client);
var _middlewareStack = require("@aws-sdk/middleware-stack");
var Client = /** @class */ function() {
    function Client(config) {
        this.middlewareStack = (0, _middlewareStack.constructStack)();
        this.config = config;
    }
    Client.prototype.send = function(command, optionsOrCb, cb) {
        var options = typeof optionsOrCb !== "function" ? optionsOrCb : undefined;
        var callback = typeof optionsOrCb === "function" ? optionsOrCb : cb;
        var handler = command.resolveMiddleware(this.middlewareStack, this.config, options);
        if (callback) handler(command).then(function(result) {
            return callback(null, result.output);
        }, function(err) {
            return callback(err);
        }).catch(// prevent any errors thrown in the callback from triggering an
        // unhandled promise rejection
        function() {});
        else return handler(command).then(function(result) {
            return result.output;
        });
    };
    Client.prototype.destroy = function() {
        if (this.config.requestHandler.destroy) this.config.requestHandler.destroy();
    };
    return Client;
}();

},{"@aws-sdk/middleware-stack":"aYVqx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aYVqx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _middlewareStack = require("./MiddlewareStack");
parcelHelpers.exportAll(_middlewareStack, exports);

},{"./MiddlewareStack":"cvQvj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cvQvj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "constructStack", ()=>constructStack);
var _tslib = require("tslib");
var constructStack = function() {
    var absoluteEntries = [];
    var relativeEntries = [];
    var entriesNameSet = new Set();
    var sort = function(entries) {
        return entries.sort(function(a, b) {
            return stepWeights[b.step] - stepWeights[a.step] || priorityWeights[b.priority || "normal"] - priorityWeights[a.priority || "normal"];
        });
    };
    var removeByName = function(toRemove) {
        var isRemoved = false;
        var filterCb = function(entry) {
            if (entry.name && entry.name === toRemove) {
                isRemoved = true;
                entriesNameSet.delete(toRemove);
                return false;
            }
            return true;
        };
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
    };
    var removeByReference = function(toRemove) {
        var isRemoved = false;
        var filterCb = function(entry) {
            if (entry.middleware === toRemove) {
                isRemoved = true;
                if (entry.name) entriesNameSet.delete(entry.name);
                return false;
            }
            return true;
        };
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
    };
    var cloneTo = function(toStack) {
        absoluteEntries.forEach(function(entry) {
            //@ts-ignore
            toStack.add(entry.middleware, (0, _tslib.__assign)({}, entry));
        });
        relativeEntries.forEach(function(entry) {
            //@ts-ignore
            toStack.addRelativeTo(entry.middleware, (0, _tslib.__assign)({}, entry));
        });
        return toStack;
    };
    var expandRelativeMiddlewareList = function(from) {
        var expandedMiddlewareList = [];
        from.before.forEach(function(entry) {
            if (entry.before.length === 0 && entry.after.length === 0) expandedMiddlewareList.push(entry);
            else expandedMiddlewareList.push.apply(expandedMiddlewareList, (0, _tslib.__spread)(expandRelativeMiddlewareList(entry)));
        });
        expandedMiddlewareList.push(from);
        from.after.reverse().forEach(function(entry) {
            if (entry.before.length === 0 && entry.after.length === 0) expandedMiddlewareList.push(entry);
            else expandedMiddlewareList.push.apply(expandedMiddlewareList, (0, _tslib.__spread)(expandRelativeMiddlewareList(entry)));
        });
        return expandedMiddlewareList;
    };
    /**
     * Get a final list of middleware in the order of being executed in the resolved handler.
     */ var getMiddlewareList = function() {
        var normalizedAbsoluteEntries = [];
        var normalizedRelativeEntries = [];
        var normalizedEntriesNameMap = {};
        absoluteEntries.forEach(function(entry) {
            var normalizedEntry = (0, _tslib.__assign)((0, _tslib.__assign)({}, entry), {
                before: [],
                after: []
            });
            if (normalizedEntry.name) normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
            normalizedAbsoluteEntries.push(normalizedEntry);
        });
        relativeEntries.forEach(function(entry) {
            var normalizedEntry = (0, _tslib.__assign)((0, _tslib.__assign)({}, entry), {
                before: [],
                after: []
            });
            if (normalizedEntry.name) normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
            normalizedRelativeEntries.push(normalizedEntry);
        });
        normalizedRelativeEntries.forEach(function(entry) {
            if (entry.toMiddleware) {
                var toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];
                if (toMiddleware === undefined) throw new Error(entry.toMiddleware + " is not found when adding " + (entry.name || "anonymous") + " middleware " + entry.relation + " " + entry.toMiddleware);
                if (entry.relation === "after") toMiddleware.after.push(entry);
                if (entry.relation === "before") toMiddleware.before.push(entry);
            }
        });
        var mainChain = sort(normalizedAbsoluteEntries).map(expandRelativeMiddlewareList).reduce(function(wholeList, expendedMiddlewareList) {
            // TODO: Replace it with Array.flat();
            wholeList.push.apply(wholeList, (0, _tslib.__spread)(expendedMiddlewareList));
            return wholeList;
        }, []);
        return mainChain.map(function(entry) {
            return entry.middleware;
        });
    };
    var stack = {
        add: function(middleware, options) {
            if (options === void 0) options = {};
            var name = options.name, override = options.override;
            var entry = (0, _tslib.__assign)({
                step: "initialize",
                priority: "normal",
                middleware: middleware
            }, options);
            if (name) {
                if (entriesNameSet.has(name)) {
                    if (!override) throw new Error("Duplicate middleware name '" + name + "'");
                    var toOverrideIndex = absoluteEntries.findIndex(function(entry) {
                        return entry.name === name;
                    });
                    var toOverride = absoluteEntries[toOverrideIndex];
                    if (toOverride.step !== entry.step || toOverride.priority !== entry.priority) throw new Error('"' + name + '" middleware with ' + toOverride.priority + " priority in " + toOverride.step + " step cannot be " + ("overridden by same-name middleware with " + entry.priority + " priority in " + entry.step + " step."));
                    absoluteEntries.splice(toOverrideIndex, 1);
                }
                entriesNameSet.add(name);
            }
            absoluteEntries.push(entry);
        },
        addRelativeTo: function(middleware, options) {
            var name = options.name, override = options.override;
            var entry = (0, _tslib.__assign)({
                middleware: middleware
            }, options);
            if (name) {
                if (entriesNameSet.has(name)) {
                    if (!override) throw new Error("Duplicate middleware name '" + name + "'");
                    var toOverrideIndex = relativeEntries.findIndex(function(entry) {
                        return entry.name === name;
                    });
                    var toOverride = relativeEntries[toOverrideIndex];
                    if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) throw new Error('"' + name + '" middleware ' + toOverride.relation + ' "' + toOverride.toMiddleware + '" middleware cannot be overridden ' + ("by same-name middleware " + entry.relation + ' "' + entry.toMiddleware + '" middleware.'));
                    relativeEntries.splice(toOverrideIndex, 1);
                }
                entriesNameSet.add(name);
            }
            relativeEntries.push(entry);
        },
        clone: function() {
            return cloneTo(constructStack());
        },
        use: function(plugin) {
            plugin.applyToStack(stack);
        },
        remove: function(toRemove) {
            if (typeof toRemove === "string") return removeByName(toRemove);
            else return removeByReference(toRemove);
        },
        removeByTag: function(toRemove) {
            var isRemoved = false;
            var filterCb = function(entry) {
                var tags = entry.tags, name = entry.name;
                if (tags && tags.includes(toRemove)) {
                    if (name) entriesNameSet.delete(name);
                    isRemoved = true;
                    return false;
                }
                return true;
            };
            absoluteEntries = absoluteEntries.filter(filterCb);
            relativeEntries = relativeEntries.filter(filterCb);
            return isRemoved;
        },
        concat: function(from) {
            var cloned = cloneTo(constructStack());
            cloned.use(from);
            return cloned;
        },
        applyToStack: cloneTo,
        resolve: function(handler, context) {
            var e_1, _a;
            try {
                for(var _b = (0, _tslib.__values)(getMiddlewareList().reverse()), _c = _b.next(); !_c.done; _c = _b.next()){
                    var middleware = _c.value;
                    handler = middleware(handler, context);
                }
            } catch (e_1_1) {
                e_1 = {
                    error: e_1_1
                };
            } finally{
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                } finally{
                    if (e_1) throw e_1.error;
                }
            }
            return handler;
        }
    };
    return stack;
};
var stepWeights = {
    initialize: 5,
    serialize: 4,
    build: 3,
    finalizeRequest: 2,
    deserialize: 1
};
var priorityWeights = {
    high: 3,
    normal: 2,
    low: 1
};

},{"tslib":"drUOm","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"drUOm":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6AmgY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Command", ()=>Command);
var _middlewareStack = require("@aws-sdk/middleware-stack");
var Command = /** @class */ function() {
    function Command() {
        this.middlewareStack = (0, _middlewareStack.constructStack)();
    }
    return Command;
}();

},{"@aws-sdk/middleware-stack":"aYVqx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dmYK8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lfzpT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"82TgW":[function(require,module,exports) {
/**
 * Function that wraps encodeURIComponent to encode additional characters
 * to fully adhere to RFC 3986.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "extendedEncodeURIComponent", ()=>extendedEncodeURIComponent);
function extendedEncodeURIComponent(str) {
    return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {
        return "%" + c.charCodeAt(0).toString(16);
    });
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"abGYw":[function(require,module,exports) {
/**
 * The XML parser will set one K:V for a member that could
 * return multiple entries but only has one.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getArrayIfSingleItem", ()=>getArrayIfSingleItem);
var getArrayIfSingleItem = function(mayBeArray) {
    return Array.isArray(mayBeArray) ? mayBeArray : [
        mayBeArray
    ];
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2cDAX":[function(require,module,exports) {
/**
 * Recursively parses object and populates value is node from
 * "#text" key if it's available
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getValueFromTextNode", ()=>getValueFromTextNode);
var getValueFromTextNode = function(obj) {
    var textNodeName = "#text";
    for(var key in obj){
        if (obj.hasOwnProperty(key) && obj[key][textNodeName] !== undefined) obj[key] = obj[key][textNodeName];
        else if (typeof obj[key] === "object" && obj[key] !== null) obj[key] = getValueFromTextNode(obj[key]);
    }
    return obj;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kHCxp":[function(require,module,exports) {
/**
 * Lazy String holder for JSON typed contents.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StringWrapper", ()=>StringWrapper);
parcelHelpers.export(exports, "LazyJsonString", ()=>LazyJsonString);
var _tslib = require("tslib");
var StringWrapper = function() {
    //@ts-ignore 'this' cannot be assigned to any, but Object.getPrototypeOf accepts any
    var Class = Object.getPrototypeOf(this).constructor;
    var Constructor = Function.bind.apply(String, (0, _tslib.__spread)([
        null
    ], arguments));
    //@ts-ignore Call wrapped String constructor directly, don't bother typing it.
    var instance = new Constructor();
    Object.setPrototypeOf(instance, Class.prototype);
    return instance;
};
StringWrapper.prototype = Object.create(String.prototype, {
    constructor: {
        value: StringWrapper,
        enumerable: false,
        writable: true,
        configurable: true
    }
});
Object.setPrototypeOf(StringWrapper, String);
var LazyJsonString = /** @class */ function(_super) {
    (0, _tslib.__extends)(LazyJsonString, _super);
    function LazyJsonString() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LazyJsonString.prototype.deserializeJSON = function() {
        return JSON.parse(_super.prototype.toString.call(this));
    };
    LazyJsonString.prototype.toJSON = function() {
        return _super.prototype.toString.call(this);
    };
    LazyJsonString.fromObject = function(object) {
        if (object instanceof LazyJsonString) return object;
        else if (object instanceof String || typeof object === "string") return new LazyJsonString(object);
        return new LazyJsonString(JSON.stringify(object));
    };
    return LazyJsonString;
}(StringWrapper);

},{"tslib":"6xUDJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6xUDJ":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h0Yds":[function(require,module,exports) {
/**
 * Builds a proper UTC HttpDate timestamp from a Date object
 * since not all environments will have this as the expected
 * format.
 *
 * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toUTCString
 * > Prior to ECMAScript 2018, the format of the return value
 * > varied according to the platform. The most common return
 * > value was an RFC-1123 formatted date stamp, which is a
 * > slightly updated version of RFC-822 date stamps.
 */ // Build indexes outside so we allocate them once.
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "dateToUtcString", ()=>dateToUtcString);
var days = [
    "Sun",
    "Mon",
    "Tue",
    "Wed",
    "Thu",
    "Fri",
    "Sat"
];
// prettier-ignore
var months = [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Oct",
    "Nov",
    "Dec"
];
function dateToUtcString(date) {
    var year = date.getUTCFullYear();
    var month = date.getUTCMonth();
    var dayOfWeek = date.getUTCDay();
    var dayOfMonthInt = date.getUTCDate();
    var hoursInt = date.getUTCHours();
    var minutesInt = date.getUTCMinutes();
    var secondsInt = date.getUTCSeconds();
    // Build 0 prefixed strings for contents that need to be
    // two digits and where we get an integer back.
    var dayOfMonthString = dayOfMonthInt < 10 ? "0" + dayOfMonthInt : "" + dayOfMonthInt;
    var hoursString = hoursInt < 10 ? "0" + hoursInt : "" + hoursInt;
    var minutesString = minutesInt < 10 ? "0" + minutesInt : "" + minutesInt;
    var secondsString = secondsInt < 10 ? "0" + secondsInt : "" + secondsInt;
    return days[dayOfWeek] + ", " + dayOfMonthString + " " + months[month] + " " + year + " " + hoursString + ":" + minutesString + ":" + secondsString + " GMT";
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4qr44":[function(require,module,exports) {
/**
 * Given an input string, splits based on the delimiter after a given
 * number of delimiters has been encountered.
 *
 * @param value The input string to split.
 * @param delimiter The delimiter to split on.
 * @param numDelimiters The number of delimiters to have encountered to split.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "splitEvery", ()=>splitEvery);
function splitEvery(value, delimiter, numDelimiters) {
    // Fail if we don't have a clear number to split on.
    if (numDelimiters <= 0 || !Number.isInteger(numDelimiters)) throw new Error("Invalid number of delimiters (" + numDelimiters + ") for splitEvery.");
    var segments = value.split(delimiter);
    // Short circuit extra logic for the simple case.
    if (numDelimiters === 1) return segments;
    var compoundSegments = [];
    var currentSegment = "";
    for(var i = 0; i < segments.length; i++){
        if (currentSegment === "") // Start a new segment.
        currentSegment = segments[i];
        else // Compound the current segment with the delimiter.
        currentSegment += delimiter + segments[i];
        if ((i + 1) % numDelimiters === 0) {
            // We encountered the right number of delimiters, so add the entry.
            compoundSegments.push(currentSegment);
            // And reset the current segment.
            currentSegment = "";
        }
    }
    // Handle any leftover segment portion.
    if (currentSegment !== "") compoundSegments.push(currentSegment);
    return compoundSegments;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"82I4K":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SENSITIVE_STRING", ()=>SENSITIVE_STRING);
var SENSITIVE_STRING = "***SensitiveInformation***";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hxkUR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gO6h5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cun4t":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CloudWatchLogs", ()=>CloudWatchLogs);
var _tslib = require("tslib");
var _cloudWatchLogsClient = require("./CloudWatchLogsClient");
var _associateKmsKeyCommand = require("./commands/AssociateKmsKeyCommand");
var _cancelExportTaskCommand = require("./commands/CancelExportTaskCommand");
var _createExportTaskCommand = require("./commands/CreateExportTaskCommand");
var _createLogGroupCommand = require("./commands/CreateLogGroupCommand");
var _createLogStreamCommand = require("./commands/CreateLogStreamCommand");
var _deleteDestinationCommand = require("./commands/DeleteDestinationCommand");
var _deleteLogGroupCommand = require("./commands/DeleteLogGroupCommand");
var _deleteLogStreamCommand = require("./commands/DeleteLogStreamCommand");
var _deleteMetricFilterCommand = require("./commands/DeleteMetricFilterCommand");
var _deleteQueryDefinitionCommand = require("./commands/DeleteQueryDefinitionCommand");
var _deleteResourcePolicyCommand = require("./commands/DeleteResourcePolicyCommand");
var _deleteRetentionPolicyCommand = require("./commands/DeleteRetentionPolicyCommand");
var _deleteSubscriptionFilterCommand = require("./commands/DeleteSubscriptionFilterCommand");
var _describeDestinationsCommand = require("./commands/DescribeDestinationsCommand");
var _describeExportTasksCommand = require("./commands/DescribeExportTasksCommand");
var _describeLogGroupsCommand = require("./commands/DescribeLogGroupsCommand");
var _describeLogStreamsCommand = require("./commands/DescribeLogStreamsCommand");
var _describeMetricFiltersCommand = require("./commands/DescribeMetricFiltersCommand");
var _describeQueriesCommand = require("./commands/DescribeQueriesCommand");
var _describeQueryDefinitionsCommand = require("./commands/DescribeQueryDefinitionsCommand");
var _describeResourcePoliciesCommand = require("./commands/DescribeResourcePoliciesCommand");
var _describeSubscriptionFiltersCommand = require("./commands/DescribeSubscriptionFiltersCommand");
var _disassociateKmsKeyCommand = require("./commands/DisassociateKmsKeyCommand");
var _filterLogEventsCommand = require("./commands/FilterLogEventsCommand");
var _getLogEventsCommand = require("./commands/GetLogEventsCommand");
var _getLogGroupFieldsCommand = require("./commands/GetLogGroupFieldsCommand");
var _getLogRecordCommand = require("./commands/GetLogRecordCommand");
var _getQueryResultsCommand = require("./commands/GetQueryResultsCommand");
var _listTagsLogGroupCommand = require("./commands/ListTagsLogGroupCommand");
var _putDestinationCommand = require("./commands/PutDestinationCommand");
var _putDestinationPolicyCommand = require("./commands/PutDestinationPolicyCommand");
var _putLogEventsCommand = require("./commands/PutLogEventsCommand");
var _putMetricFilterCommand = require("./commands/PutMetricFilterCommand");
var _putQueryDefinitionCommand = require("./commands/PutQueryDefinitionCommand");
var _putResourcePolicyCommand = require("./commands/PutResourcePolicyCommand");
var _putRetentionPolicyCommand = require("./commands/PutRetentionPolicyCommand");
var _putSubscriptionFilterCommand = require("./commands/PutSubscriptionFilterCommand");
var _startQueryCommand = require("./commands/StartQueryCommand");
var _stopQueryCommand = require("./commands/StopQueryCommand");
var _tagLogGroupCommand = require("./commands/TagLogGroupCommand");
var _testMetricFilterCommand = require("./commands/TestMetricFilterCommand");
var _untagLogGroupCommand = require("./commands/UntagLogGroupCommand");
/**
 * <p>You can use Amazon CloudWatch Logs to monitor, store, and access your log files from
 *       EC2 instances, AWS CloudTrail, or other sources. You can then retrieve the associated
 *       log data from CloudWatch Logs using the CloudWatch console, CloudWatch Logs commands in the
 *       AWS CLI, CloudWatch Logs API, or CloudWatch Logs SDK.</p>
 *          <p>You can use CloudWatch Logs to:</p>
 *          <ul>
 *             <li>
 *                <p>
 *                   <b>Monitor logs from EC2 instances in real-time</b>: You
 *           can use CloudWatch Logs to monitor applications and systems using log data. For example,
 *           CloudWatch Logs can track the number of errors that occur in your application logs and
 *           send you a notification whenever the rate of errors exceeds a threshold that you specify.
 *           CloudWatch Logs uses your log data for monitoring so no code changes are required. For
 *           example, you can monitor application logs for specific literal terms (such as
 *           "NullReferenceException") or count the number of occurrences of a literal term at a
 *           particular position in log data (such as "404" status codes in an Apache access log). When
 *           the term you are searching for is found, CloudWatch Logs reports the data to a CloudWatch
 *           metric that you specify.</p>
 *             </li>
 *             <li>
 *                <p>
 *                   <b>Monitor AWS CloudTrail logged events</b>: You can
 *           create alarms in CloudWatch and receive notifications of particular API activity as
 *           captured by CloudTrail. You can use the notification to perform troubleshooting.</p>
 *             </li>
 *             <li>
 *                <p>
 *                   <b>Archive log data</b>: You can use CloudWatch Logs to
 *           store your log data in highly durable storage. You can change the log retention setting so
 *           that any log events older than this setting are automatically deleted. The CloudWatch Logs
 *           agent makes it easy to quickly send both rotated and non-rotated log data off of a host
 *           and into the log service. You can then access the raw log data when you need it.</p>
 *             </li>
 *          </ul>
 */ var CloudWatchLogs = /** @class */ function(_super) {
    (0, _tslib.__extends)(CloudWatchLogs, _super);
    function CloudWatchLogs() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CloudWatchLogs.prototype.associateKmsKey = function(args, optionsOrCb, cb) {
        var command = new (0, _associateKmsKeyCommand.AssociateKmsKeyCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CloudWatchLogs.prototype.cancelExportTask = function(args, optionsOrCb, cb) {
        var command = new (0, _cancelExportTaskCommand.CancelExportTaskCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CloudWatchLogs.prototype.createExportTask = function(args, optionsOrCb, cb) {
        var command = new (0, _createExportTaskCommand.CreateExportTaskCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CloudWatchLogs.prototype.createLogGroup = function(args, optionsOrCb, cb) {
        var command = new (0, _createLogGroupCommand.CreateLogGroupCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CloudWatchLogs.prototype.createLogStream = function(args, optionsOrCb, cb) {
        var command = new (0, _createLogStreamCommand.CreateLogStreamCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CloudWatchLogs.prototype.deleteDestination = function(args, optionsOrCb, cb) {
        var command = new (0, _deleteDestinationCommand.DeleteDestinationCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CloudWatchLogs.prototype.deleteLogGroup = function(args, optionsOrCb, cb) {
        var command = new (0, _deleteLogGroupCommand.DeleteLogGroupCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CloudWatchLogs.prototype.deleteLogStream = function(args, optionsOrCb, cb) {
        var command = new (0, _deleteLogStreamCommand.DeleteLogStreamCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CloudWatchLogs.prototype.deleteMetricFilter = function(args, optionsOrCb, cb) {
        var command = new (0, _deleteMetricFilterCommand.DeleteMetricFilterCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CloudWatchLogs.prototype.deleteQueryDefinition = function(args, optionsOrCb, cb) {
        var command = new (0, _deleteQueryDefinitionCommand.DeleteQueryDefinitionCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CloudWatchLogs.prototype.deleteResourcePolicy = function(args, optionsOrCb, cb) {
        var command = new (0, _deleteResourcePolicyCommand.DeleteResourcePolicyCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CloudWatchLogs.prototype.deleteRetentionPolicy = function(args, optionsOrCb, cb) {
        var command = new (0, _deleteRetentionPolicyCommand.DeleteRetentionPolicyCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CloudWatchLogs.prototype.deleteSubscriptionFilter = function(args, optionsOrCb, cb) {
        var command = new (0, _deleteSubscriptionFilterCommand.DeleteSubscriptionFilterCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CloudWatchLogs.prototype.describeDestinations = function(args, optionsOrCb, cb) {
        var command = new (0, _describeDestinationsCommand.DescribeDestinationsCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CloudWatchLogs.prototype.describeExportTasks = function(args, optionsOrCb, cb) {
        var command = new (0, _describeExportTasksCommand.DescribeExportTasksCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CloudWatchLogs.prototype.describeLogGroups = function(args, optionsOrCb, cb) {
        var command = new (0, _describeLogGroupsCommand.DescribeLogGroupsCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CloudWatchLogs.prototype.describeLogStreams = function(args, optionsOrCb, cb) {
        var command = new (0, _describeLogStreamsCommand.DescribeLogStreamsCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CloudWatchLogs.prototype.describeMetricFilters = function(args, optionsOrCb, cb) {
        var command = new (0, _describeMetricFiltersCommand.DescribeMetricFiltersCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CloudWatchLogs.prototype.describeQueries = function(args, optionsOrCb, cb) {
        var command = new (0, _describeQueriesCommand.DescribeQueriesCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CloudWatchLogs.prototype.describeQueryDefinitions = function(args, optionsOrCb, cb) {
        var command = new (0, _describeQueryDefinitionsCommand.DescribeQueryDefinitionsCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CloudWatchLogs.prototype.describeResourcePolicies = function(args, optionsOrCb, cb) {
        var command = new (0, _describeResourcePoliciesCommand.DescribeResourcePoliciesCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CloudWatchLogs.prototype.describeSubscriptionFilters = function(args, optionsOrCb, cb) {
        var command = new (0, _describeSubscriptionFiltersCommand.DescribeSubscriptionFiltersCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CloudWatchLogs.prototype.disassociateKmsKey = function(args, optionsOrCb, cb) {
        var command = new (0, _disassociateKmsKeyCommand.DisassociateKmsKeyCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CloudWatchLogs.prototype.filterLogEvents = function(args, optionsOrCb, cb) {
        var command = new (0, _filterLogEventsCommand.FilterLogEventsCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CloudWatchLogs.prototype.getLogEvents = function(args, optionsOrCb, cb) {
        var command = new (0, _getLogEventsCommand.GetLogEventsCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CloudWatchLogs.prototype.getLogGroupFields = function(args, optionsOrCb, cb) {
        var command = new (0, _getLogGroupFieldsCommand.GetLogGroupFieldsCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CloudWatchLogs.prototype.getLogRecord = function(args, optionsOrCb, cb) {
        var command = new (0, _getLogRecordCommand.GetLogRecordCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CloudWatchLogs.prototype.getQueryResults = function(args, optionsOrCb, cb) {
        var command = new (0, _getQueryResultsCommand.GetQueryResultsCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CloudWatchLogs.prototype.listTagsLogGroup = function(args, optionsOrCb, cb) {
        var command = new (0, _listTagsLogGroupCommand.ListTagsLogGroupCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CloudWatchLogs.prototype.putDestination = function(args, optionsOrCb, cb) {
        var command = new (0, _putDestinationCommand.PutDestinationCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CloudWatchLogs.prototype.putDestinationPolicy = function(args, optionsOrCb, cb) {
        var command = new (0, _putDestinationPolicyCommand.PutDestinationPolicyCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CloudWatchLogs.prototype.putLogEvents = function(args, optionsOrCb, cb) {
        var command = new (0, _putLogEventsCommand.PutLogEventsCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CloudWatchLogs.prototype.putMetricFilter = function(args, optionsOrCb, cb) {
        var command = new (0, _putMetricFilterCommand.PutMetricFilterCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CloudWatchLogs.prototype.putQueryDefinition = function(args, optionsOrCb, cb) {
        var command = new (0, _putQueryDefinitionCommand.PutQueryDefinitionCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CloudWatchLogs.prototype.putResourcePolicy = function(args, optionsOrCb, cb) {
        var command = new (0, _putResourcePolicyCommand.PutResourcePolicyCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CloudWatchLogs.prototype.putRetentionPolicy = function(args, optionsOrCb, cb) {
        var command = new (0, _putRetentionPolicyCommand.PutRetentionPolicyCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CloudWatchLogs.prototype.putSubscriptionFilter = function(args, optionsOrCb, cb) {
        var command = new (0, _putSubscriptionFilterCommand.PutSubscriptionFilterCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CloudWatchLogs.prototype.startQuery = function(args, optionsOrCb, cb) {
        var command = new (0, _startQueryCommand.StartQueryCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CloudWatchLogs.prototype.stopQuery = function(args, optionsOrCb, cb) {
        var command = new (0, _stopQueryCommand.StopQueryCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CloudWatchLogs.prototype.tagLogGroup = function(args, optionsOrCb, cb) {
        var command = new (0, _tagLogGroupCommand.TagLogGroupCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CloudWatchLogs.prototype.testMetricFilter = function(args, optionsOrCb, cb) {
        var command = new (0, _testMetricFilterCommand.TestMetricFilterCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CloudWatchLogs.prototype.untagLogGroup = function(args, optionsOrCb, cb) {
        var command = new (0, _untagLogGroupCommand.UntagLogGroupCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    return CloudWatchLogs;
}((0, _cloudWatchLogsClient.CloudWatchLogsClient));

},{"tslib":"lRdW5","./CloudWatchLogsClient":"d0U1q","./commands/AssociateKmsKeyCommand":"k4WZy","./commands/CancelExportTaskCommand":"lGPz5","./commands/CreateExportTaskCommand":"cHZt6","./commands/CreateLogGroupCommand":"cZDs8","./commands/CreateLogStreamCommand":"kESLR","./commands/DeleteDestinationCommand":"eGnLp","./commands/DeleteLogGroupCommand":"k4NJk","./commands/DeleteLogStreamCommand":"b7ePR","./commands/DeleteMetricFilterCommand":"iuN0L","./commands/DeleteQueryDefinitionCommand":"l7G67","./commands/DeleteResourcePolicyCommand":"3bkx1","./commands/DeleteRetentionPolicyCommand":"ykCfV","./commands/DeleteSubscriptionFilterCommand":"2mBar","./commands/DescribeDestinationsCommand":"gW1q6","./commands/DescribeExportTasksCommand":"gyEdP","./commands/DescribeLogGroupsCommand":"eP5yc","./commands/DescribeLogStreamsCommand":"a3nMC","./commands/DescribeMetricFiltersCommand":"6Xo3P","./commands/DescribeQueriesCommand":"4jf0G","./commands/DescribeQueryDefinitionsCommand":"lWsi5","./commands/DescribeResourcePoliciesCommand":"adBnC","./commands/DescribeSubscriptionFiltersCommand":"bj8Le","./commands/DisassociateKmsKeyCommand":"f4qhL","./commands/FilterLogEventsCommand":"eVZ5x","./commands/GetLogEventsCommand":"aQs9i","./commands/GetLogGroupFieldsCommand":"2YmeP","./commands/GetLogRecordCommand":"l1BiR","./commands/GetQueryResultsCommand":"aMyWT","./commands/ListTagsLogGroupCommand":"i6kRK","./commands/PutDestinationCommand":"lkjty","./commands/PutDestinationPolicyCommand":"ad16f","./commands/PutLogEventsCommand":"fjHYs","./commands/PutMetricFilterCommand":"3E6xe","./commands/PutQueryDefinitionCommand":"eCnCq","./commands/PutResourcePolicyCommand":"4oFp5","./commands/PutRetentionPolicyCommand":"hoP3q","./commands/PutSubscriptionFilterCommand":"38fYM","./commands/StartQueryCommand":"fsVSG","./commands/StopQueryCommand":"aodZ0","./commands/TagLogGroupCommand":"43ptU","./commands/TestMetricFilterCommand":"jWtrJ","./commands/UntagLogGroupCommand":"hUuTM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"k4WZy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AssociateKmsKeyCommand", ()=>AssociateKmsKeyCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Associates the specified AWS Key Management Service (AWS KMS) customer master key (CMK) with the specified log group.</p>
 *          <p>Associating an AWS KMS CMK with a log group overrides any existing associations between the log group and a CMK.
 *       After a CMK is associated with a log group, all newly ingested data for the log group is encrypted using the CMK.
 *       This association is stored as long as the data encrypted with the CMK is still within Amazon CloudWatch Logs.
 *       This enables Amazon CloudWatch Logs to decrypt this data whenever it is requested.</p>
 *          <important>
 *             <p>CloudWatch Logs supports only symmetric CMKs. Do not use an associate an asymmetric CMK
 *         with your log group. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html">Using Symmetric and Asymmetric
 *           Keys</a>.</p>
 *          </important>
 *          <p>It can take up to 5 minutes for this operation to take effect.</p>
 *          <p>If you attempt to associate a CMK with a log group but the CMK does not exist or the
 *       CMK is disabled, you receive an <code>InvalidParameterException</code> error. </p>
 */ var AssociateKmsKeyCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(AssociateKmsKeyCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function AssociateKmsKeyCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ AssociateKmsKeyCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CloudWatchLogsClient";
        var commandName = "AssociateKmsKeyCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.AssociateKmsKeyRequest).filterSensitiveLog,
            outputFilterSensitiveLog: function(output) {
                return output;
            }
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    AssociateKmsKeyCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1AssociateKmsKeyCommand)(input, context);
    };
    AssociateKmsKeyCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1AssociateKmsKeyCommand)(output, context);
    };
    return AssociateKmsKeyCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"hB4pg","../protocols/Aws_json1_1":"90twI","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hB4pg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AssociateKmsKeyRequest", ()=>AssociateKmsKeyRequest);
parcelHelpers.export(exports, "InvalidParameterException", ()=>InvalidParameterException);
parcelHelpers.export(exports, "OperationAbortedException", ()=>OperationAbortedException);
parcelHelpers.export(exports, "ResourceNotFoundException", ()=>ResourceNotFoundException);
parcelHelpers.export(exports, "ServiceUnavailableException", ()=>ServiceUnavailableException);
parcelHelpers.export(exports, "CancelExportTaskRequest", ()=>CancelExportTaskRequest);
parcelHelpers.export(exports, "InvalidOperationException", ()=>InvalidOperationException);
parcelHelpers.export(exports, "CreateExportTaskRequest", ()=>CreateExportTaskRequest);
parcelHelpers.export(exports, "CreateExportTaskResponse", ()=>CreateExportTaskResponse);
parcelHelpers.export(exports, "LimitExceededException", ()=>LimitExceededException);
parcelHelpers.export(exports, "ResourceAlreadyExistsException", ()=>ResourceAlreadyExistsException);
parcelHelpers.export(exports, "CreateLogGroupRequest", ()=>CreateLogGroupRequest);
parcelHelpers.export(exports, "CreateLogStreamRequest", ()=>CreateLogStreamRequest);
parcelHelpers.export(exports, "DataAlreadyAcceptedException", ()=>DataAlreadyAcceptedException);
parcelHelpers.export(exports, "DeleteDestinationRequest", ()=>DeleteDestinationRequest);
parcelHelpers.export(exports, "DeleteLogGroupRequest", ()=>DeleteLogGroupRequest);
parcelHelpers.export(exports, "DeleteLogStreamRequest", ()=>DeleteLogStreamRequest);
parcelHelpers.export(exports, "DeleteMetricFilterRequest", ()=>DeleteMetricFilterRequest);
parcelHelpers.export(exports, "DeleteQueryDefinitionRequest", ()=>DeleteQueryDefinitionRequest);
parcelHelpers.export(exports, "DeleteQueryDefinitionResponse", ()=>DeleteQueryDefinitionResponse);
parcelHelpers.export(exports, "DeleteResourcePolicyRequest", ()=>DeleteResourcePolicyRequest);
parcelHelpers.export(exports, "DeleteRetentionPolicyRequest", ()=>DeleteRetentionPolicyRequest);
parcelHelpers.export(exports, "DeleteSubscriptionFilterRequest", ()=>DeleteSubscriptionFilterRequest);
parcelHelpers.export(exports, "DescribeDestinationsRequest", ()=>DescribeDestinationsRequest);
parcelHelpers.export(exports, "Destination", ()=>Destination);
parcelHelpers.export(exports, "DescribeDestinationsResponse", ()=>DescribeDestinationsResponse);
parcelHelpers.export(exports, "ExportTaskStatusCode", ()=>ExportTaskStatusCode);
parcelHelpers.export(exports, "DescribeExportTasksRequest", ()=>DescribeExportTasksRequest);
parcelHelpers.export(exports, "ExportTaskExecutionInfo", ()=>ExportTaskExecutionInfo);
parcelHelpers.export(exports, "ExportTaskStatus", ()=>ExportTaskStatus);
parcelHelpers.export(exports, "ExportTask", ()=>ExportTask);
parcelHelpers.export(exports, "DescribeExportTasksResponse", ()=>DescribeExportTasksResponse);
parcelHelpers.export(exports, "DescribeLogGroupsRequest", ()=>DescribeLogGroupsRequest);
parcelHelpers.export(exports, "LogGroup", ()=>LogGroup);
parcelHelpers.export(exports, "DescribeLogGroupsResponse", ()=>DescribeLogGroupsResponse);
parcelHelpers.export(exports, "OrderBy", ()=>OrderBy);
parcelHelpers.export(exports, "DescribeLogStreamsRequest", ()=>DescribeLogStreamsRequest);
parcelHelpers.export(exports, "LogStream", ()=>LogStream);
parcelHelpers.export(exports, "DescribeLogStreamsResponse", ()=>DescribeLogStreamsResponse);
parcelHelpers.export(exports, "DescribeMetricFiltersRequest", ()=>DescribeMetricFiltersRequest);
parcelHelpers.export(exports, "MetricTransformation", ()=>MetricTransformation);
parcelHelpers.export(exports, "MetricFilter", ()=>MetricFilter);
parcelHelpers.export(exports, "DescribeMetricFiltersResponse", ()=>DescribeMetricFiltersResponse);
parcelHelpers.export(exports, "QueryStatus", ()=>QueryStatus);
parcelHelpers.export(exports, "DescribeQueriesRequest", ()=>DescribeQueriesRequest);
parcelHelpers.export(exports, "QueryInfo", ()=>QueryInfo);
parcelHelpers.export(exports, "DescribeQueriesResponse", ()=>DescribeQueriesResponse);
parcelHelpers.export(exports, "DescribeQueryDefinitionsRequest", ()=>DescribeQueryDefinitionsRequest);
parcelHelpers.export(exports, "QueryDefinition", ()=>QueryDefinition);
parcelHelpers.export(exports, "DescribeQueryDefinitionsResponse", ()=>DescribeQueryDefinitionsResponse);
parcelHelpers.export(exports, "DescribeResourcePoliciesRequest", ()=>DescribeResourcePoliciesRequest);
parcelHelpers.export(exports, "ResourcePolicy", ()=>ResourcePolicy);
parcelHelpers.export(exports, "DescribeResourcePoliciesResponse", ()=>DescribeResourcePoliciesResponse);
parcelHelpers.export(exports, "DescribeSubscriptionFiltersRequest", ()=>DescribeSubscriptionFiltersRequest);
parcelHelpers.export(exports, "Distribution", ()=>Distribution);
parcelHelpers.export(exports, "SubscriptionFilter", ()=>SubscriptionFilter);
parcelHelpers.export(exports, "DescribeSubscriptionFiltersResponse", ()=>DescribeSubscriptionFiltersResponse);
parcelHelpers.export(exports, "DisassociateKmsKeyRequest", ()=>DisassociateKmsKeyRequest);
parcelHelpers.export(exports, "FilteredLogEvent", ()=>FilteredLogEvent);
parcelHelpers.export(exports, "FilterLogEventsRequest", ()=>FilterLogEventsRequest);
parcelHelpers.export(exports, "SearchedLogStream", ()=>SearchedLogStream);
parcelHelpers.export(exports, "FilterLogEventsResponse", ()=>FilterLogEventsResponse);
parcelHelpers.export(exports, "GetLogEventsRequest", ()=>GetLogEventsRequest);
parcelHelpers.export(exports, "OutputLogEvent", ()=>OutputLogEvent);
parcelHelpers.export(exports, "GetLogEventsResponse", ()=>GetLogEventsResponse);
parcelHelpers.export(exports, "GetLogGroupFieldsRequest", ()=>GetLogGroupFieldsRequest);
parcelHelpers.export(exports, "LogGroupField", ()=>LogGroupField);
parcelHelpers.export(exports, "GetLogGroupFieldsResponse", ()=>GetLogGroupFieldsResponse);
parcelHelpers.export(exports, "GetLogRecordRequest", ()=>GetLogRecordRequest);
parcelHelpers.export(exports, "GetLogRecordResponse", ()=>GetLogRecordResponse);
parcelHelpers.export(exports, "GetQueryResultsRequest", ()=>GetQueryResultsRequest);
parcelHelpers.export(exports, "ResultField", ()=>ResultField);
parcelHelpers.export(exports, "QueryStatistics", ()=>QueryStatistics);
parcelHelpers.export(exports, "GetQueryResultsResponse", ()=>GetQueryResultsResponse);
parcelHelpers.export(exports, "InputLogEvent", ()=>InputLogEvent);
parcelHelpers.export(exports, "InvalidSequenceTokenException", ()=>InvalidSequenceTokenException);
parcelHelpers.export(exports, "ListTagsLogGroupRequest", ()=>ListTagsLogGroupRequest);
parcelHelpers.export(exports, "ListTagsLogGroupResponse", ()=>ListTagsLogGroupResponse);
parcelHelpers.export(exports, "PutDestinationRequest", ()=>PutDestinationRequest);
parcelHelpers.export(exports, "PutDestinationResponse", ()=>PutDestinationResponse);
parcelHelpers.export(exports, "PutDestinationPolicyRequest", ()=>PutDestinationPolicyRequest);
parcelHelpers.export(exports, "PutLogEventsRequest", ()=>PutLogEventsRequest);
parcelHelpers.export(exports, "RejectedLogEventsInfo", ()=>RejectedLogEventsInfo);
parcelHelpers.export(exports, "PutLogEventsResponse", ()=>PutLogEventsResponse);
parcelHelpers.export(exports, "UnrecognizedClientException", ()=>UnrecognizedClientException);
parcelHelpers.export(exports, "PutMetricFilterRequest", ()=>PutMetricFilterRequest);
parcelHelpers.export(exports, "PutQueryDefinitionRequest", ()=>PutQueryDefinitionRequest);
parcelHelpers.export(exports, "PutQueryDefinitionResponse", ()=>PutQueryDefinitionResponse);
parcelHelpers.export(exports, "PutResourcePolicyRequest", ()=>PutResourcePolicyRequest);
parcelHelpers.export(exports, "PutResourcePolicyResponse", ()=>PutResourcePolicyResponse);
parcelHelpers.export(exports, "PutRetentionPolicyRequest", ()=>PutRetentionPolicyRequest);
parcelHelpers.export(exports, "PutSubscriptionFilterRequest", ()=>PutSubscriptionFilterRequest);
parcelHelpers.export(exports, "QueryCompileErrorLocation", ()=>QueryCompileErrorLocation);
parcelHelpers.export(exports, "QueryCompileError", ()=>QueryCompileError);
parcelHelpers.export(exports, "MalformedQueryException", ()=>MalformedQueryException);
parcelHelpers.export(exports, "StartQueryRequest", ()=>StartQueryRequest);
parcelHelpers.export(exports, "StartQueryResponse", ()=>StartQueryResponse);
parcelHelpers.export(exports, "StopQueryRequest", ()=>StopQueryRequest);
parcelHelpers.export(exports, "StopQueryResponse", ()=>StopQueryResponse);
parcelHelpers.export(exports, "TagLogGroupRequest", ()=>TagLogGroupRequest);
parcelHelpers.export(exports, "TestMetricFilterRequest", ()=>TestMetricFilterRequest);
parcelHelpers.export(exports, "MetricFilterMatchRecord", ()=>MetricFilterMatchRecord);
parcelHelpers.export(exports, "TestMetricFilterResponse", ()=>TestMetricFilterResponse);
parcelHelpers.export(exports, "UntagLogGroupRequest", ()=>UntagLogGroupRequest);
var _tslib = require("tslib");
var AssociateKmsKeyRequest;
(function(AssociateKmsKeyRequest) {
    AssociateKmsKeyRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(AssociateKmsKeyRequest || (AssociateKmsKeyRequest = {}));
var InvalidParameterException;
(function(InvalidParameterException) {
    InvalidParameterException.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(InvalidParameterException || (InvalidParameterException = {}));
var OperationAbortedException;
(function(OperationAbortedException) {
    OperationAbortedException.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(OperationAbortedException || (OperationAbortedException = {}));
var ResourceNotFoundException;
(function(ResourceNotFoundException) {
    ResourceNotFoundException.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ResourceNotFoundException || (ResourceNotFoundException = {}));
var ServiceUnavailableException;
(function(ServiceUnavailableException) {
    ServiceUnavailableException.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ServiceUnavailableException || (ServiceUnavailableException = {}));
var CancelExportTaskRequest;
(function(CancelExportTaskRequest) {
    CancelExportTaskRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(CancelExportTaskRequest || (CancelExportTaskRequest = {}));
var InvalidOperationException;
(function(InvalidOperationException) {
    InvalidOperationException.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(InvalidOperationException || (InvalidOperationException = {}));
var CreateExportTaskRequest;
(function(CreateExportTaskRequest) {
    CreateExportTaskRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(CreateExportTaskRequest || (CreateExportTaskRequest = {}));
var CreateExportTaskResponse;
(function(CreateExportTaskResponse) {
    CreateExportTaskResponse.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(CreateExportTaskResponse || (CreateExportTaskResponse = {}));
var LimitExceededException;
(function(LimitExceededException) {
    LimitExceededException.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(LimitExceededException || (LimitExceededException = {}));
var ResourceAlreadyExistsException;
(function(ResourceAlreadyExistsException) {
    ResourceAlreadyExistsException.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ResourceAlreadyExistsException || (ResourceAlreadyExistsException = {}));
var CreateLogGroupRequest;
(function(CreateLogGroupRequest) {
    CreateLogGroupRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(CreateLogGroupRequest || (CreateLogGroupRequest = {}));
var CreateLogStreamRequest;
(function(CreateLogStreamRequest) {
    CreateLogStreamRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(CreateLogStreamRequest || (CreateLogStreamRequest = {}));
var DataAlreadyAcceptedException;
(function(DataAlreadyAcceptedException) {
    DataAlreadyAcceptedException.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DataAlreadyAcceptedException || (DataAlreadyAcceptedException = {}));
var DeleteDestinationRequest;
(function(DeleteDestinationRequest) {
    DeleteDestinationRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DeleteDestinationRequest || (DeleteDestinationRequest = {}));
var DeleteLogGroupRequest;
(function(DeleteLogGroupRequest) {
    DeleteLogGroupRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DeleteLogGroupRequest || (DeleteLogGroupRequest = {}));
var DeleteLogStreamRequest;
(function(DeleteLogStreamRequest) {
    DeleteLogStreamRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DeleteLogStreamRequest || (DeleteLogStreamRequest = {}));
var DeleteMetricFilterRequest;
(function(DeleteMetricFilterRequest) {
    DeleteMetricFilterRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DeleteMetricFilterRequest || (DeleteMetricFilterRequest = {}));
var DeleteQueryDefinitionRequest;
(function(DeleteQueryDefinitionRequest) {
    DeleteQueryDefinitionRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DeleteQueryDefinitionRequest || (DeleteQueryDefinitionRequest = {}));
var DeleteQueryDefinitionResponse;
(function(DeleteQueryDefinitionResponse) {
    DeleteQueryDefinitionResponse.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DeleteQueryDefinitionResponse || (DeleteQueryDefinitionResponse = {}));
var DeleteResourcePolicyRequest;
(function(DeleteResourcePolicyRequest) {
    DeleteResourcePolicyRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DeleteResourcePolicyRequest || (DeleteResourcePolicyRequest = {}));
var DeleteRetentionPolicyRequest;
(function(DeleteRetentionPolicyRequest) {
    DeleteRetentionPolicyRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DeleteRetentionPolicyRequest || (DeleteRetentionPolicyRequest = {}));
var DeleteSubscriptionFilterRequest;
(function(DeleteSubscriptionFilterRequest) {
    DeleteSubscriptionFilterRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DeleteSubscriptionFilterRequest || (DeleteSubscriptionFilterRequest = {}));
var DescribeDestinationsRequest;
(function(DescribeDestinationsRequest) {
    DescribeDestinationsRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DescribeDestinationsRequest || (DescribeDestinationsRequest = {}));
var Destination;
(function(Destination) {
    Destination.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(Destination || (Destination = {}));
var DescribeDestinationsResponse;
(function(DescribeDestinationsResponse) {
    DescribeDestinationsResponse.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DescribeDestinationsResponse || (DescribeDestinationsResponse = {}));
var ExportTaskStatusCode;
(function(ExportTaskStatusCode) {
    ExportTaskStatusCode["CANCELLED"] = "CANCELLED";
    ExportTaskStatusCode["COMPLETED"] = "COMPLETED";
    ExportTaskStatusCode["FAILED"] = "FAILED";
    ExportTaskStatusCode["PENDING"] = "PENDING";
    ExportTaskStatusCode["PENDING_CANCEL"] = "PENDING_CANCEL";
    ExportTaskStatusCode["RUNNING"] = "RUNNING";
})(ExportTaskStatusCode || (ExportTaskStatusCode = {}));
var DescribeExportTasksRequest;
(function(DescribeExportTasksRequest) {
    DescribeExportTasksRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DescribeExportTasksRequest || (DescribeExportTasksRequest = {}));
var ExportTaskExecutionInfo;
(function(ExportTaskExecutionInfo) {
    ExportTaskExecutionInfo.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ExportTaskExecutionInfo || (ExportTaskExecutionInfo = {}));
var ExportTaskStatus;
(function(ExportTaskStatus) {
    ExportTaskStatus.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ExportTaskStatus || (ExportTaskStatus = {}));
var ExportTask;
(function(ExportTask) {
    ExportTask.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ExportTask || (ExportTask = {}));
var DescribeExportTasksResponse;
(function(DescribeExportTasksResponse) {
    DescribeExportTasksResponse.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DescribeExportTasksResponse || (DescribeExportTasksResponse = {}));
var DescribeLogGroupsRequest;
(function(DescribeLogGroupsRequest) {
    DescribeLogGroupsRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DescribeLogGroupsRequest || (DescribeLogGroupsRequest = {}));
var LogGroup;
(function(LogGroup) {
    LogGroup.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(LogGroup || (LogGroup = {}));
var DescribeLogGroupsResponse;
(function(DescribeLogGroupsResponse) {
    DescribeLogGroupsResponse.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DescribeLogGroupsResponse || (DescribeLogGroupsResponse = {}));
var OrderBy;
(function(OrderBy) {
    OrderBy["LastEventTime"] = "LastEventTime";
    OrderBy["LogStreamName"] = "LogStreamName";
})(OrderBy || (OrderBy = {}));
var DescribeLogStreamsRequest;
(function(DescribeLogStreamsRequest) {
    DescribeLogStreamsRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DescribeLogStreamsRequest || (DescribeLogStreamsRequest = {}));
var LogStream;
(function(LogStream) {
    LogStream.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(LogStream || (LogStream = {}));
var DescribeLogStreamsResponse;
(function(DescribeLogStreamsResponse) {
    DescribeLogStreamsResponse.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DescribeLogStreamsResponse || (DescribeLogStreamsResponse = {}));
var DescribeMetricFiltersRequest;
(function(DescribeMetricFiltersRequest) {
    DescribeMetricFiltersRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DescribeMetricFiltersRequest || (DescribeMetricFiltersRequest = {}));
var MetricTransformation;
(function(MetricTransformation) {
    MetricTransformation.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(MetricTransformation || (MetricTransformation = {}));
var MetricFilter;
(function(MetricFilter) {
    MetricFilter.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(MetricFilter || (MetricFilter = {}));
var DescribeMetricFiltersResponse;
(function(DescribeMetricFiltersResponse) {
    DescribeMetricFiltersResponse.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DescribeMetricFiltersResponse || (DescribeMetricFiltersResponse = {}));
var QueryStatus;
(function(QueryStatus) {
    QueryStatus["Cancelled"] = "Cancelled";
    QueryStatus["Complete"] = "Complete";
    QueryStatus["Failed"] = "Failed";
    QueryStatus["Running"] = "Running";
    QueryStatus["Scheduled"] = "Scheduled";
})(QueryStatus || (QueryStatus = {}));
var DescribeQueriesRequest;
(function(DescribeQueriesRequest) {
    DescribeQueriesRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DescribeQueriesRequest || (DescribeQueriesRequest = {}));
var QueryInfo;
(function(QueryInfo) {
    QueryInfo.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(QueryInfo || (QueryInfo = {}));
var DescribeQueriesResponse;
(function(DescribeQueriesResponse) {
    DescribeQueriesResponse.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DescribeQueriesResponse || (DescribeQueriesResponse = {}));
var DescribeQueryDefinitionsRequest;
(function(DescribeQueryDefinitionsRequest) {
    DescribeQueryDefinitionsRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DescribeQueryDefinitionsRequest || (DescribeQueryDefinitionsRequest = {}));
var QueryDefinition;
(function(QueryDefinition) {
    QueryDefinition.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(QueryDefinition || (QueryDefinition = {}));
var DescribeQueryDefinitionsResponse;
(function(DescribeQueryDefinitionsResponse) {
    DescribeQueryDefinitionsResponse.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DescribeQueryDefinitionsResponse || (DescribeQueryDefinitionsResponse = {}));
var DescribeResourcePoliciesRequest;
(function(DescribeResourcePoliciesRequest) {
    DescribeResourcePoliciesRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DescribeResourcePoliciesRequest || (DescribeResourcePoliciesRequest = {}));
var ResourcePolicy;
(function(ResourcePolicy) {
    ResourcePolicy.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ResourcePolicy || (ResourcePolicy = {}));
var DescribeResourcePoliciesResponse;
(function(DescribeResourcePoliciesResponse) {
    DescribeResourcePoliciesResponse.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DescribeResourcePoliciesResponse || (DescribeResourcePoliciesResponse = {}));
var DescribeSubscriptionFiltersRequest;
(function(DescribeSubscriptionFiltersRequest) {
    DescribeSubscriptionFiltersRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DescribeSubscriptionFiltersRequest || (DescribeSubscriptionFiltersRequest = {}));
var Distribution;
(function(Distribution) {
    Distribution["ByLogStream"] = "ByLogStream";
    Distribution["Random"] = "Random";
})(Distribution || (Distribution = {}));
var SubscriptionFilter;
(function(SubscriptionFilter) {
    SubscriptionFilter.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(SubscriptionFilter || (SubscriptionFilter = {}));
var DescribeSubscriptionFiltersResponse;
(function(DescribeSubscriptionFiltersResponse) {
    DescribeSubscriptionFiltersResponse.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DescribeSubscriptionFiltersResponse || (DescribeSubscriptionFiltersResponse = {}));
var DisassociateKmsKeyRequest;
(function(DisassociateKmsKeyRequest) {
    DisassociateKmsKeyRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DisassociateKmsKeyRequest || (DisassociateKmsKeyRequest = {}));
var FilteredLogEvent;
(function(FilteredLogEvent) {
    FilteredLogEvent.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(FilteredLogEvent || (FilteredLogEvent = {}));
var FilterLogEventsRequest;
(function(FilterLogEventsRequest) {
    FilterLogEventsRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(FilterLogEventsRequest || (FilterLogEventsRequest = {}));
var SearchedLogStream;
(function(SearchedLogStream) {
    SearchedLogStream.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(SearchedLogStream || (SearchedLogStream = {}));
var FilterLogEventsResponse;
(function(FilterLogEventsResponse) {
    FilterLogEventsResponse.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(FilterLogEventsResponse || (FilterLogEventsResponse = {}));
var GetLogEventsRequest;
(function(GetLogEventsRequest) {
    GetLogEventsRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetLogEventsRequest || (GetLogEventsRequest = {}));
var OutputLogEvent;
(function(OutputLogEvent) {
    OutputLogEvent.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(OutputLogEvent || (OutputLogEvent = {}));
var GetLogEventsResponse;
(function(GetLogEventsResponse) {
    GetLogEventsResponse.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetLogEventsResponse || (GetLogEventsResponse = {}));
var GetLogGroupFieldsRequest;
(function(GetLogGroupFieldsRequest) {
    GetLogGroupFieldsRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetLogGroupFieldsRequest || (GetLogGroupFieldsRequest = {}));
var LogGroupField;
(function(LogGroupField) {
    LogGroupField.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(LogGroupField || (LogGroupField = {}));
var GetLogGroupFieldsResponse;
(function(GetLogGroupFieldsResponse) {
    GetLogGroupFieldsResponse.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetLogGroupFieldsResponse || (GetLogGroupFieldsResponse = {}));
var GetLogRecordRequest;
(function(GetLogRecordRequest) {
    GetLogRecordRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetLogRecordRequest || (GetLogRecordRequest = {}));
var GetLogRecordResponse;
(function(GetLogRecordResponse) {
    GetLogRecordResponse.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetLogRecordResponse || (GetLogRecordResponse = {}));
var GetQueryResultsRequest;
(function(GetQueryResultsRequest) {
    GetQueryResultsRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetQueryResultsRequest || (GetQueryResultsRequest = {}));
var ResultField;
(function(ResultField) {
    ResultField.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ResultField || (ResultField = {}));
var QueryStatistics;
(function(QueryStatistics) {
    QueryStatistics.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(QueryStatistics || (QueryStatistics = {}));
var GetQueryResultsResponse;
(function(GetQueryResultsResponse) {
    GetQueryResultsResponse.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetQueryResultsResponse || (GetQueryResultsResponse = {}));
var InputLogEvent;
(function(InputLogEvent) {
    InputLogEvent.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(InputLogEvent || (InputLogEvent = {}));
var InvalidSequenceTokenException;
(function(InvalidSequenceTokenException) {
    InvalidSequenceTokenException.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(InvalidSequenceTokenException || (InvalidSequenceTokenException = {}));
var ListTagsLogGroupRequest;
(function(ListTagsLogGroupRequest) {
    ListTagsLogGroupRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ListTagsLogGroupRequest || (ListTagsLogGroupRequest = {}));
var ListTagsLogGroupResponse;
(function(ListTagsLogGroupResponse) {
    ListTagsLogGroupResponse.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ListTagsLogGroupResponse || (ListTagsLogGroupResponse = {}));
var PutDestinationRequest;
(function(PutDestinationRequest) {
    PutDestinationRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(PutDestinationRequest || (PutDestinationRequest = {}));
var PutDestinationResponse;
(function(PutDestinationResponse) {
    PutDestinationResponse.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(PutDestinationResponse || (PutDestinationResponse = {}));
var PutDestinationPolicyRequest;
(function(PutDestinationPolicyRequest) {
    PutDestinationPolicyRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(PutDestinationPolicyRequest || (PutDestinationPolicyRequest = {}));
var PutLogEventsRequest;
(function(PutLogEventsRequest) {
    PutLogEventsRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(PutLogEventsRequest || (PutLogEventsRequest = {}));
var RejectedLogEventsInfo;
(function(RejectedLogEventsInfo) {
    RejectedLogEventsInfo.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(RejectedLogEventsInfo || (RejectedLogEventsInfo = {}));
var PutLogEventsResponse;
(function(PutLogEventsResponse) {
    PutLogEventsResponse.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(PutLogEventsResponse || (PutLogEventsResponse = {}));
var UnrecognizedClientException;
(function(UnrecognizedClientException) {
    UnrecognizedClientException.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(UnrecognizedClientException || (UnrecognizedClientException = {}));
var PutMetricFilterRequest;
(function(PutMetricFilterRequest) {
    PutMetricFilterRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(PutMetricFilterRequest || (PutMetricFilterRequest = {}));
var PutQueryDefinitionRequest;
(function(PutQueryDefinitionRequest) {
    PutQueryDefinitionRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(PutQueryDefinitionRequest || (PutQueryDefinitionRequest = {}));
var PutQueryDefinitionResponse;
(function(PutQueryDefinitionResponse) {
    PutQueryDefinitionResponse.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(PutQueryDefinitionResponse || (PutQueryDefinitionResponse = {}));
var PutResourcePolicyRequest;
(function(PutResourcePolicyRequest) {
    PutResourcePolicyRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(PutResourcePolicyRequest || (PutResourcePolicyRequest = {}));
var PutResourcePolicyResponse;
(function(PutResourcePolicyResponse) {
    PutResourcePolicyResponse.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(PutResourcePolicyResponse || (PutResourcePolicyResponse = {}));
var PutRetentionPolicyRequest;
(function(PutRetentionPolicyRequest) {
    PutRetentionPolicyRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(PutRetentionPolicyRequest || (PutRetentionPolicyRequest = {}));
var PutSubscriptionFilterRequest;
(function(PutSubscriptionFilterRequest) {
    PutSubscriptionFilterRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(PutSubscriptionFilterRequest || (PutSubscriptionFilterRequest = {}));
var QueryCompileErrorLocation;
(function(QueryCompileErrorLocation) {
    QueryCompileErrorLocation.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(QueryCompileErrorLocation || (QueryCompileErrorLocation = {}));
var QueryCompileError;
(function(QueryCompileError) {
    QueryCompileError.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(QueryCompileError || (QueryCompileError = {}));
var MalformedQueryException;
(function(MalformedQueryException) {
    MalformedQueryException.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(MalformedQueryException || (MalformedQueryException = {}));
var StartQueryRequest;
(function(StartQueryRequest) {
    StartQueryRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(StartQueryRequest || (StartQueryRequest = {}));
var StartQueryResponse;
(function(StartQueryResponse) {
    StartQueryResponse.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(StartQueryResponse || (StartQueryResponse = {}));
var StopQueryRequest;
(function(StopQueryRequest) {
    StopQueryRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(StopQueryRequest || (StopQueryRequest = {}));
var StopQueryResponse;
(function(StopQueryResponse) {
    StopQueryResponse.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(StopQueryResponse || (StopQueryResponse = {}));
var TagLogGroupRequest;
(function(TagLogGroupRequest) {
    TagLogGroupRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(TagLogGroupRequest || (TagLogGroupRequest = {}));
var TestMetricFilterRequest;
(function(TestMetricFilterRequest) {
    TestMetricFilterRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(TestMetricFilterRequest || (TestMetricFilterRequest = {}));
var MetricFilterMatchRecord;
(function(MetricFilterMatchRecord) {
    MetricFilterMatchRecord.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(MetricFilterMatchRecord || (MetricFilterMatchRecord = {}));
var TestMetricFilterResponse;
(function(TestMetricFilterResponse) {
    TestMetricFilterResponse.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(TestMetricFilterResponse || (TestMetricFilterResponse = {}));
var UntagLogGroupRequest;
(function(UntagLogGroupRequest) {
    UntagLogGroupRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(UntagLogGroupRequest || (UntagLogGroupRequest = {}));

},{"tslib":"lRdW5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"90twI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "serializeAws_json1_1AssociateKmsKeyCommand", ()=>serializeAws_json1_1AssociateKmsKeyCommand);
parcelHelpers.export(exports, "serializeAws_json1_1CancelExportTaskCommand", ()=>serializeAws_json1_1CancelExportTaskCommand);
parcelHelpers.export(exports, "serializeAws_json1_1CreateExportTaskCommand", ()=>serializeAws_json1_1CreateExportTaskCommand);
parcelHelpers.export(exports, "serializeAws_json1_1CreateLogGroupCommand", ()=>serializeAws_json1_1CreateLogGroupCommand);
parcelHelpers.export(exports, "serializeAws_json1_1CreateLogStreamCommand", ()=>serializeAws_json1_1CreateLogStreamCommand);
parcelHelpers.export(exports, "serializeAws_json1_1DeleteDestinationCommand", ()=>serializeAws_json1_1DeleteDestinationCommand);
parcelHelpers.export(exports, "serializeAws_json1_1DeleteLogGroupCommand", ()=>serializeAws_json1_1DeleteLogGroupCommand);
parcelHelpers.export(exports, "serializeAws_json1_1DeleteLogStreamCommand", ()=>serializeAws_json1_1DeleteLogStreamCommand);
parcelHelpers.export(exports, "serializeAws_json1_1DeleteMetricFilterCommand", ()=>serializeAws_json1_1DeleteMetricFilterCommand);
parcelHelpers.export(exports, "serializeAws_json1_1DeleteQueryDefinitionCommand", ()=>serializeAws_json1_1DeleteQueryDefinitionCommand);
parcelHelpers.export(exports, "serializeAws_json1_1DeleteResourcePolicyCommand", ()=>serializeAws_json1_1DeleteResourcePolicyCommand);
parcelHelpers.export(exports, "serializeAws_json1_1DeleteRetentionPolicyCommand", ()=>serializeAws_json1_1DeleteRetentionPolicyCommand);
parcelHelpers.export(exports, "serializeAws_json1_1DeleteSubscriptionFilterCommand", ()=>serializeAws_json1_1DeleteSubscriptionFilterCommand);
parcelHelpers.export(exports, "serializeAws_json1_1DescribeDestinationsCommand", ()=>serializeAws_json1_1DescribeDestinationsCommand);
parcelHelpers.export(exports, "serializeAws_json1_1DescribeExportTasksCommand", ()=>serializeAws_json1_1DescribeExportTasksCommand);
parcelHelpers.export(exports, "serializeAws_json1_1DescribeLogGroupsCommand", ()=>serializeAws_json1_1DescribeLogGroupsCommand);
parcelHelpers.export(exports, "serializeAws_json1_1DescribeLogStreamsCommand", ()=>serializeAws_json1_1DescribeLogStreamsCommand);
parcelHelpers.export(exports, "serializeAws_json1_1DescribeMetricFiltersCommand", ()=>serializeAws_json1_1DescribeMetricFiltersCommand);
parcelHelpers.export(exports, "serializeAws_json1_1DescribeQueriesCommand", ()=>serializeAws_json1_1DescribeQueriesCommand);
parcelHelpers.export(exports, "serializeAws_json1_1DescribeQueryDefinitionsCommand", ()=>serializeAws_json1_1DescribeQueryDefinitionsCommand);
parcelHelpers.export(exports, "serializeAws_json1_1DescribeResourcePoliciesCommand", ()=>serializeAws_json1_1DescribeResourcePoliciesCommand);
parcelHelpers.export(exports, "serializeAws_json1_1DescribeSubscriptionFiltersCommand", ()=>serializeAws_json1_1DescribeSubscriptionFiltersCommand);
parcelHelpers.export(exports, "serializeAws_json1_1DisassociateKmsKeyCommand", ()=>serializeAws_json1_1DisassociateKmsKeyCommand);
parcelHelpers.export(exports, "serializeAws_json1_1FilterLogEventsCommand", ()=>serializeAws_json1_1FilterLogEventsCommand);
parcelHelpers.export(exports, "serializeAws_json1_1GetLogEventsCommand", ()=>serializeAws_json1_1GetLogEventsCommand);
parcelHelpers.export(exports, "serializeAws_json1_1GetLogGroupFieldsCommand", ()=>serializeAws_json1_1GetLogGroupFieldsCommand);
parcelHelpers.export(exports, "serializeAws_json1_1GetLogRecordCommand", ()=>serializeAws_json1_1GetLogRecordCommand);
parcelHelpers.export(exports, "serializeAws_json1_1GetQueryResultsCommand", ()=>serializeAws_json1_1GetQueryResultsCommand);
parcelHelpers.export(exports, "serializeAws_json1_1ListTagsLogGroupCommand", ()=>serializeAws_json1_1ListTagsLogGroupCommand);
parcelHelpers.export(exports, "serializeAws_json1_1PutDestinationCommand", ()=>serializeAws_json1_1PutDestinationCommand);
parcelHelpers.export(exports, "serializeAws_json1_1PutDestinationPolicyCommand", ()=>serializeAws_json1_1PutDestinationPolicyCommand);
parcelHelpers.export(exports, "serializeAws_json1_1PutLogEventsCommand", ()=>serializeAws_json1_1PutLogEventsCommand);
parcelHelpers.export(exports, "serializeAws_json1_1PutMetricFilterCommand", ()=>serializeAws_json1_1PutMetricFilterCommand);
parcelHelpers.export(exports, "serializeAws_json1_1PutQueryDefinitionCommand", ()=>serializeAws_json1_1PutQueryDefinitionCommand);
parcelHelpers.export(exports, "serializeAws_json1_1PutResourcePolicyCommand", ()=>serializeAws_json1_1PutResourcePolicyCommand);
parcelHelpers.export(exports, "serializeAws_json1_1PutRetentionPolicyCommand", ()=>serializeAws_json1_1PutRetentionPolicyCommand);
parcelHelpers.export(exports, "serializeAws_json1_1PutSubscriptionFilterCommand", ()=>serializeAws_json1_1PutSubscriptionFilterCommand);
parcelHelpers.export(exports, "serializeAws_json1_1StartQueryCommand", ()=>serializeAws_json1_1StartQueryCommand);
parcelHelpers.export(exports, "serializeAws_json1_1StopQueryCommand", ()=>serializeAws_json1_1StopQueryCommand);
parcelHelpers.export(exports, "serializeAws_json1_1TagLogGroupCommand", ()=>serializeAws_json1_1TagLogGroupCommand);
parcelHelpers.export(exports, "serializeAws_json1_1TestMetricFilterCommand", ()=>serializeAws_json1_1TestMetricFilterCommand);
parcelHelpers.export(exports, "serializeAws_json1_1UntagLogGroupCommand", ()=>serializeAws_json1_1UntagLogGroupCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1AssociateKmsKeyCommand", ()=>deserializeAws_json1_1AssociateKmsKeyCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1CancelExportTaskCommand", ()=>deserializeAws_json1_1CancelExportTaskCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1CreateExportTaskCommand", ()=>deserializeAws_json1_1CreateExportTaskCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1CreateLogGroupCommand", ()=>deserializeAws_json1_1CreateLogGroupCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1CreateLogStreamCommand", ()=>deserializeAws_json1_1CreateLogStreamCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1DeleteDestinationCommand", ()=>deserializeAws_json1_1DeleteDestinationCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1DeleteLogGroupCommand", ()=>deserializeAws_json1_1DeleteLogGroupCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1DeleteLogStreamCommand", ()=>deserializeAws_json1_1DeleteLogStreamCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1DeleteMetricFilterCommand", ()=>deserializeAws_json1_1DeleteMetricFilterCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1DeleteQueryDefinitionCommand", ()=>deserializeAws_json1_1DeleteQueryDefinitionCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1DeleteResourcePolicyCommand", ()=>deserializeAws_json1_1DeleteResourcePolicyCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1DeleteRetentionPolicyCommand", ()=>deserializeAws_json1_1DeleteRetentionPolicyCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1DeleteSubscriptionFilterCommand", ()=>deserializeAws_json1_1DeleteSubscriptionFilterCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1DescribeDestinationsCommand", ()=>deserializeAws_json1_1DescribeDestinationsCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1DescribeExportTasksCommand", ()=>deserializeAws_json1_1DescribeExportTasksCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1DescribeLogGroupsCommand", ()=>deserializeAws_json1_1DescribeLogGroupsCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1DescribeLogStreamsCommand", ()=>deserializeAws_json1_1DescribeLogStreamsCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1DescribeMetricFiltersCommand", ()=>deserializeAws_json1_1DescribeMetricFiltersCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1DescribeQueriesCommand", ()=>deserializeAws_json1_1DescribeQueriesCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1DescribeQueryDefinitionsCommand", ()=>deserializeAws_json1_1DescribeQueryDefinitionsCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1DescribeResourcePoliciesCommand", ()=>deserializeAws_json1_1DescribeResourcePoliciesCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1DescribeSubscriptionFiltersCommand", ()=>deserializeAws_json1_1DescribeSubscriptionFiltersCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1DisassociateKmsKeyCommand", ()=>deserializeAws_json1_1DisassociateKmsKeyCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1FilterLogEventsCommand", ()=>deserializeAws_json1_1FilterLogEventsCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1GetLogEventsCommand", ()=>deserializeAws_json1_1GetLogEventsCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1GetLogGroupFieldsCommand", ()=>deserializeAws_json1_1GetLogGroupFieldsCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1GetLogRecordCommand", ()=>deserializeAws_json1_1GetLogRecordCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1GetQueryResultsCommand", ()=>deserializeAws_json1_1GetQueryResultsCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1ListTagsLogGroupCommand", ()=>deserializeAws_json1_1ListTagsLogGroupCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1PutDestinationCommand", ()=>deserializeAws_json1_1PutDestinationCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1PutDestinationPolicyCommand", ()=>deserializeAws_json1_1PutDestinationPolicyCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1PutLogEventsCommand", ()=>deserializeAws_json1_1PutLogEventsCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1PutMetricFilterCommand", ()=>deserializeAws_json1_1PutMetricFilterCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1PutQueryDefinitionCommand", ()=>deserializeAws_json1_1PutQueryDefinitionCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1PutResourcePolicyCommand", ()=>deserializeAws_json1_1PutResourcePolicyCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1PutRetentionPolicyCommand", ()=>deserializeAws_json1_1PutRetentionPolicyCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1PutSubscriptionFilterCommand", ()=>deserializeAws_json1_1PutSubscriptionFilterCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1StartQueryCommand", ()=>deserializeAws_json1_1StartQueryCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1StopQueryCommand", ()=>deserializeAws_json1_1StopQueryCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1TagLogGroupCommand", ()=>deserializeAws_json1_1TagLogGroupCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1TestMetricFilterCommand", ()=>deserializeAws_json1_1TestMetricFilterCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1UntagLogGroupCommand", ()=>deserializeAws_json1_1UntagLogGroupCommand);
var _tslib = require("tslib");
var _protocolHttp = require("@aws-sdk/protocol-http");
var serializeAws_json1_1AssociateKmsKeyCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "Logs_20140328.AssociateKmsKey"
            };
            body = JSON.stringify(serializeAws_json1_1AssociateKmsKeyRequest(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1CancelExportTaskCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "Logs_20140328.CancelExportTask"
            };
            body = JSON.stringify(serializeAws_json1_1CancelExportTaskRequest(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1CreateExportTaskCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "Logs_20140328.CreateExportTask"
            };
            body = JSON.stringify(serializeAws_json1_1CreateExportTaskRequest(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1CreateLogGroupCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "Logs_20140328.CreateLogGroup"
            };
            body = JSON.stringify(serializeAws_json1_1CreateLogGroupRequest(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1CreateLogStreamCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "Logs_20140328.CreateLogStream"
            };
            body = JSON.stringify(serializeAws_json1_1CreateLogStreamRequest(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1DeleteDestinationCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "Logs_20140328.DeleteDestination"
            };
            body = JSON.stringify(serializeAws_json1_1DeleteDestinationRequest(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1DeleteLogGroupCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "Logs_20140328.DeleteLogGroup"
            };
            body = JSON.stringify(serializeAws_json1_1DeleteLogGroupRequest(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1DeleteLogStreamCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "Logs_20140328.DeleteLogStream"
            };
            body = JSON.stringify(serializeAws_json1_1DeleteLogStreamRequest(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1DeleteMetricFilterCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "Logs_20140328.DeleteMetricFilter"
            };
            body = JSON.stringify(serializeAws_json1_1DeleteMetricFilterRequest(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1DeleteQueryDefinitionCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "Logs_20140328.DeleteQueryDefinition"
            };
            body = JSON.stringify(serializeAws_json1_1DeleteQueryDefinitionRequest(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1DeleteResourcePolicyCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "Logs_20140328.DeleteResourcePolicy"
            };
            body = JSON.stringify(serializeAws_json1_1DeleteResourcePolicyRequest(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1DeleteRetentionPolicyCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "Logs_20140328.DeleteRetentionPolicy"
            };
            body = JSON.stringify(serializeAws_json1_1DeleteRetentionPolicyRequest(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1DeleteSubscriptionFilterCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "Logs_20140328.DeleteSubscriptionFilter"
            };
            body = JSON.stringify(serializeAws_json1_1DeleteSubscriptionFilterRequest(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1DescribeDestinationsCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "Logs_20140328.DescribeDestinations"
            };
            body = JSON.stringify(serializeAws_json1_1DescribeDestinationsRequest(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1DescribeExportTasksCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "Logs_20140328.DescribeExportTasks"
            };
            body = JSON.stringify(serializeAws_json1_1DescribeExportTasksRequest(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1DescribeLogGroupsCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "Logs_20140328.DescribeLogGroups"
            };
            body = JSON.stringify(serializeAws_json1_1DescribeLogGroupsRequest(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1DescribeLogStreamsCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "Logs_20140328.DescribeLogStreams"
            };
            body = JSON.stringify(serializeAws_json1_1DescribeLogStreamsRequest(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1DescribeMetricFiltersCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "Logs_20140328.DescribeMetricFilters"
            };
            body = JSON.stringify(serializeAws_json1_1DescribeMetricFiltersRequest(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1DescribeQueriesCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "Logs_20140328.DescribeQueries"
            };
            body = JSON.stringify(serializeAws_json1_1DescribeQueriesRequest(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1DescribeQueryDefinitionsCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "Logs_20140328.DescribeQueryDefinitions"
            };
            body = JSON.stringify(serializeAws_json1_1DescribeQueryDefinitionsRequest(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1DescribeResourcePoliciesCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "Logs_20140328.DescribeResourcePolicies"
            };
            body = JSON.stringify(serializeAws_json1_1DescribeResourcePoliciesRequest(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1DescribeSubscriptionFiltersCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "Logs_20140328.DescribeSubscriptionFilters"
            };
            body = JSON.stringify(serializeAws_json1_1DescribeSubscriptionFiltersRequest(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1DisassociateKmsKeyCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "Logs_20140328.DisassociateKmsKey"
            };
            body = JSON.stringify(serializeAws_json1_1DisassociateKmsKeyRequest(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1FilterLogEventsCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "Logs_20140328.FilterLogEvents"
            };
            body = JSON.stringify(serializeAws_json1_1FilterLogEventsRequest(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1GetLogEventsCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "Logs_20140328.GetLogEvents"
            };
            body = JSON.stringify(serializeAws_json1_1GetLogEventsRequest(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1GetLogGroupFieldsCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "Logs_20140328.GetLogGroupFields"
            };
            body = JSON.stringify(serializeAws_json1_1GetLogGroupFieldsRequest(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1GetLogRecordCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "Logs_20140328.GetLogRecord"
            };
            body = JSON.stringify(serializeAws_json1_1GetLogRecordRequest(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1GetQueryResultsCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "Logs_20140328.GetQueryResults"
            };
            body = JSON.stringify(serializeAws_json1_1GetQueryResultsRequest(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1ListTagsLogGroupCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "Logs_20140328.ListTagsLogGroup"
            };
            body = JSON.stringify(serializeAws_json1_1ListTagsLogGroupRequest(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1PutDestinationCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "Logs_20140328.PutDestination"
            };
            body = JSON.stringify(serializeAws_json1_1PutDestinationRequest(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1PutDestinationPolicyCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "Logs_20140328.PutDestinationPolicy"
            };
            body = JSON.stringify(serializeAws_json1_1PutDestinationPolicyRequest(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1PutLogEventsCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "Logs_20140328.PutLogEvents"
            };
            body = JSON.stringify(serializeAws_json1_1PutLogEventsRequest(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1PutMetricFilterCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "Logs_20140328.PutMetricFilter"
            };
            body = JSON.stringify(serializeAws_json1_1PutMetricFilterRequest(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1PutQueryDefinitionCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "Logs_20140328.PutQueryDefinition"
            };
            body = JSON.stringify(serializeAws_json1_1PutQueryDefinitionRequest(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1PutResourcePolicyCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "Logs_20140328.PutResourcePolicy"
            };
            body = JSON.stringify(serializeAws_json1_1PutResourcePolicyRequest(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1PutRetentionPolicyCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "Logs_20140328.PutRetentionPolicy"
            };
            body = JSON.stringify(serializeAws_json1_1PutRetentionPolicyRequest(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1PutSubscriptionFilterCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "Logs_20140328.PutSubscriptionFilter"
            };
            body = JSON.stringify(serializeAws_json1_1PutSubscriptionFilterRequest(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1StartQueryCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "Logs_20140328.StartQuery"
            };
            body = JSON.stringify(serializeAws_json1_1StartQueryRequest(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1StopQueryCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "Logs_20140328.StopQuery"
            };
            body = JSON.stringify(serializeAws_json1_1StopQueryRequest(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1TagLogGroupCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "Logs_20140328.TagLogGroup"
            };
            body = JSON.stringify(serializeAws_json1_1TagLogGroupRequest(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1TestMetricFilterCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "Logs_20140328.TestMetricFilter"
            };
            body = JSON.stringify(serializeAws_json1_1TestMetricFilterRequest(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1UntagLogGroupCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "Logs_20140328.UntagLogGroup"
            };
            body = JSON.stringify(serializeAws_json1_1UntagLogGroupRequest(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var deserializeAws_json1_1AssociateKmsKeyCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1AssociateKmsKeyCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    response = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1AssociateKmsKeyCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
        var _g;
        return (0, _tslib.__generator)(this, function(_h) {
            switch(_h.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _g = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_g.body = _h.sent(), _g)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "OperationAbortedException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        10
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _h.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        11
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _h.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        11
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _h.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        11
                    ];
                case 8:
                    _f = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)
                    ];
                case 9:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _f.concat([
                            _h.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        11
                    ];
                case 10:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _h.label = 11;
                case 11:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1CancelExportTaskCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1CancelExportTaskCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    response = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1CancelExportTaskCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
        var _g;
        return (0, _tslib.__generator)(this, function(_h) {
            switch(_h.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _g = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_g.body = _h.sent(), _g)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InvalidOperationException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cloudwatchlogs#InvalidOperationException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        10
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidOperationExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _h.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        11
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _h.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        11
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _h.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        11
                    ];
                case 8:
                    _f = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)
                    ];
                case 9:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _f.concat([
                            _h.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        11
                    ];
                case 10:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _h.label = 11;
                case 11:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1CreateExportTaskCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var data, contents, response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1CreateExportTaskCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1CreateExportTaskResponse(data, context);
                    response = (0, _tslib.__assign)({
                        $metadata: deserializeMetadata(output)
                    }, contents);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1CreateExportTaskCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;
        var _j;
        return (0, _tslib.__generator)(this, function(_k) {
            switch(_k.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _j = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_j.body = _k.sent(), _j)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "LimitExceededException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cloudwatchlogs#LimitExceededException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "OperationAbortedException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "ResourceAlreadyExistsException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "com.amazonaws.cloudwatchlogs#ResourceAlreadyExistsException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                12
                            ];
                        case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                12
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        14
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 8:
                    _f = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceAlreadyExistsExceptionResponse(parsedOutput, context)
                    ];
                case 9:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _f.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 10:
                    _g = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 11:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _g.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 12:
                    _h = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)
                    ];
                case 13:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _h.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1CreateLogGroupCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1CreateLogGroupCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    response = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1CreateLogGroupCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
        var _h;
        return (0, _tslib.__generator)(this, function(_j) {
            switch(_j.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _h = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_h.body = _j.sent(), _h)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "LimitExceededException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cloudwatchlogs#LimitExceededException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "OperationAbortedException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "ResourceAlreadyExistsException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "com.amazonaws.cloudwatchlogs#ResourceAlreadyExistsException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        12
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 8:
                    _f = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceAlreadyExistsExceptionResponse(parsedOutput, context)
                    ];
                case 9:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _f.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 10:
                    _g = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)
                    ];
                case 11:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _g.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 12:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _j.label = 13;
                case 13:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1CreateLogStreamCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1CreateLogStreamCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    response = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1CreateLogStreamCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
        var _g;
        return (0, _tslib.__generator)(this, function(_h) {
            switch(_h.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _g = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_g.body = _h.sent(), _g)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "ResourceAlreadyExistsException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cloudwatchlogs#ResourceAlreadyExistsException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        10
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _h.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        11
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceAlreadyExistsExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _h.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        11
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _h.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        11
                    ];
                case 8:
                    _f = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)
                    ];
                case 9:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _f.concat([
                            _h.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        11
                    ];
                case 10:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _h.label = 11;
                case 11:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1DeleteDestinationCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1DeleteDestinationCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    response = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1DeleteDestinationCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
        var _g;
        return (0, _tslib.__generator)(this, function(_h) {
            switch(_h.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _g = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_g.body = _h.sent(), _g)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "OperationAbortedException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        10
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _h.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        11
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _h.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        11
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _h.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        11
                    ];
                case 8:
                    _f = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)
                    ];
                case 9:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _f.concat([
                            _h.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        11
                    ];
                case 10:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _h.label = 11;
                case 11:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1DeleteLogGroupCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1DeleteLogGroupCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    response = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1DeleteLogGroupCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
        var _g;
        return (0, _tslib.__generator)(this, function(_h) {
            switch(_h.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _g = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_g.body = _h.sent(), _g)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "OperationAbortedException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        10
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _h.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        11
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _h.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        11
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _h.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        11
                    ];
                case 8:
                    _f = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)
                    ];
                case 9:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _f.concat([
                            _h.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        11
                    ];
                case 10:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _h.label = 11;
                case 11:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1DeleteLogStreamCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1DeleteLogStreamCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    response = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1DeleteLogStreamCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
        var _g;
        return (0, _tslib.__generator)(this, function(_h) {
            switch(_h.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _g = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_g.body = _h.sent(), _g)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "OperationAbortedException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        10
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _h.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        11
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _h.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        11
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _h.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        11
                    ];
                case 8:
                    _f = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)
                    ];
                case 9:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _f.concat([
                            _h.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        11
                    ];
                case 10:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _h.label = 11;
                case 11:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1DeleteMetricFilterCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1DeleteMetricFilterCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    response = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1DeleteMetricFilterCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
        var _g;
        return (0, _tslib.__generator)(this, function(_h) {
            switch(_h.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _g = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_g.body = _h.sent(), _g)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "OperationAbortedException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        10
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _h.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        11
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _h.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        11
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _h.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        11
                    ];
                case 8:
                    _f = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)
                    ];
                case 9:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _f.concat([
                            _h.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        11
                    ];
                case 10:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _h.label = 11;
                case 11:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1DeleteQueryDefinitionCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var data, contents, response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1DeleteQueryDefinitionCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1DeleteQueryDefinitionResponse(data, context);
                    response = (0, _tslib.__assign)({
                        $metadata: deserializeMetadata(output)
                    }, contents);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1DeleteQueryDefinitionCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
        var _f;
        return (0, _tslib.__generator)(this, function(_g) {
            switch(_g.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _f = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_f.body = _g.sent(), _f)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        8
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _g.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        9
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _g.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        9
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _g.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        9
                    ];
                case 8:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _g.label = 9;
                case 9:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1DeleteResourcePolicyCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1DeleteResourcePolicyCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    response = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1DeleteResourcePolicyCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
        var _f;
        return (0, _tslib.__generator)(this, function(_g) {
            switch(_g.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _f = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_f.body = _g.sent(), _f)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        8
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _g.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        9
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _g.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        9
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _g.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        9
                    ];
                case 8:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _g.label = 9;
                case 9:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1DeleteRetentionPolicyCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1DeleteRetentionPolicyCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    response = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1DeleteRetentionPolicyCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
        var _g;
        return (0, _tslib.__generator)(this, function(_h) {
            switch(_h.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _g = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_g.body = _h.sent(), _g)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "OperationAbortedException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        10
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _h.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        11
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _h.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        11
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _h.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        11
                    ];
                case 8:
                    _f = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)
                    ];
                case 9:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _f.concat([
                            _h.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        11
                    ];
                case 10:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _h.label = 11;
                case 11:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1DeleteSubscriptionFilterCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1DeleteSubscriptionFilterCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    response = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1DeleteSubscriptionFilterCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
        var _g;
        return (0, _tslib.__generator)(this, function(_h) {
            switch(_h.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _g = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_g.body = _h.sent(), _g)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "OperationAbortedException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        10
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _h.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        11
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _h.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        11
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _h.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        11
                    ];
                case 8:
                    _f = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)
                    ];
                case 9:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _f.concat([
                            _h.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        11
                    ];
                case 10:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _h.label = 11;
                case 11:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1DescribeDestinationsCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var data, contents, response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1DescribeDestinationsCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1DescribeDestinationsResponse(data, context);
                    response = (0, _tslib.__assign)({
                        $metadata: deserializeMetadata(output)
                    }, contents);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1DescribeDestinationsCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
        var _e;
        return (0, _tslib.__generator)(this, function(_f) {
            switch(_f.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _e = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_e.body = _f.sent(), _e)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        6
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _f.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        7
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _f.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        7
                    ];
                case 6:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _f.label = 7;
                case 7:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1DescribeExportTasksCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var data, contents, response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1DescribeExportTasksCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1DescribeExportTasksResponse(data, context);
                    response = (0, _tslib.__assign)({
                        $metadata: deserializeMetadata(output)
                    }, contents);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1DescribeExportTasksCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
        var _e;
        return (0, _tslib.__generator)(this, function(_f) {
            switch(_f.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _e = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_e.body = _f.sent(), _e)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        6
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _f.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        7
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _f.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        7
                    ];
                case 6:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _f.label = 7;
                case 7:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1DescribeLogGroupsCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var data, contents, response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1DescribeLogGroupsCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1DescribeLogGroupsResponse(data, context);
                    response = (0, _tslib.__assign)({
                        $metadata: deserializeMetadata(output)
                    }, contents);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1DescribeLogGroupsCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
        var _e;
        return (0, _tslib.__generator)(this, function(_f) {
            switch(_f.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _e = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_e.body = _f.sent(), _e)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        6
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _f.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        7
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _f.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        7
                    ];
                case 6:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _f.label = 7;
                case 7:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1DescribeLogStreamsCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var data, contents, response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1DescribeLogStreamsCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1DescribeLogStreamsResponse(data, context);
                    response = (0, _tslib.__assign)({
                        $metadata: deserializeMetadata(output)
                    }, contents);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1DescribeLogStreamsCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
        var _f;
        return (0, _tslib.__generator)(this, function(_g) {
            switch(_g.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _f = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_f.body = _g.sent(), _f)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        8
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _g.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        9
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _g.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        9
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _g.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        9
                    ];
                case 8:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _g.label = 9;
                case 9:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1DescribeMetricFiltersCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var data, contents, response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1DescribeMetricFiltersCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1DescribeMetricFiltersResponse(data, context);
                    response = (0, _tslib.__assign)({
                        $metadata: deserializeMetadata(output)
                    }, contents);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1DescribeMetricFiltersCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
        var _f;
        return (0, _tslib.__generator)(this, function(_g) {
            switch(_g.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _f = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_f.body = _g.sent(), _f)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        8
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _g.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        9
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _g.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        9
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _g.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        9
                    ];
                case 8:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _g.label = 9;
                case 9:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1DescribeQueriesCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var data, contents, response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1DescribeQueriesCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1DescribeQueriesResponse(data, context);
                    response = (0, _tslib.__assign)({
                        $metadata: deserializeMetadata(output)
                    }, contents);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1DescribeQueriesCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
        var _f;
        return (0, _tslib.__generator)(this, function(_g) {
            switch(_g.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _f = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_f.body = _g.sent(), _f)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        8
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _g.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        9
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _g.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        9
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _g.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        9
                    ];
                case 8:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _g.label = 9;
                case 9:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1DescribeQueryDefinitionsCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var data, contents, response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1DescribeQueryDefinitionsCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1DescribeQueryDefinitionsResponse(data, context);
                    response = (0, _tslib.__assign)({
                        $metadata: deserializeMetadata(output)
                    }, contents);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1DescribeQueryDefinitionsCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
        var _e;
        return (0, _tslib.__generator)(this, function(_f) {
            switch(_f.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _e = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_e.body = _f.sent(), _e)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        6
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _f.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        7
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _f.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        7
                    ];
                case 6:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _f.label = 7;
                case 7:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1DescribeResourcePoliciesCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var data, contents, response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1DescribeResourcePoliciesCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1DescribeResourcePoliciesResponse(data, context);
                    response = (0, _tslib.__assign)({
                        $metadata: deserializeMetadata(output)
                    }, contents);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1DescribeResourcePoliciesCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
        var _e;
        return (0, _tslib.__generator)(this, function(_f) {
            switch(_f.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _e = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_e.body = _f.sent(), _e)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        6
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _f.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        7
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _f.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        7
                    ];
                case 6:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _f.label = 7;
                case 7:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1DescribeSubscriptionFiltersCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var data, contents, response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1DescribeSubscriptionFiltersCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1DescribeSubscriptionFiltersResponse(data, context);
                    response = (0, _tslib.__assign)({
                        $metadata: deserializeMetadata(output)
                    }, contents);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1DescribeSubscriptionFiltersCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
        var _f;
        return (0, _tslib.__generator)(this, function(_g) {
            switch(_g.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _f = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_f.body = _g.sent(), _f)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        8
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _g.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        9
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _g.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        9
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _g.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        9
                    ];
                case 8:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _g.label = 9;
                case 9:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1DisassociateKmsKeyCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1DisassociateKmsKeyCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    response = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1DisassociateKmsKeyCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
        var _g;
        return (0, _tslib.__generator)(this, function(_h) {
            switch(_h.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _g = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_g.body = _h.sent(), _g)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "OperationAbortedException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        10
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _h.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        11
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _h.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        11
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _h.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        11
                    ];
                case 8:
                    _f = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)
                    ];
                case 9:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _f.concat([
                            _h.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        11
                    ];
                case 10:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _h.label = 11;
                case 11:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1FilterLogEventsCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var data, contents, response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1FilterLogEventsCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1FilterLogEventsResponse(data, context);
                    response = (0, _tslib.__assign)({
                        $metadata: deserializeMetadata(output)
                    }, contents);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1FilterLogEventsCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
        var _f;
        return (0, _tslib.__generator)(this, function(_g) {
            switch(_g.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _f = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_f.body = _g.sent(), _f)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        8
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _g.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        9
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _g.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        9
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _g.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        9
                    ];
                case 8:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _g.label = 9;
                case 9:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1GetLogEventsCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var data, contents, response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1GetLogEventsCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1GetLogEventsResponse(data, context);
                    response = (0, _tslib.__assign)({
                        $metadata: deserializeMetadata(output)
                    }, contents);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1GetLogEventsCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
        var _f;
        return (0, _tslib.__generator)(this, function(_g) {
            switch(_g.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _f = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_f.body = _g.sent(), _f)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        8
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _g.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        9
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _g.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        9
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _g.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        9
                    ];
                case 8:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _g.label = 9;
                case 9:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1GetLogGroupFieldsCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var data, contents, response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1GetLogGroupFieldsCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1GetLogGroupFieldsResponse(data, context);
                    response = (0, _tslib.__assign)({
                        $metadata: deserializeMetadata(output)
                    }, contents);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1GetLogGroupFieldsCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
        var _g;
        return (0, _tslib.__generator)(this, function(_h) {
            switch(_h.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _g = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_g.body = _h.sent(), _g)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "LimitExceededException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cloudwatchlogs#LimitExceededException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        10
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _h.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        11
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _h.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        11
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _h.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        11
                    ];
                case 8:
                    _f = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)
                    ];
                case 9:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _f.concat([
                            _h.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        11
                    ];
                case 10:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _h.label = 11;
                case 11:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1GetLogRecordCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var data, contents, response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1GetLogRecordCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1GetLogRecordResponse(data, context);
                    response = (0, _tslib.__assign)({
                        $metadata: deserializeMetadata(output)
                    }, contents);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1GetLogRecordCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
        var _g;
        return (0, _tslib.__generator)(this, function(_h) {
            switch(_h.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _g = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_g.body = _h.sent(), _g)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "LimitExceededException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cloudwatchlogs#LimitExceededException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        10
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _h.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        11
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _h.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        11
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _h.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        11
                    ];
                case 8:
                    _f = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)
                    ];
                case 9:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _f.concat([
                            _h.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        11
                    ];
                case 10:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _h.label = 11;
                case 11:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1GetQueryResultsCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var data, contents, response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1GetQueryResultsCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1GetQueryResultsResponse(data, context);
                    response = (0, _tslib.__assign)({
                        $metadata: deserializeMetadata(output)
                    }, contents);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1GetQueryResultsCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
        var _f;
        return (0, _tslib.__generator)(this, function(_g) {
            switch(_g.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _f = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_f.body = _g.sent(), _f)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        8
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _g.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        9
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _g.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        9
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _g.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        9
                    ];
                case 8:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _g.label = 9;
                case 9:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1ListTagsLogGroupCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var data, contents, response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1ListTagsLogGroupCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1ListTagsLogGroupResponse(data, context);
                    response = (0, _tslib.__assign)({
                        $metadata: deserializeMetadata(output)
                    }, contents);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1ListTagsLogGroupCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
        var _e;
        return (0, _tslib.__generator)(this, function(_f) {
            switch(_f.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _e = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_e.body = _f.sent(), _e)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        6
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _f.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        7
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _f.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        7
                    ];
                case 6:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _f.label = 7;
                case 7:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1PutDestinationCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var data, contents, response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1PutDestinationCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1PutDestinationResponse(data, context);
                    response = (0, _tslib.__assign)({
                        $metadata: deserializeMetadata(output)
                    }, contents);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1PutDestinationCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
        var _f;
        return (0, _tslib.__generator)(this, function(_g) {
            switch(_g.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _f = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_f.body = _g.sent(), _f)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "OperationAbortedException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        8
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _g.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        9
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _g.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        9
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _g.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        9
                    ];
                case 8:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _g.label = 9;
                case 9:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1PutDestinationPolicyCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1PutDestinationPolicyCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    response = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1PutDestinationPolicyCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
        var _f;
        return (0, _tslib.__generator)(this, function(_g) {
            switch(_g.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _f = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_f.body = _g.sent(), _f)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "OperationAbortedException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        8
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _g.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        9
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _g.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        9
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _g.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        9
                    ];
                case 8:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _g.label = 9;
                case 9:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1PutLogEventsCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var data, contents, response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1PutLogEventsCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1PutLogEventsResponse(data, context);
                    response = (0, _tslib.__assign)({
                        $metadata: deserializeMetadata(output)
                    }, contents);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1PutLogEventsCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;
        var _j;
        return (0, _tslib.__generator)(this, function(_k) {
            switch(_k.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _j = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_j.body = _k.sent(), _j)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "DataAlreadyAcceptedException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cloudwatchlogs#DataAlreadyAcceptedException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "InvalidSequenceTokenException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cloudwatchlogs#InvalidSequenceTokenException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "UnrecognizedClientException":
                            return [
                                3 /*break*/ ,
                                12
                            ];
                        case "com.amazonaws.cloudwatchlogs#UnrecognizedClientException":
                            return [
                                3 /*break*/ ,
                                12
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        14
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1DataAlreadyAcceptedExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidSequenceTokenExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 8:
                    _f = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 9:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _f.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 10:
                    _g = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)
                    ];
                case 11:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _g.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 12:
                    _h = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1UnrecognizedClientExceptionResponse(parsedOutput, context)
                    ];
                case 13:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _h.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1PutMetricFilterCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1PutMetricFilterCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    response = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1PutMetricFilterCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
        var _h;
        return (0, _tslib.__generator)(this, function(_j) {
            switch(_j.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _h = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_h.body = _j.sent(), _h)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "LimitExceededException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cloudwatchlogs#LimitExceededException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "OperationAbortedException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        12
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 8:
                    _f = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 9:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _f.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 10:
                    _g = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)
                    ];
                case 11:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _g.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 12:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _j.label = 13;
                case 13:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1PutQueryDefinitionCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var data, contents, response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1PutQueryDefinitionCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1PutQueryDefinitionResponse(data, context);
                    response = (0, _tslib.__assign)({
                        $metadata: deserializeMetadata(output)
                    }, contents);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1PutQueryDefinitionCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
        var _f;
        return (0, _tslib.__generator)(this, function(_g) {
            switch(_g.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _f = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_f.body = _g.sent(), _f)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        8
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _g.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        9
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _g.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        9
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _g.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        9
                    ];
                case 8:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _g.label = 9;
                case 9:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1PutResourcePolicyCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var data, contents, response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1PutResourcePolicyCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1PutResourcePolicyResponse(data, context);
                    response = (0, _tslib.__assign)({
                        $metadata: deserializeMetadata(output)
                    }, contents);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1PutResourcePolicyCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
        var _f;
        return (0, _tslib.__generator)(this, function(_g) {
            switch(_g.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _f = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_f.body = _g.sent(), _f)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "LimitExceededException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cloudwatchlogs#LimitExceededException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        8
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _g.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        9
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _g.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        9
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _g.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        9
                    ];
                case 8:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _g.label = 9;
                case 9:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1PutRetentionPolicyCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1PutRetentionPolicyCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    response = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1PutRetentionPolicyCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
        var _g;
        return (0, _tslib.__generator)(this, function(_h) {
            switch(_h.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _g = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_g.body = _h.sent(), _g)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "OperationAbortedException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        10
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _h.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        11
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _h.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        11
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _h.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        11
                    ];
                case 8:
                    _f = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)
                    ];
                case 9:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _f.concat([
                            _h.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        11
                    ];
                case 10:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _h.label = 11;
                case 11:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1PutSubscriptionFilterCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1PutSubscriptionFilterCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    response = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1PutSubscriptionFilterCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
        var _h;
        return (0, _tslib.__generator)(this, function(_j) {
            switch(_j.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _h = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_h.body = _j.sent(), _h)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "LimitExceededException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cloudwatchlogs#LimitExceededException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "OperationAbortedException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        12
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 8:
                    _f = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 9:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _f.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 10:
                    _g = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)
                    ];
                case 11:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _g.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 12:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _j.label = 13;
                case 13:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1StartQueryCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var data, contents, response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1StartQueryCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1StartQueryResponse(data, context);
                    response = (0, _tslib.__assign)({
                        $metadata: deserializeMetadata(output)
                    }, contents);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1StartQueryCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
        var _h;
        return (0, _tslib.__generator)(this, function(_j) {
            switch(_j.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _h = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_h.body = _j.sent(), _h)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "LimitExceededException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cloudwatchlogs#LimitExceededException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "MalformedQueryException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cloudwatchlogs#MalformedQueryException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        12
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1MalformedQueryExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 8:
                    _f = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 9:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _f.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 10:
                    _g = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)
                    ];
                case 11:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _g.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 12:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _j.label = 13;
                case 13:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1StopQueryCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var data, contents, response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1StopQueryCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1StopQueryResponse(data, context);
                    response = (0, _tslib.__assign)({
                        $metadata: deserializeMetadata(output)
                    }, contents);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1StopQueryCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
        var _f;
        return (0, _tslib.__generator)(this, function(_g) {
            switch(_g.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _f = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_f.body = _g.sent(), _f)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        8
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _g.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        9
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _g.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        9
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _g.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        9
                    ];
                case 8:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _g.label = 9;
                case 9:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1TagLogGroupCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1TagLogGroupCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    response = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1TagLogGroupCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
        var _e;
        return (0, _tslib.__generator)(this, function(_f) {
            switch(_f.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _e = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_e.body = _f.sent(), _e)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        6
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _f.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        7
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _f.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        7
                    ];
                case 6:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _f.label = 7;
                case 7:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1TestMetricFilterCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var data, contents, response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1TestMetricFilterCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1TestMetricFilterResponse(data, context);
                    response = (0, _tslib.__assign)({
                        $metadata: deserializeMetadata(output)
                    }, contents);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1TestMetricFilterCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
        var _e;
        return (0, _tslib.__generator)(this, function(_f) {
            switch(_f.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _e = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_e.body = _f.sent(), _e)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        6
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _f.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        7
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _f.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        7
                    ];
                case 6:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _f.label = 7;
                case 7:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1UntagLogGroupCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1UntagLogGroupCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    response = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1UntagLogGroupCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
        var _d;
        return (0, _tslib.__generator)(this, function(_e) {
            switch(_e.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _d = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_d.body = _e.sent(), _d)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        4
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _e.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        5
                    ];
                case 4:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _e.label = 5;
                case 5:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1DataAlreadyAcceptedExceptionResponse = function(parsedOutput, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var body, deserialized, contents;
        return (0, _tslib.__generator)(this, function(_a) {
            body = parsedOutput.body;
            deserialized = deserializeAws_json1_1DataAlreadyAcceptedException(body, context);
            contents = (0, _tslib.__assign)({
                name: "DataAlreadyAcceptedException",
                $fault: "client",
                $metadata: deserializeMetadata(parsedOutput)
            }, deserialized);
            return [
                2 /*return*/ ,
                contents
            ];
        });
    });
};
var deserializeAws_json1_1InvalidOperationExceptionResponse = function(parsedOutput, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var body, deserialized, contents;
        return (0, _tslib.__generator)(this, function(_a) {
            body = parsedOutput.body;
            deserialized = deserializeAws_json1_1InvalidOperationException(body, context);
            contents = (0, _tslib.__assign)({
                name: "InvalidOperationException",
                $fault: "client",
                $metadata: deserializeMetadata(parsedOutput)
            }, deserialized);
            return [
                2 /*return*/ ,
                contents
            ];
        });
    });
};
var deserializeAws_json1_1InvalidParameterExceptionResponse = function(parsedOutput, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var body, deserialized, contents;
        return (0, _tslib.__generator)(this, function(_a) {
            body = parsedOutput.body;
            deserialized = deserializeAws_json1_1InvalidParameterException(body, context);
            contents = (0, _tslib.__assign)({
                name: "InvalidParameterException",
                $fault: "client",
                $metadata: deserializeMetadata(parsedOutput)
            }, deserialized);
            return [
                2 /*return*/ ,
                contents
            ];
        });
    });
};
var deserializeAws_json1_1InvalidSequenceTokenExceptionResponse = function(parsedOutput, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var body, deserialized, contents;
        return (0, _tslib.__generator)(this, function(_a) {
            body = parsedOutput.body;
            deserialized = deserializeAws_json1_1InvalidSequenceTokenException(body, context);
            contents = (0, _tslib.__assign)({
                name: "InvalidSequenceTokenException",
                $fault: "client",
                $metadata: deserializeMetadata(parsedOutput)
            }, deserialized);
            return [
                2 /*return*/ ,
                contents
            ];
        });
    });
};
var deserializeAws_json1_1LimitExceededExceptionResponse = function(parsedOutput, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var body, deserialized, contents;
        return (0, _tslib.__generator)(this, function(_a) {
            body = parsedOutput.body;
            deserialized = deserializeAws_json1_1LimitExceededException(body, context);
            contents = (0, _tslib.__assign)({
                name: "LimitExceededException",
                $fault: "client",
                $metadata: deserializeMetadata(parsedOutput)
            }, deserialized);
            return [
                2 /*return*/ ,
                contents
            ];
        });
    });
};
var deserializeAws_json1_1MalformedQueryExceptionResponse = function(parsedOutput, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var body, deserialized, contents;
        return (0, _tslib.__generator)(this, function(_a) {
            body = parsedOutput.body;
            deserialized = deserializeAws_json1_1MalformedQueryException(body, context);
            contents = (0, _tslib.__assign)({
                name: "MalformedQueryException",
                $fault: "client",
                $metadata: deserializeMetadata(parsedOutput)
            }, deserialized);
            return [
                2 /*return*/ ,
                contents
            ];
        });
    });
};
var deserializeAws_json1_1OperationAbortedExceptionResponse = function(parsedOutput, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var body, deserialized, contents;
        return (0, _tslib.__generator)(this, function(_a) {
            body = parsedOutput.body;
            deserialized = deserializeAws_json1_1OperationAbortedException(body, context);
            contents = (0, _tslib.__assign)({
                name: "OperationAbortedException",
                $fault: "client",
                $metadata: deserializeMetadata(parsedOutput)
            }, deserialized);
            return [
                2 /*return*/ ,
                contents
            ];
        });
    });
};
var deserializeAws_json1_1ResourceAlreadyExistsExceptionResponse = function(parsedOutput, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var body, deserialized, contents;
        return (0, _tslib.__generator)(this, function(_a) {
            body = parsedOutput.body;
            deserialized = deserializeAws_json1_1ResourceAlreadyExistsException(body, context);
            contents = (0, _tslib.__assign)({
                name: "ResourceAlreadyExistsException",
                $fault: "client",
                $metadata: deserializeMetadata(parsedOutput)
            }, deserialized);
            return [
                2 /*return*/ ,
                contents
            ];
        });
    });
};
var deserializeAws_json1_1ResourceNotFoundExceptionResponse = function(parsedOutput, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var body, deserialized, contents;
        return (0, _tslib.__generator)(this, function(_a) {
            body = parsedOutput.body;
            deserialized = deserializeAws_json1_1ResourceNotFoundException(body, context);
            contents = (0, _tslib.__assign)({
                name: "ResourceNotFoundException",
                $fault: "client",
                $metadata: deserializeMetadata(parsedOutput)
            }, deserialized);
            return [
                2 /*return*/ ,
                contents
            ];
        });
    });
};
var deserializeAws_json1_1ServiceUnavailableExceptionResponse = function(parsedOutput, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var body, deserialized, contents;
        return (0, _tslib.__generator)(this, function(_a) {
            body = parsedOutput.body;
            deserialized = deserializeAws_json1_1ServiceUnavailableException(body, context);
            contents = (0, _tslib.__assign)({
                name: "ServiceUnavailableException",
                $fault: "server",
                $metadata: deserializeMetadata(parsedOutput)
            }, deserialized);
            return [
                2 /*return*/ ,
                contents
            ];
        });
    });
};
var deserializeAws_json1_1UnrecognizedClientExceptionResponse = function(parsedOutput, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var body, deserialized, contents;
        return (0, _tslib.__generator)(this, function(_a) {
            body = parsedOutput.body;
            deserialized = deserializeAws_json1_1UnrecognizedClientException(body, context);
            contents = (0, _tslib.__assign)({
                name: "UnrecognizedClientException",
                $fault: "client",
                $metadata: deserializeMetadata(parsedOutput)
            }, deserialized);
            return [
                2 /*return*/ ,
                contents
            ];
        });
    });
};
var serializeAws_json1_1AssociateKmsKeyRequest = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)({}, input.kmsKeyId !== undefined && input.kmsKeyId !== null && {
        kmsKeyId: input.kmsKeyId
    }), input.logGroupName !== undefined && input.logGroupName !== null && {
        logGroupName: input.logGroupName
    });
};
var serializeAws_json1_1CancelExportTaskRequest = function(input, context) {
    return (0, _tslib.__assign)({}, input.taskId !== undefined && input.taskId !== null && {
        taskId: input.taskId
    });
};
var serializeAws_json1_1CreateExportTaskRequest = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, input.destination !== undefined && input.destination !== null && {
        destination: input.destination
    }), input.destinationPrefix !== undefined && input.destinationPrefix !== null && {
        destinationPrefix: input.destinationPrefix
    }), input.from !== undefined && input.from !== null && {
        from: input.from
    }), input.logGroupName !== undefined && input.logGroupName !== null && {
        logGroupName: input.logGroupName
    }), input.logStreamNamePrefix !== undefined && input.logStreamNamePrefix !== null && {
        logStreamNamePrefix: input.logStreamNamePrefix
    }), input.taskName !== undefined && input.taskName !== null && {
        taskName: input.taskName
    }), input.to !== undefined && input.to !== null && {
        to: input.to
    });
};
var serializeAws_json1_1CreateLogGroupRequest = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, input.kmsKeyId !== undefined && input.kmsKeyId !== null && {
        kmsKeyId: input.kmsKeyId
    }), input.logGroupName !== undefined && input.logGroupName !== null && {
        logGroupName: input.logGroupName
    }), input.tags !== undefined && input.tags !== null && {
        tags: serializeAws_json1_1Tags(input.tags, context)
    });
};
var serializeAws_json1_1CreateLogStreamRequest = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)({}, input.logGroupName !== undefined && input.logGroupName !== null && {
        logGroupName: input.logGroupName
    }), input.logStreamName !== undefined && input.logStreamName !== null && {
        logStreamName: input.logStreamName
    });
};
var serializeAws_json1_1DeleteDestinationRequest = function(input, context) {
    return (0, _tslib.__assign)({}, input.destinationName !== undefined && input.destinationName !== null && {
        destinationName: input.destinationName
    });
};
var serializeAws_json1_1DeleteLogGroupRequest = function(input, context) {
    return (0, _tslib.__assign)({}, input.logGroupName !== undefined && input.logGroupName !== null && {
        logGroupName: input.logGroupName
    });
};
var serializeAws_json1_1DeleteLogStreamRequest = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)({}, input.logGroupName !== undefined && input.logGroupName !== null && {
        logGroupName: input.logGroupName
    }), input.logStreamName !== undefined && input.logStreamName !== null && {
        logStreamName: input.logStreamName
    });
};
var serializeAws_json1_1DeleteMetricFilterRequest = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)({}, input.filterName !== undefined && input.filterName !== null && {
        filterName: input.filterName
    }), input.logGroupName !== undefined && input.logGroupName !== null && {
        logGroupName: input.logGroupName
    });
};
var serializeAws_json1_1DeleteQueryDefinitionRequest = function(input, context) {
    return (0, _tslib.__assign)({}, input.queryDefinitionId !== undefined && input.queryDefinitionId !== null && {
        queryDefinitionId: input.queryDefinitionId
    });
};
var serializeAws_json1_1DeleteResourcePolicyRequest = function(input, context) {
    return (0, _tslib.__assign)({}, input.policyName !== undefined && input.policyName !== null && {
        policyName: input.policyName
    });
};
var serializeAws_json1_1DeleteRetentionPolicyRequest = function(input, context) {
    return (0, _tslib.__assign)({}, input.logGroupName !== undefined && input.logGroupName !== null && {
        logGroupName: input.logGroupName
    });
};
var serializeAws_json1_1DeleteSubscriptionFilterRequest = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)({}, input.filterName !== undefined && input.filterName !== null && {
        filterName: input.filterName
    }), input.logGroupName !== undefined && input.logGroupName !== null && {
        logGroupName: input.logGroupName
    });
};
var serializeAws_json1_1DescribeDestinationsRequest = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, input.DestinationNamePrefix !== undefined && input.DestinationNamePrefix !== null && {
        DestinationNamePrefix: input.DestinationNamePrefix
    }), input.limit !== undefined && input.limit !== null && {
        limit: input.limit
    }), input.nextToken !== undefined && input.nextToken !== null && {
        nextToken: input.nextToken
    });
};
var serializeAws_json1_1DescribeExportTasksRequest = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, input.limit !== undefined && input.limit !== null && {
        limit: input.limit
    }), input.nextToken !== undefined && input.nextToken !== null && {
        nextToken: input.nextToken
    }), input.statusCode !== undefined && input.statusCode !== null && {
        statusCode: input.statusCode
    }), input.taskId !== undefined && input.taskId !== null && {
        taskId: input.taskId
    });
};
var serializeAws_json1_1DescribeLogGroupsRequest = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, input.limit !== undefined && input.limit !== null && {
        limit: input.limit
    }), input.logGroupNamePrefix !== undefined && input.logGroupNamePrefix !== null && {
        logGroupNamePrefix: input.logGroupNamePrefix
    }), input.nextToken !== undefined && input.nextToken !== null && {
        nextToken: input.nextToken
    });
};
var serializeAws_json1_1DescribeLogStreamsRequest = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, input.descending !== undefined && input.descending !== null && {
        descending: input.descending
    }), input.limit !== undefined && input.limit !== null && {
        limit: input.limit
    }), input.logGroupName !== undefined && input.logGroupName !== null && {
        logGroupName: input.logGroupName
    }), input.logStreamNamePrefix !== undefined && input.logStreamNamePrefix !== null && {
        logStreamNamePrefix: input.logStreamNamePrefix
    }), input.nextToken !== undefined && input.nextToken !== null && {
        nextToken: input.nextToken
    }), input.orderBy !== undefined && input.orderBy !== null && {
        orderBy: input.orderBy
    });
};
var serializeAws_json1_1DescribeMetricFiltersRequest = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, input.filterNamePrefix !== undefined && input.filterNamePrefix !== null && {
        filterNamePrefix: input.filterNamePrefix
    }), input.limit !== undefined && input.limit !== null && {
        limit: input.limit
    }), input.logGroupName !== undefined && input.logGroupName !== null && {
        logGroupName: input.logGroupName
    }), input.metricName !== undefined && input.metricName !== null && {
        metricName: input.metricName
    }), input.metricNamespace !== undefined && input.metricNamespace !== null && {
        metricNamespace: input.metricNamespace
    }), input.nextToken !== undefined && input.nextToken !== null && {
        nextToken: input.nextToken
    });
};
var serializeAws_json1_1DescribeQueriesRequest = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, input.logGroupName !== undefined && input.logGroupName !== null && {
        logGroupName: input.logGroupName
    }), input.maxResults !== undefined && input.maxResults !== null && {
        maxResults: input.maxResults
    }), input.nextToken !== undefined && input.nextToken !== null && {
        nextToken: input.nextToken
    }), input.status !== undefined && input.status !== null && {
        status: input.status
    });
};
var serializeAws_json1_1DescribeQueryDefinitionsRequest = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, input.maxResults !== undefined && input.maxResults !== null && {
        maxResults: input.maxResults
    }), input.nextToken !== undefined && input.nextToken !== null && {
        nextToken: input.nextToken
    }), input.queryDefinitionNamePrefix !== undefined && input.queryDefinitionNamePrefix !== null && {
        queryDefinitionNamePrefix: input.queryDefinitionNamePrefix
    });
};
var serializeAws_json1_1DescribeResourcePoliciesRequest = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)({}, input.limit !== undefined && input.limit !== null && {
        limit: input.limit
    }), input.nextToken !== undefined && input.nextToken !== null && {
        nextToken: input.nextToken
    });
};
var serializeAws_json1_1DescribeSubscriptionFiltersRequest = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, input.filterNamePrefix !== undefined && input.filterNamePrefix !== null && {
        filterNamePrefix: input.filterNamePrefix
    }), input.limit !== undefined && input.limit !== null && {
        limit: input.limit
    }), input.logGroupName !== undefined && input.logGroupName !== null && {
        logGroupName: input.logGroupName
    }), input.nextToken !== undefined && input.nextToken !== null && {
        nextToken: input.nextToken
    });
};
var serializeAws_json1_1DisassociateKmsKeyRequest = function(input, context) {
    return (0, _tslib.__assign)({}, input.logGroupName !== undefined && input.logGroupName !== null && {
        logGroupName: input.logGroupName
    });
};
var serializeAws_json1_1FilterLogEventsRequest = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, input.endTime !== undefined && input.endTime !== null && {
        endTime: input.endTime
    }), input.filterPattern !== undefined && input.filterPattern !== null && {
        filterPattern: input.filterPattern
    }), input.interleaved !== undefined && input.interleaved !== null && {
        interleaved: input.interleaved
    }), input.limit !== undefined && input.limit !== null && {
        limit: input.limit
    }), input.logGroupName !== undefined && input.logGroupName !== null && {
        logGroupName: input.logGroupName
    }), input.logStreamNamePrefix !== undefined && input.logStreamNamePrefix !== null && {
        logStreamNamePrefix: input.logStreamNamePrefix
    }), input.logStreamNames !== undefined && input.logStreamNames !== null && {
        logStreamNames: serializeAws_json1_1InputLogStreamNames(input.logStreamNames, context)
    }), input.nextToken !== undefined && input.nextToken !== null && {
        nextToken: input.nextToken
    }), input.startTime !== undefined && input.startTime !== null && {
        startTime: input.startTime
    });
};
var serializeAws_json1_1GetLogEventsRequest = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, input.endTime !== undefined && input.endTime !== null && {
        endTime: input.endTime
    }), input.limit !== undefined && input.limit !== null && {
        limit: input.limit
    }), input.logGroupName !== undefined && input.logGroupName !== null && {
        logGroupName: input.logGroupName
    }), input.logStreamName !== undefined && input.logStreamName !== null && {
        logStreamName: input.logStreamName
    }), input.nextToken !== undefined && input.nextToken !== null && {
        nextToken: input.nextToken
    }), input.startFromHead !== undefined && input.startFromHead !== null && {
        startFromHead: input.startFromHead
    }), input.startTime !== undefined && input.startTime !== null && {
        startTime: input.startTime
    });
};
var serializeAws_json1_1GetLogGroupFieldsRequest = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)({}, input.logGroupName !== undefined && input.logGroupName !== null && {
        logGroupName: input.logGroupName
    }), input.time !== undefined && input.time !== null && {
        time: input.time
    });
};
var serializeAws_json1_1GetLogRecordRequest = function(input, context) {
    return (0, _tslib.__assign)({}, input.logRecordPointer !== undefined && input.logRecordPointer !== null && {
        logRecordPointer: input.logRecordPointer
    });
};
var serializeAws_json1_1GetQueryResultsRequest = function(input, context) {
    return (0, _tslib.__assign)({}, input.queryId !== undefined && input.queryId !== null && {
        queryId: input.queryId
    });
};
var serializeAws_json1_1InputLogEvent = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)({}, input.message !== undefined && input.message !== null && {
        message: input.message
    }), input.timestamp !== undefined && input.timestamp !== null && {
        timestamp: input.timestamp
    });
};
var serializeAws_json1_1InputLogEvents = function(input, context) {
    return input.filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return serializeAws_json1_1InputLogEvent(entry, context);
    });
};
var serializeAws_json1_1InputLogStreamNames = function(input, context) {
    return input.filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return entry;
    });
};
var serializeAws_json1_1ListTagsLogGroupRequest = function(input, context) {
    return (0, _tslib.__assign)({}, input.logGroupName !== undefined && input.logGroupName !== null && {
        logGroupName: input.logGroupName
    });
};
var serializeAws_json1_1LogGroupNames = function(input, context) {
    return input.filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return entry;
    });
};
var serializeAws_json1_1MetricTransformation = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, input.defaultValue !== undefined && input.defaultValue !== null && {
        defaultValue: input.defaultValue
    }), input.metricName !== undefined && input.metricName !== null && {
        metricName: input.metricName
    }), input.metricNamespace !== undefined && input.metricNamespace !== null && {
        metricNamespace: input.metricNamespace
    }), input.metricValue !== undefined && input.metricValue !== null && {
        metricValue: input.metricValue
    });
};
var serializeAws_json1_1MetricTransformations = function(input, context) {
    return input.filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return serializeAws_json1_1MetricTransformation(entry, context);
    });
};
var serializeAws_json1_1PutDestinationPolicyRequest = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)({}, input.accessPolicy !== undefined && input.accessPolicy !== null && {
        accessPolicy: input.accessPolicy
    }), input.destinationName !== undefined && input.destinationName !== null && {
        destinationName: input.destinationName
    });
};
var serializeAws_json1_1PutDestinationRequest = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, input.destinationName !== undefined && input.destinationName !== null && {
        destinationName: input.destinationName
    }), input.roleArn !== undefined && input.roleArn !== null && {
        roleArn: input.roleArn
    }), input.targetArn !== undefined && input.targetArn !== null && {
        targetArn: input.targetArn
    });
};
var serializeAws_json1_1PutLogEventsRequest = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, input.logEvents !== undefined && input.logEvents !== null && {
        logEvents: serializeAws_json1_1InputLogEvents(input.logEvents, context)
    }), input.logGroupName !== undefined && input.logGroupName !== null && {
        logGroupName: input.logGroupName
    }), input.logStreamName !== undefined && input.logStreamName !== null && {
        logStreamName: input.logStreamName
    }), input.sequenceToken !== undefined && input.sequenceToken !== null && {
        sequenceToken: input.sequenceToken
    });
};
var serializeAws_json1_1PutMetricFilterRequest = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, input.filterName !== undefined && input.filterName !== null && {
        filterName: input.filterName
    }), input.filterPattern !== undefined && input.filterPattern !== null && {
        filterPattern: input.filterPattern
    }), input.logGroupName !== undefined && input.logGroupName !== null && {
        logGroupName: input.logGroupName
    }), input.metricTransformations !== undefined && input.metricTransformations !== null && {
        metricTransformations: serializeAws_json1_1MetricTransformations(input.metricTransformations, context)
    });
};
var serializeAws_json1_1PutQueryDefinitionRequest = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, input.logGroupNames !== undefined && input.logGroupNames !== null && {
        logGroupNames: serializeAws_json1_1LogGroupNames(input.logGroupNames, context)
    }), input.name !== undefined && input.name !== null && {
        name: input.name
    }), input.queryDefinitionId !== undefined && input.queryDefinitionId !== null && {
        queryDefinitionId: input.queryDefinitionId
    }), input.queryString !== undefined && input.queryString !== null && {
        queryString: input.queryString
    });
};
var serializeAws_json1_1PutResourcePolicyRequest = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)({}, input.policyDocument !== undefined && input.policyDocument !== null && {
        policyDocument: input.policyDocument
    }), input.policyName !== undefined && input.policyName !== null && {
        policyName: input.policyName
    });
};
var serializeAws_json1_1PutRetentionPolicyRequest = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)({}, input.logGroupName !== undefined && input.logGroupName !== null && {
        logGroupName: input.logGroupName
    }), input.retentionInDays !== undefined && input.retentionInDays !== null && {
        retentionInDays: input.retentionInDays
    });
};
var serializeAws_json1_1PutSubscriptionFilterRequest = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, input.destinationArn !== undefined && input.destinationArn !== null && {
        destinationArn: input.destinationArn
    }), input.distribution !== undefined && input.distribution !== null && {
        distribution: input.distribution
    }), input.filterName !== undefined && input.filterName !== null && {
        filterName: input.filterName
    }), input.filterPattern !== undefined && input.filterPattern !== null && {
        filterPattern: input.filterPattern
    }), input.logGroupName !== undefined && input.logGroupName !== null && {
        logGroupName: input.logGroupName
    }), input.roleArn !== undefined && input.roleArn !== null && {
        roleArn: input.roleArn
    });
};
var serializeAws_json1_1StartQueryRequest = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, input.endTime !== undefined && input.endTime !== null && {
        endTime: input.endTime
    }), input.limit !== undefined && input.limit !== null && {
        limit: input.limit
    }), input.logGroupName !== undefined && input.logGroupName !== null && {
        logGroupName: input.logGroupName
    }), input.logGroupNames !== undefined && input.logGroupNames !== null && {
        logGroupNames: serializeAws_json1_1LogGroupNames(input.logGroupNames, context)
    }), input.queryString !== undefined && input.queryString !== null && {
        queryString: input.queryString
    }), input.startTime !== undefined && input.startTime !== null && {
        startTime: input.startTime
    });
};
var serializeAws_json1_1StopQueryRequest = function(input, context) {
    return (0, _tslib.__assign)({}, input.queryId !== undefined && input.queryId !== null && {
        queryId: input.queryId
    });
};
var serializeAws_json1_1TagList = function(input, context) {
    return input.filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return entry;
    });
};
var serializeAws_json1_1TagLogGroupRequest = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)({}, input.logGroupName !== undefined && input.logGroupName !== null && {
        logGroupName: input.logGroupName
    }), input.tags !== undefined && input.tags !== null && {
        tags: serializeAws_json1_1Tags(input.tags, context)
    });
};
var serializeAws_json1_1Tags = function(input, context) {
    return Object.entries(input).reduce(function(acc, _a) {
        var _b;
        var _c = (0, _tslib.__read)(_a, 2), key = _c[0], value = _c[1];
        if (value === null) return acc;
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, acc), (_b = {}, _b[key] = value, _b));
    }, {});
};
var serializeAws_json1_1TestEventMessages = function(input, context) {
    return input.filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return entry;
    });
};
var serializeAws_json1_1TestMetricFilterRequest = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)({}, input.filterPattern !== undefined && input.filterPattern !== null && {
        filterPattern: input.filterPattern
    }), input.logEventMessages !== undefined && input.logEventMessages !== null && {
        logEventMessages: serializeAws_json1_1TestEventMessages(input.logEventMessages, context)
    });
};
var serializeAws_json1_1UntagLogGroupRequest = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)({}, input.logGroupName !== undefined && input.logGroupName !== null && {
        logGroupName: input.logGroupName
    }), input.tags !== undefined && input.tags !== null && {
        tags: serializeAws_json1_1TagList(input.tags, context)
    });
};
var deserializeAws_json1_1CreateExportTaskResponse = function(output, context) {
    return {
        taskId: output.taskId !== undefined && output.taskId !== null ? output.taskId : undefined
    };
};
var deserializeAws_json1_1DataAlreadyAcceptedException = function(output, context) {
    return {
        expectedSequenceToken: output.expectedSequenceToken !== undefined && output.expectedSequenceToken !== null ? output.expectedSequenceToken : undefined,
        message: output.message !== undefined && output.message !== null ? output.message : undefined
    };
};
var deserializeAws_json1_1DeleteQueryDefinitionResponse = function(output, context) {
    return {
        success: output.success !== undefined && output.success !== null ? output.success : undefined
    };
};
var deserializeAws_json1_1DescribeDestinationsResponse = function(output, context) {
    return {
        destinations: output.destinations !== undefined && output.destinations !== null ? deserializeAws_json1_1Destinations(output.destinations, context) : undefined,
        nextToken: output.nextToken !== undefined && output.nextToken !== null ? output.nextToken : undefined
    };
};
var deserializeAws_json1_1DescribeExportTasksResponse = function(output, context) {
    return {
        exportTasks: output.exportTasks !== undefined && output.exportTasks !== null ? deserializeAws_json1_1ExportTasks(output.exportTasks, context) : undefined,
        nextToken: output.nextToken !== undefined && output.nextToken !== null ? output.nextToken : undefined
    };
};
var deserializeAws_json1_1DescribeLogGroupsResponse = function(output, context) {
    return {
        logGroups: output.logGroups !== undefined && output.logGroups !== null ? deserializeAws_json1_1LogGroups(output.logGroups, context) : undefined,
        nextToken: output.nextToken !== undefined && output.nextToken !== null ? output.nextToken : undefined
    };
};
var deserializeAws_json1_1DescribeLogStreamsResponse = function(output, context) {
    return {
        logStreams: output.logStreams !== undefined && output.logStreams !== null ? deserializeAws_json1_1LogStreams(output.logStreams, context) : undefined,
        nextToken: output.nextToken !== undefined && output.nextToken !== null ? output.nextToken : undefined
    };
};
var deserializeAws_json1_1DescribeMetricFiltersResponse = function(output, context) {
    return {
        metricFilters: output.metricFilters !== undefined && output.metricFilters !== null ? deserializeAws_json1_1MetricFilters(output.metricFilters, context) : undefined,
        nextToken: output.nextToken !== undefined && output.nextToken !== null ? output.nextToken : undefined
    };
};
var deserializeAws_json1_1DescribeQueriesResponse = function(output, context) {
    return {
        nextToken: output.nextToken !== undefined && output.nextToken !== null ? output.nextToken : undefined,
        queries: output.queries !== undefined && output.queries !== null ? deserializeAws_json1_1QueryInfoList(output.queries, context) : undefined
    };
};
var deserializeAws_json1_1DescribeQueryDefinitionsResponse = function(output, context) {
    return {
        nextToken: output.nextToken !== undefined && output.nextToken !== null ? output.nextToken : undefined,
        queryDefinitions: output.queryDefinitions !== undefined && output.queryDefinitions !== null ? deserializeAws_json1_1QueryDefinitionList(output.queryDefinitions, context) : undefined
    };
};
var deserializeAws_json1_1DescribeResourcePoliciesResponse = function(output, context) {
    return {
        nextToken: output.nextToken !== undefined && output.nextToken !== null ? output.nextToken : undefined,
        resourcePolicies: output.resourcePolicies !== undefined && output.resourcePolicies !== null ? deserializeAws_json1_1ResourcePolicies(output.resourcePolicies, context) : undefined
    };
};
var deserializeAws_json1_1DescribeSubscriptionFiltersResponse = function(output, context) {
    return {
        nextToken: output.nextToken !== undefined && output.nextToken !== null ? output.nextToken : undefined,
        subscriptionFilters: output.subscriptionFilters !== undefined && output.subscriptionFilters !== null ? deserializeAws_json1_1SubscriptionFilters(output.subscriptionFilters, context) : undefined
    };
};
var deserializeAws_json1_1Destination = function(output, context) {
    return {
        accessPolicy: output.accessPolicy !== undefined && output.accessPolicy !== null ? output.accessPolicy : undefined,
        arn: output.arn !== undefined && output.arn !== null ? output.arn : undefined,
        creationTime: output.creationTime !== undefined && output.creationTime !== null ? output.creationTime : undefined,
        destinationName: output.destinationName !== undefined && output.destinationName !== null ? output.destinationName : undefined,
        roleArn: output.roleArn !== undefined && output.roleArn !== null ? output.roleArn : undefined,
        targetArn: output.targetArn !== undefined && output.targetArn !== null ? output.targetArn : undefined
    };
};
var deserializeAws_json1_1Destinations = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return deserializeAws_json1_1Destination(entry, context);
    });
};
var deserializeAws_json1_1ExportTask = function(output, context) {
    return {
        destination: output.destination !== undefined && output.destination !== null ? output.destination : undefined,
        destinationPrefix: output.destinationPrefix !== undefined && output.destinationPrefix !== null ? output.destinationPrefix : undefined,
        executionInfo: output.executionInfo !== undefined && output.executionInfo !== null ? deserializeAws_json1_1ExportTaskExecutionInfo(output.executionInfo, context) : undefined,
        from: output.from !== undefined && output.from !== null ? output.from : undefined,
        logGroupName: output.logGroupName !== undefined && output.logGroupName !== null ? output.logGroupName : undefined,
        status: output.status !== undefined && output.status !== null ? deserializeAws_json1_1ExportTaskStatus(output.status, context) : undefined,
        taskId: output.taskId !== undefined && output.taskId !== null ? output.taskId : undefined,
        taskName: output.taskName !== undefined && output.taskName !== null ? output.taskName : undefined,
        to: output.to !== undefined && output.to !== null ? output.to : undefined
    };
};
var deserializeAws_json1_1ExportTaskExecutionInfo = function(output, context) {
    return {
        completionTime: output.completionTime !== undefined && output.completionTime !== null ? output.completionTime : undefined,
        creationTime: output.creationTime !== undefined && output.creationTime !== null ? output.creationTime : undefined
    };
};
var deserializeAws_json1_1ExportTasks = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return deserializeAws_json1_1ExportTask(entry, context);
    });
};
var deserializeAws_json1_1ExportTaskStatus = function(output, context) {
    return {
        code: output.code !== undefined && output.code !== null ? output.code : undefined,
        message: output.message !== undefined && output.message !== null ? output.message : undefined
    };
};
var deserializeAws_json1_1ExtractedValues = function(output, context) {
    return Object.entries(output).reduce(function(acc, _a) {
        var _b;
        var _c = (0, _tslib.__read)(_a, 2), key = _c[0], value = _c[1];
        if (value === null) return acc;
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, acc), (_b = {}, _b[key] = value, _b));
    }, {});
};
var deserializeAws_json1_1FilteredLogEvent = function(output, context) {
    return {
        eventId: output.eventId !== undefined && output.eventId !== null ? output.eventId : undefined,
        ingestionTime: output.ingestionTime !== undefined && output.ingestionTime !== null ? output.ingestionTime : undefined,
        logStreamName: output.logStreamName !== undefined && output.logStreamName !== null ? output.logStreamName : undefined,
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
        timestamp: output.timestamp !== undefined && output.timestamp !== null ? output.timestamp : undefined
    };
};
var deserializeAws_json1_1FilteredLogEvents = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return deserializeAws_json1_1FilteredLogEvent(entry, context);
    });
};
var deserializeAws_json1_1FilterLogEventsResponse = function(output, context) {
    return {
        events: output.events !== undefined && output.events !== null ? deserializeAws_json1_1FilteredLogEvents(output.events, context) : undefined,
        nextToken: output.nextToken !== undefined && output.nextToken !== null ? output.nextToken : undefined,
        searchedLogStreams: output.searchedLogStreams !== undefined && output.searchedLogStreams !== null ? deserializeAws_json1_1SearchedLogStreams(output.searchedLogStreams, context) : undefined
    };
};
var deserializeAws_json1_1GetLogEventsResponse = function(output, context) {
    return {
        events: output.events !== undefined && output.events !== null ? deserializeAws_json1_1OutputLogEvents(output.events, context) : undefined,
        nextBackwardToken: output.nextBackwardToken !== undefined && output.nextBackwardToken !== null ? output.nextBackwardToken : undefined,
        nextForwardToken: output.nextForwardToken !== undefined && output.nextForwardToken !== null ? output.nextForwardToken : undefined
    };
};
var deserializeAws_json1_1GetLogGroupFieldsResponse = function(output, context) {
    return {
        logGroupFields: output.logGroupFields !== undefined && output.logGroupFields !== null ? deserializeAws_json1_1LogGroupFieldList(output.logGroupFields, context) : undefined
    };
};
var deserializeAws_json1_1GetLogRecordResponse = function(output, context) {
    return {
        logRecord: output.logRecord !== undefined && output.logRecord !== null ? deserializeAws_json1_1LogRecord(output.logRecord, context) : undefined
    };
};
var deserializeAws_json1_1GetQueryResultsResponse = function(output, context) {
    return {
        results: output.results !== undefined && output.results !== null ? deserializeAws_json1_1QueryResults(output.results, context) : undefined,
        statistics: output.statistics !== undefined && output.statistics !== null ? deserializeAws_json1_1QueryStatistics(output.statistics, context) : undefined,
        status: output.status !== undefined && output.status !== null ? output.status : undefined
    };
};
var deserializeAws_json1_1InvalidOperationException = function(output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined
    };
};
var deserializeAws_json1_1InvalidParameterException = function(output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined
    };
};
var deserializeAws_json1_1InvalidSequenceTokenException = function(output, context) {
    return {
        expectedSequenceToken: output.expectedSequenceToken !== undefined && output.expectedSequenceToken !== null ? output.expectedSequenceToken : undefined,
        message: output.message !== undefined && output.message !== null ? output.message : undefined
    };
};
var deserializeAws_json1_1LimitExceededException = function(output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined
    };
};
var deserializeAws_json1_1ListTagsLogGroupResponse = function(output, context) {
    return {
        tags: output.tags !== undefined && output.tags !== null ? deserializeAws_json1_1Tags(output.tags, context) : undefined
    };
};
var deserializeAws_json1_1LogGroup = function(output, context) {
    return {
        arn: output.arn !== undefined && output.arn !== null ? output.arn : undefined,
        creationTime: output.creationTime !== undefined && output.creationTime !== null ? output.creationTime : undefined,
        kmsKeyId: output.kmsKeyId !== undefined && output.kmsKeyId !== null ? output.kmsKeyId : undefined,
        logGroupName: output.logGroupName !== undefined && output.logGroupName !== null ? output.logGroupName : undefined,
        metricFilterCount: output.metricFilterCount !== undefined && output.metricFilterCount !== null ? output.metricFilterCount : undefined,
        retentionInDays: output.retentionInDays !== undefined && output.retentionInDays !== null ? output.retentionInDays : undefined,
        storedBytes: output.storedBytes !== undefined && output.storedBytes !== null ? output.storedBytes : undefined
    };
};
var deserializeAws_json1_1LogGroupField = function(output, context) {
    return {
        name: output.name !== undefined && output.name !== null ? output.name : undefined,
        percent: output.percent !== undefined && output.percent !== null ? output.percent : undefined
    };
};
var deserializeAws_json1_1LogGroupFieldList = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return deserializeAws_json1_1LogGroupField(entry, context);
    });
};
var deserializeAws_json1_1LogGroupNames = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return entry;
    });
};
var deserializeAws_json1_1LogGroups = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return deserializeAws_json1_1LogGroup(entry, context);
    });
};
var deserializeAws_json1_1LogRecord = function(output, context) {
    return Object.entries(output).reduce(function(acc, _a) {
        var _b;
        var _c = (0, _tslib.__read)(_a, 2), key = _c[0], value = _c[1];
        if (value === null) return acc;
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, acc), (_b = {}, _b[key] = value, _b));
    }, {});
};
var deserializeAws_json1_1LogStream = function(output, context) {
    return {
        arn: output.arn !== undefined && output.arn !== null ? output.arn : undefined,
        creationTime: output.creationTime !== undefined && output.creationTime !== null ? output.creationTime : undefined,
        firstEventTimestamp: output.firstEventTimestamp !== undefined && output.firstEventTimestamp !== null ? output.firstEventTimestamp : undefined,
        lastEventTimestamp: output.lastEventTimestamp !== undefined && output.lastEventTimestamp !== null ? output.lastEventTimestamp : undefined,
        lastIngestionTime: output.lastIngestionTime !== undefined && output.lastIngestionTime !== null ? output.lastIngestionTime : undefined,
        logStreamName: output.logStreamName !== undefined && output.logStreamName !== null ? output.logStreamName : undefined,
        storedBytes: output.storedBytes !== undefined && output.storedBytes !== null ? output.storedBytes : undefined,
        uploadSequenceToken: output.uploadSequenceToken !== undefined && output.uploadSequenceToken !== null ? output.uploadSequenceToken : undefined
    };
};
var deserializeAws_json1_1LogStreams = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return deserializeAws_json1_1LogStream(entry, context);
    });
};
var deserializeAws_json1_1MalformedQueryException = function(output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
        queryCompileError: output.queryCompileError !== undefined && output.queryCompileError !== null ? deserializeAws_json1_1QueryCompileError(output.queryCompileError, context) : undefined
    };
};
var deserializeAws_json1_1MetricFilter = function(output, context) {
    return {
        creationTime: output.creationTime !== undefined && output.creationTime !== null ? output.creationTime : undefined,
        filterName: output.filterName !== undefined && output.filterName !== null ? output.filterName : undefined,
        filterPattern: output.filterPattern !== undefined && output.filterPattern !== null ? output.filterPattern : undefined,
        logGroupName: output.logGroupName !== undefined && output.logGroupName !== null ? output.logGroupName : undefined,
        metricTransformations: output.metricTransformations !== undefined && output.metricTransformations !== null ? deserializeAws_json1_1MetricTransformations(output.metricTransformations, context) : undefined
    };
};
var deserializeAws_json1_1MetricFilterMatches = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return deserializeAws_json1_1MetricFilterMatchRecord(entry, context);
    });
};
var deserializeAws_json1_1MetricFilterMatchRecord = function(output, context) {
    return {
        eventMessage: output.eventMessage !== undefined && output.eventMessage !== null ? output.eventMessage : undefined,
        eventNumber: output.eventNumber !== undefined && output.eventNumber !== null ? output.eventNumber : undefined,
        extractedValues: output.extractedValues !== undefined && output.extractedValues !== null ? deserializeAws_json1_1ExtractedValues(output.extractedValues, context) : undefined
    };
};
var deserializeAws_json1_1MetricFilters = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return deserializeAws_json1_1MetricFilter(entry, context);
    });
};
var deserializeAws_json1_1MetricTransformation = function(output, context) {
    return {
        defaultValue: output.defaultValue !== undefined && output.defaultValue !== null ? output.defaultValue : undefined,
        metricName: output.metricName !== undefined && output.metricName !== null ? output.metricName : undefined,
        metricNamespace: output.metricNamespace !== undefined && output.metricNamespace !== null ? output.metricNamespace : undefined,
        metricValue: output.metricValue !== undefined && output.metricValue !== null ? output.metricValue : undefined
    };
};
var deserializeAws_json1_1MetricTransformations = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return deserializeAws_json1_1MetricTransformation(entry, context);
    });
};
var deserializeAws_json1_1OperationAbortedException = function(output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined
    };
};
var deserializeAws_json1_1OutputLogEvent = function(output, context) {
    return {
        ingestionTime: output.ingestionTime !== undefined && output.ingestionTime !== null ? output.ingestionTime : undefined,
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
        timestamp: output.timestamp !== undefined && output.timestamp !== null ? output.timestamp : undefined
    };
};
var deserializeAws_json1_1OutputLogEvents = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return deserializeAws_json1_1OutputLogEvent(entry, context);
    });
};
var deserializeAws_json1_1PutDestinationResponse = function(output, context) {
    return {
        destination: output.destination !== undefined && output.destination !== null ? deserializeAws_json1_1Destination(output.destination, context) : undefined
    };
};
var deserializeAws_json1_1PutLogEventsResponse = function(output, context) {
    return {
        nextSequenceToken: output.nextSequenceToken !== undefined && output.nextSequenceToken !== null ? output.nextSequenceToken : undefined,
        rejectedLogEventsInfo: output.rejectedLogEventsInfo !== undefined && output.rejectedLogEventsInfo !== null ? deserializeAws_json1_1RejectedLogEventsInfo(output.rejectedLogEventsInfo, context) : undefined
    };
};
var deserializeAws_json1_1PutQueryDefinitionResponse = function(output, context) {
    return {
        queryDefinitionId: output.queryDefinitionId !== undefined && output.queryDefinitionId !== null ? output.queryDefinitionId : undefined
    };
};
var deserializeAws_json1_1PutResourcePolicyResponse = function(output, context) {
    return {
        resourcePolicy: output.resourcePolicy !== undefined && output.resourcePolicy !== null ? deserializeAws_json1_1ResourcePolicy(output.resourcePolicy, context) : undefined
    };
};
var deserializeAws_json1_1QueryCompileError = function(output, context) {
    return {
        location: output.location !== undefined && output.location !== null ? deserializeAws_json1_1QueryCompileErrorLocation(output.location, context) : undefined,
        message: output.message !== undefined && output.message !== null ? output.message : undefined
    };
};
var deserializeAws_json1_1QueryCompileErrorLocation = function(output, context) {
    return {
        endCharOffset: output.endCharOffset !== undefined && output.endCharOffset !== null ? output.endCharOffset : undefined,
        startCharOffset: output.startCharOffset !== undefined && output.startCharOffset !== null ? output.startCharOffset : undefined
    };
};
var deserializeAws_json1_1QueryDefinition = function(output, context) {
    return {
        lastModified: output.lastModified !== undefined && output.lastModified !== null ? output.lastModified : undefined,
        logGroupNames: output.logGroupNames !== undefined && output.logGroupNames !== null ? deserializeAws_json1_1LogGroupNames(output.logGroupNames, context) : undefined,
        name: output.name !== undefined && output.name !== null ? output.name : undefined,
        queryDefinitionId: output.queryDefinitionId !== undefined && output.queryDefinitionId !== null ? output.queryDefinitionId : undefined,
        queryString: output.queryString !== undefined && output.queryString !== null ? output.queryString : undefined
    };
};
var deserializeAws_json1_1QueryDefinitionList = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return deserializeAws_json1_1QueryDefinition(entry, context);
    });
};
var deserializeAws_json1_1QueryInfo = function(output, context) {
    return {
        createTime: output.createTime !== undefined && output.createTime !== null ? output.createTime : undefined,
        logGroupName: output.logGroupName !== undefined && output.logGroupName !== null ? output.logGroupName : undefined,
        queryId: output.queryId !== undefined && output.queryId !== null ? output.queryId : undefined,
        queryString: output.queryString !== undefined && output.queryString !== null ? output.queryString : undefined,
        status: output.status !== undefined && output.status !== null ? output.status : undefined
    };
};
var deserializeAws_json1_1QueryInfoList = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return deserializeAws_json1_1QueryInfo(entry, context);
    });
};
var deserializeAws_json1_1QueryResults = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return deserializeAws_json1_1ResultRows(entry, context);
    });
};
var deserializeAws_json1_1QueryStatistics = function(output, context) {
    return {
        bytesScanned: output.bytesScanned !== undefined && output.bytesScanned !== null ? output.bytesScanned : undefined,
        recordsMatched: output.recordsMatched !== undefined && output.recordsMatched !== null ? output.recordsMatched : undefined,
        recordsScanned: output.recordsScanned !== undefined && output.recordsScanned !== null ? output.recordsScanned : undefined
    };
};
var deserializeAws_json1_1RejectedLogEventsInfo = function(output, context) {
    return {
        expiredLogEventEndIndex: output.expiredLogEventEndIndex !== undefined && output.expiredLogEventEndIndex !== null ? output.expiredLogEventEndIndex : undefined,
        tooNewLogEventStartIndex: output.tooNewLogEventStartIndex !== undefined && output.tooNewLogEventStartIndex !== null ? output.tooNewLogEventStartIndex : undefined,
        tooOldLogEventEndIndex: output.tooOldLogEventEndIndex !== undefined && output.tooOldLogEventEndIndex !== null ? output.tooOldLogEventEndIndex : undefined
    };
};
var deserializeAws_json1_1ResourceAlreadyExistsException = function(output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined
    };
};
var deserializeAws_json1_1ResourceNotFoundException = function(output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined
    };
};
var deserializeAws_json1_1ResourcePolicies = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return deserializeAws_json1_1ResourcePolicy(entry, context);
    });
};
var deserializeAws_json1_1ResourcePolicy = function(output, context) {
    return {
        lastUpdatedTime: output.lastUpdatedTime !== undefined && output.lastUpdatedTime !== null ? output.lastUpdatedTime : undefined,
        policyDocument: output.policyDocument !== undefined && output.policyDocument !== null ? output.policyDocument : undefined,
        policyName: output.policyName !== undefined && output.policyName !== null ? output.policyName : undefined
    };
};
var deserializeAws_json1_1ResultField = function(output, context) {
    return {
        field: output.field !== undefined && output.field !== null ? output.field : undefined,
        value: output.value !== undefined && output.value !== null ? output.value : undefined
    };
};
var deserializeAws_json1_1ResultRows = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return deserializeAws_json1_1ResultField(entry, context);
    });
};
var deserializeAws_json1_1SearchedLogStream = function(output, context) {
    return {
        logStreamName: output.logStreamName !== undefined && output.logStreamName !== null ? output.logStreamName : undefined,
        searchedCompletely: output.searchedCompletely !== undefined && output.searchedCompletely !== null ? output.searchedCompletely : undefined
    };
};
var deserializeAws_json1_1SearchedLogStreams = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return deserializeAws_json1_1SearchedLogStream(entry, context);
    });
};
var deserializeAws_json1_1ServiceUnavailableException = function(output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined
    };
};
var deserializeAws_json1_1StartQueryResponse = function(output, context) {
    return {
        queryId: output.queryId !== undefined && output.queryId !== null ? output.queryId : undefined
    };
};
var deserializeAws_json1_1StopQueryResponse = function(output, context) {
    return {
        success: output.success !== undefined && output.success !== null ? output.success : undefined
    };
};
var deserializeAws_json1_1SubscriptionFilter = function(output, context) {
    return {
        creationTime: output.creationTime !== undefined && output.creationTime !== null ? output.creationTime : undefined,
        destinationArn: output.destinationArn !== undefined && output.destinationArn !== null ? output.destinationArn : undefined,
        distribution: output.distribution !== undefined && output.distribution !== null ? output.distribution : undefined,
        filterName: output.filterName !== undefined && output.filterName !== null ? output.filterName : undefined,
        filterPattern: output.filterPattern !== undefined && output.filterPattern !== null ? output.filterPattern : undefined,
        logGroupName: output.logGroupName !== undefined && output.logGroupName !== null ? output.logGroupName : undefined,
        roleArn: output.roleArn !== undefined && output.roleArn !== null ? output.roleArn : undefined
    };
};
var deserializeAws_json1_1SubscriptionFilters = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return deserializeAws_json1_1SubscriptionFilter(entry, context);
    });
};
var deserializeAws_json1_1Tags = function(output, context) {
    return Object.entries(output).reduce(function(acc, _a) {
        var _b;
        var _c = (0, _tslib.__read)(_a, 2), key = _c[0], value = _c[1];
        if (value === null) return acc;
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, acc), (_b = {}, _b[key] = value, _b));
    }, {});
};
var deserializeAws_json1_1TestMetricFilterResponse = function(output, context) {
    return {
        matches: output.matches !== undefined && output.matches !== null ? deserializeAws_json1_1MetricFilterMatches(output.matches, context) : undefined
    };
};
var deserializeAws_json1_1UnrecognizedClientException = function(output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined
    };
};
var deserializeMetadata = function(output) {
    var _a;
    return {
        httpStatusCode: output.statusCode,
        requestId: (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"]
    };
};
// Collect low-level response body stream to Uint8Array.
var collectBody = function(streamBody, context) {
    if (streamBody === void 0) streamBody = new Uint8Array();
    if (streamBody instanceof Uint8Array) return Promise.resolve(streamBody);
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
// Encode Uint8Array data into string with utf-8.
var collectBodyString = function(streamBody, context) {
    return collectBody(streamBody, context).then(function(body) {
        return context.utf8Encoder(body);
    });
};
var buildHttpRpcRequest = function(context, headers, path, resolvedHostname, body) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var _a, hostname, _b, protocol, port, contents;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    contents = {
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        path: path,
                        headers: headers
                    };
                    if (resolvedHostname !== undefined) contents.hostname = resolvedHostname;
                    if (body !== undefined) contents.body = body;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)(contents)
                    ];
            }
        });
    });
};
var parseBody = function(streamBody, context) {
    return collectBodyString(streamBody, context).then(function(encoded) {
        if (encoded.length) return JSON.parse(encoded);
        return {};
    });
};
/**
 * Load an error code for the aws.rest-json-1.1 protocol.
 */ var loadRestJsonErrorCode = function(output, data) {
    var findKey = function(object, key) {
        return Object.keys(object).find(function(k) {
            return k.toLowerCase() === key.toLowerCase();
        });
    };
    var sanitizeErrorCode = function(rawValue) {
        var cleanValue = rawValue;
        if (cleanValue.indexOf(":") >= 0) cleanValue = cleanValue.split(":")[0];
        if (cleanValue.indexOf("#") >= 0) cleanValue = cleanValue.split("#")[1];
        return cleanValue;
    };
    var headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) return sanitizeErrorCode(output.headers[headerKey]);
    if (data.code !== undefined) return sanitizeErrorCode(data.code);
    if (data["__type"] !== undefined) return sanitizeErrorCode(data["__type"]);
    return "";
};

},{"tslib":"lRdW5","@aws-sdk/protocol-http":"dbzKK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dE6sE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _deserializerMiddleware = require("./deserializerMiddleware");
parcelHelpers.exportAll(_deserializerMiddleware, exports);
var _serializerMiddleware = require("./serializerMiddleware");
parcelHelpers.exportAll(_serializerMiddleware, exports);
var _serdePlugin = require("./serdePlugin");
parcelHelpers.exportAll(_serdePlugin, exports);

},{"./deserializerMiddleware":"cwXh5","./serializerMiddleware":"cutgi","./serdePlugin":"6n7ho","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cwXh5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "deserializerMiddleware", ()=>deserializerMiddleware);
var _tslib = require("tslib");
var deserializerMiddleware = function(options, deserializer) {
    return function(next, context) {
        return function(args) {
            return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
                var response, parsed;
                return (0, _tslib.__generator)(this, function(_a) {
                    switch(_a.label){
                        case 0:
                            return [
                                4 /*yield*/ ,
                                next(args)
                            ];
                        case 1:
                            response = _a.sent().response;
                            return [
                                4 /*yield*/ ,
                                deserializer(response, options)
                            ];
                        case 2:
                            parsed = _a.sent();
                            return [
                                2 /*return*/ ,
                                {
                                    response: response,
                                    output: parsed
                                }
                            ];
                    }
                });
            });
        };
    };
};

},{"tslib":"dz4m7","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dz4m7":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cutgi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "serializerMiddleware", ()=>serializerMiddleware);
var _tslib = require("tslib");
var serializerMiddleware = function(options, serializer) {
    return function(next, context) {
        return function(args) {
            return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
                var request;
                return (0, _tslib.__generator)(this, function(_a) {
                    switch(_a.label){
                        case 0:
                            return [
                                4 /*yield*/ ,
                                serializer(args.input, options)
                            ];
                        case 1:
                            request = _a.sent();
                            return [
                                2 /*return*/ ,
                                next((0, _tslib.__assign)((0, _tslib.__assign)({}, args), {
                                    request: request
                                }))
                            ];
                    }
                });
            });
        };
    };
};

},{"tslib":"dz4m7","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6n7ho":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "deserializerMiddlewareOption", ()=>deserializerMiddlewareOption);
parcelHelpers.export(exports, "serializerMiddlewareOption", ()=>serializerMiddlewareOption);
parcelHelpers.export(exports, "getSerdePlugin", ()=>getSerdePlugin);
var _deserializerMiddleware = require("./deserializerMiddleware");
var _serializerMiddleware = require("./serializerMiddleware");
var deserializerMiddlewareOption = {
    name: "deserializerMiddleware",
    step: "deserialize",
    tags: [
        "DESERIALIZER"
    ],
    override: true
};
var serializerMiddlewareOption = {
    name: "serializerMiddleware",
    step: "serialize",
    tags: [
        "SERIALIZER"
    ],
    override: true
};
function getSerdePlugin(config, serializer, deserializer) {
    return {
        applyToStack: function(commandStack) {
            commandStack.add((0, _deserializerMiddleware.deserializerMiddleware)(config, deserializer), deserializerMiddlewareOption);
            commandStack.add((0, _serializerMiddleware.serializerMiddleware)(config, serializer), serializerMiddlewareOption);
        }
    };
}

},{"./deserializerMiddleware":"cwXh5","./serializerMiddleware":"cutgi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lGPz5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CancelExportTaskCommand", ()=>CancelExportTaskCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Cancels the specified export task.</p>
 *          <p>The task must be in the <code>PENDING</code> or <code>RUNNING</code> state.</p>
 */ var CancelExportTaskCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(CancelExportTaskCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function CancelExportTaskCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ CancelExportTaskCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CloudWatchLogsClient";
        var commandName = "CancelExportTaskCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.CancelExportTaskRequest).filterSensitiveLog,
            outputFilterSensitiveLog: function(output) {
                return output;
            }
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    CancelExportTaskCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1CancelExportTaskCommand)(input, context);
    };
    CancelExportTaskCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1CancelExportTaskCommand)(output, context);
    };
    return CancelExportTaskCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"hB4pg","../protocols/Aws_json1_1":"90twI","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cHZt6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CreateExportTaskCommand", ()=>CreateExportTaskCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Creates an export task, which allows you to efficiently export data from a
 *       log group to an Amazon S3 bucket. When you perform a <code>CreateExportTask</code>
 *       operation, you must use credentials that have permission to write to the S3 bucket
 *       that you specify as the destination.</p>
 *          <p>This is an asynchronous call. If all the required information is provided, this
 *       operation initiates an export task and responds with the ID of the task. After the task has started,
 *       you can use <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DescribeExportTasks.html">DescribeExportTasks</a> to get the status of the export task. Each account can
 *       only have one active (<code>RUNNING</code> or <code>PENDING</code>) export task at a time.
 *       To cancel an export task, use <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_CancelExportTask.html">CancelExportTask</a>.</p>
 *          <p>You can export logs from multiple log groups or multiple time ranges to the same S3
 *       bucket. To separate out log data for each export task, you can specify a prefix to be used as
 *       the Amazon S3 key prefix for all exported objects.</p>
 *          <p>Exporting to S3 buckets that are encrypted with AES-256 is supported. Exporting to S3 buckets
 *       encrypted with SSE-KMS is not supported. </p>
 */ var CreateExportTaskCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(CreateExportTaskCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function CreateExportTaskCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ CreateExportTaskCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CloudWatchLogsClient";
        var commandName = "CreateExportTaskCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.CreateExportTaskRequest).filterSensitiveLog,
            outputFilterSensitiveLog: (0, _models0.CreateExportTaskResponse).filterSensitiveLog
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    CreateExportTaskCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1CreateExportTaskCommand)(input, context);
    };
    CreateExportTaskCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1CreateExportTaskCommand)(output, context);
    };
    return CreateExportTaskCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"hB4pg","../protocols/Aws_json1_1":"90twI","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cZDs8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CreateLogGroupCommand", ()=>CreateLogGroupCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Creates a log group with the specified name. You can create up to 20,000 log groups per account.</p>
 *          <p>You must use the following guidelines when naming a log group:</p>
 *          <ul>
 *             <li>
 *                <p>Log group names must be unique within a region for an AWS account.</p>
 *             </li>
 *             <li>
 *                <p>Log group names can be between 1 and 512 characters long.</p>
 *             </li>
 *             <li>
 *                <p>Log group names consist of the following characters: a-z, A-Z, 0-9, '_' (underscore), '-' (hyphen),
 *           '/' (forward slash), '.' (period), and '#' (number sign)</p>
 *             </li>
 *          </ul>
 *          <p>When you create a log group, by default the log events in the log group never expire. To set
 *     a retention policy so that events expire and are deleted after a specified time, use
 *       <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutRetentionPolicy.html">PutRetentionPolicy</a>.</p>
 *          <p>If you associate a AWS Key Management Service (AWS KMS) customer master key (CMK) with the log group, ingested data is encrypted using the CMK.
 *       This association is stored as long as the data encrypted with the CMK is still within Amazon CloudWatch Logs.
 *       This enables Amazon CloudWatch Logs to decrypt this data whenever it is requested.</p>
 *          <p>If you attempt to associate a CMK with the log group but the CMK does not exist or the
 *       CMK is disabled, you receive an <code>InvalidParameterException</code> error. </p>
 *          <important>
 *             <p> CloudWatch Logs supports only symmetric CMKs. Do not associate an asymmetric CMK with
 *         your log group. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html">Using Symmetric and Asymmetric
 *           Keys</a>.</p>
 *          </important>
 */ var CreateLogGroupCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(CreateLogGroupCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function CreateLogGroupCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ CreateLogGroupCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CloudWatchLogsClient";
        var commandName = "CreateLogGroupCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.CreateLogGroupRequest).filterSensitiveLog,
            outputFilterSensitiveLog: function(output) {
                return output;
            }
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    CreateLogGroupCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1CreateLogGroupCommand)(input, context);
    };
    CreateLogGroupCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1CreateLogGroupCommand)(output, context);
    };
    return CreateLogGroupCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"hB4pg","../protocols/Aws_json1_1":"90twI","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kESLR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CreateLogStreamCommand", ()=>CreateLogStreamCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Creates a log stream for the specified log group. A log stream is a sequence of log events
 *       that originate from a single source, such as an application instance or a resource that is
 *       being monitored.</p>
 *          <p>There is no limit on the number of log streams that you can create for a log group. There is a limit
 *     of 50 TPS on <code>CreateLogStream</code> operations, after which transactions are throttled.</p>
 *          <p>You must use the following guidelines when naming a log stream:</p>
 *          <ul>
 *             <li>
 *                <p>Log stream names must be unique within the log group.</p>
 *             </li>
 *             <li>
 *                <p>Log stream names can be between 1 and 512 characters long.</p>
 *             </li>
 *             <li>
 *                <p>The ':' (colon) and '*' (asterisk) characters are not allowed.</p>
 *             </li>
 *          </ul>
 */ var CreateLogStreamCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(CreateLogStreamCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function CreateLogStreamCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ CreateLogStreamCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CloudWatchLogsClient";
        var commandName = "CreateLogStreamCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.CreateLogStreamRequest).filterSensitiveLog,
            outputFilterSensitiveLog: function(output) {
                return output;
            }
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    CreateLogStreamCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1CreateLogStreamCommand)(input, context);
    };
    CreateLogStreamCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1CreateLogStreamCommand)(output, context);
    };
    return CreateLogStreamCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"hB4pg","../protocols/Aws_json1_1":"90twI","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eGnLp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DeleteDestinationCommand", ()=>DeleteDestinationCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Deletes the specified destination, and eventually disables all the
 *       subscription filters that publish to it. This operation does not delete the
 *       physical resource encapsulated by the destination.</p>
 */ var DeleteDestinationCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(DeleteDestinationCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function DeleteDestinationCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ DeleteDestinationCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CloudWatchLogsClient";
        var commandName = "DeleteDestinationCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.DeleteDestinationRequest).filterSensitiveLog,
            outputFilterSensitiveLog: function(output) {
                return output;
            }
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    DeleteDestinationCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1DeleteDestinationCommand)(input, context);
    };
    DeleteDestinationCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1DeleteDestinationCommand)(output, context);
    };
    return DeleteDestinationCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"hB4pg","../protocols/Aws_json1_1":"90twI","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"k4NJk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DeleteLogGroupCommand", ()=>DeleteLogGroupCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Deletes the specified log group and permanently deletes all the archived
 *       log events associated with the log group.</p>
 */ var DeleteLogGroupCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(DeleteLogGroupCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function DeleteLogGroupCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ DeleteLogGroupCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CloudWatchLogsClient";
        var commandName = "DeleteLogGroupCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.DeleteLogGroupRequest).filterSensitiveLog,
            outputFilterSensitiveLog: function(output) {
                return output;
            }
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    DeleteLogGroupCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1DeleteLogGroupCommand)(input, context);
    };
    DeleteLogGroupCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1DeleteLogGroupCommand)(output, context);
    };
    return DeleteLogGroupCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"hB4pg","../protocols/Aws_json1_1":"90twI","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b7ePR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DeleteLogStreamCommand", ()=>DeleteLogStreamCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Deletes the specified log stream and permanently deletes all the archived log events associated
 *       with the log stream.</p>
 */ var DeleteLogStreamCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(DeleteLogStreamCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function DeleteLogStreamCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ DeleteLogStreamCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CloudWatchLogsClient";
        var commandName = "DeleteLogStreamCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.DeleteLogStreamRequest).filterSensitiveLog,
            outputFilterSensitiveLog: function(output) {
                return output;
            }
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    DeleteLogStreamCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1DeleteLogStreamCommand)(input, context);
    };
    DeleteLogStreamCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1DeleteLogStreamCommand)(output, context);
    };
    return DeleteLogStreamCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"hB4pg","../protocols/Aws_json1_1":"90twI","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iuN0L":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DeleteMetricFilterCommand", ()=>DeleteMetricFilterCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Deletes the specified metric filter.</p>
 */ var DeleteMetricFilterCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(DeleteMetricFilterCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function DeleteMetricFilterCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ DeleteMetricFilterCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CloudWatchLogsClient";
        var commandName = "DeleteMetricFilterCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.DeleteMetricFilterRequest).filterSensitiveLog,
            outputFilterSensitiveLog: function(output) {
                return output;
            }
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    DeleteMetricFilterCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1DeleteMetricFilterCommand)(input, context);
    };
    DeleteMetricFilterCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1DeleteMetricFilterCommand)(output, context);
    };
    return DeleteMetricFilterCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"hB4pg","../protocols/Aws_json1_1":"90twI","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l7G67":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DeleteQueryDefinitionCommand", ()=>DeleteQueryDefinitionCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Deletes a saved CloudWatch Logs Insights query definition.
 *       A query definition contains details about a saved CloudWatch Logs Insights query.</p>
 *          <p>Each <code>DeleteQueryDefinition</code> operation can delete one query definition.</p>
 *          <p>You must have the <code>logs:DeleteQueryDefinition</code> permission to be able to perform
 *       this operation.</p>
 */ var DeleteQueryDefinitionCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(DeleteQueryDefinitionCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function DeleteQueryDefinitionCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ DeleteQueryDefinitionCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CloudWatchLogsClient";
        var commandName = "DeleteQueryDefinitionCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.DeleteQueryDefinitionRequest).filterSensitiveLog,
            outputFilterSensitiveLog: (0, _models0.DeleteQueryDefinitionResponse).filterSensitiveLog
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    DeleteQueryDefinitionCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1DeleteQueryDefinitionCommand)(input, context);
    };
    DeleteQueryDefinitionCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1DeleteQueryDefinitionCommand)(output, context);
    };
    return DeleteQueryDefinitionCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"hB4pg","../protocols/Aws_json1_1":"90twI","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3bkx1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DeleteResourcePolicyCommand", ()=>DeleteResourcePolicyCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Deletes a resource policy from this account. This revokes
 *     the access of the identities in that policy to put log events to this account.</p>
 */ var DeleteResourcePolicyCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(DeleteResourcePolicyCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function DeleteResourcePolicyCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ DeleteResourcePolicyCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CloudWatchLogsClient";
        var commandName = "DeleteResourcePolicyCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.DeleteResourcePolicyRequest).filterSensitiveLog,
            outputFilterSensitiveLog: function(output) {
                return output;
            }
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    DeleteResourcePolicyCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1DeleteResourcePolicyCommand)(input, context);
    };
    DeleteResourcePolicyCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1DeleteResourcePolicyCommand)(output, context);
    };
    return DeleteResourcePolicyCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"hB4pg","../protocols/Aws_json1_1":"90twI","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ykCfV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DeleteRetentionPolicyCommand", ()=>DeleteRetentionPolicyCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Deletes the specified retention policy.</p>
 *          <p>Log events do not expire if they belong to log groups without a retention policy.</p>
 */ var DeleteRetentionPolicyCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(DeleteRetentionPolicyCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function DeleteRetentionPolicyCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ DeleteRetentionPolicyCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CloudWatchLogsClient";
        var commandName = "DeleteRetentionPolicyCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.DeleteRetentionPolicyRequest).filterSensitiveLog,
            outputFilterSensitiveLog: function(output) {
                return output;
            }
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    DeleteRetentionPolicyCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1DeleteRetentionPolicyCommand)(input, context);
    };
    DeleteRetentionPolicyCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1DeleteRetentionPolicyCommand)(output, context);
    };
    return DeleteRetentionPolicyCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"hB4pg","../protocols/Aws_json1_1":"90twI","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2mBar":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DeleteSubscriptionFilterCommand", ()=>DeleteSubscriptionFilterCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Deletes the specified subscription filter.</p>
 */ var DeleteSubscriptionFilterCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(DeleteSubscriptionFilterCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function DeleteSubscriptionFilterCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ DeleteSubscriptionFilterCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CloudWatchLogsClient";
        var commandName = "DeleteSubscriptionFilterCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.DeleteSubscriptionFilterRequest).filterSensitiveLog,
            outputFilterSensitiveLog: function(output) {
                return output;
            }
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    DeleteSubscriptionFilterCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1DeleteSubscriptionFilterCommand)(input, context);
    };
    DeleteSubscriptionFilterCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1DeleteSubscriptionFilterCommand)(output, context);
    };
    return DeleteSubscriptionFilterCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"hB4pg","../protocols/Aws_json1_1":"90twI","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gW1q6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DescribeDestinationsCommand", ()=>DescribeDestinationsCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Lists all your destinations. The results are ASCII-sorted by destination name.</p>
 */ var DescribeDestinationsCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(DescribeDestinationsCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function DescribeDestinationsCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ DescribeDestinationsCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CloudWatchLogsClient";
        var commandName = "DescribeDestinationsCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.DescribeDestinationsRequest).filterSensitiveLog,
            outputFilterSensitiveLog: (0, _models0.DescribeDestinationsResponse).filterSensitiveLog
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    DescribeDestinationsCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1DescribeDestinationsCommand)(input, context);
    };
    DescribeDestinationsCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1DescribeDestinationsCommand)(output, context);
    };
    return DescribeDestinationsCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"hB4pg","../protocols/Aws_json1_1":"90twI","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gyEdP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DescribeExportTasksCommand", ()=>DescribeExportTasksCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Lists the specified export tasks. You can list all your export tasks or filter
 *       the results based on task ID or task status.</p>
 */ var DescribeExportTasksCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(DescribeExportTasksCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function DescribeExportTasksCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ DescribeExportTasksCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CloudWatchLogsClient";
        var commandName = "DescribeExportTasksCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.DescribeExportTasksRequest).filterSensitiveLog,
            outputFilterSensitiveLog: (0, _models0.DescribeExportTasksResponse).filterSensitiveLog
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    DescribeExportTasksCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1DescribeExportTasksCommand)(input, context);
    };
    DescribeExportTasksCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1DescribeExportTasksCommand)(output, context);
    };
    return DescribeExportTasksCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"hB4pg","../protocols/Aws_json1_1":"90twI","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eP5yc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DescribeLogGroupsCommand", ()=>DescribeLogGroupsCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Lists the specified log groups. You can list all your log groups or filter the results by prefix.
 *       The results are ASCII-sorted by log group name.</p>
 */ var DescribeLogGroupsCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(DescribeLogGroupsCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function DescribeLogGroupsCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ DescribeLogGroupsCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CloudWatchLogsClient";
        var commandName = "DescribeLogGroupsCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.DescribeLogGroupsRequest).filterSensitiveLog,
            outputFilterSensitiveLog: (0, _models0.DescribeLogGroupsResponse).filterSensitiveLog
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    DescribeLogGroupsCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1DescribeLogGroupsCommand)(input, context);
    };
    DescribeLogGroupsCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1DescribeLogGroupsCommand)(output, context);
    };
    return DescribeLogGroupsCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"hB4pg","../protocols/Aws_json1_1":"90twI","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a3nMC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DescribeLogStreamsCommand", ()=>DescribeLogStreamsCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Lists the log streams for the specified log group.
 *       You can list all the log streams or filter the results by prefix.
 *       You can also control how the results are ordered.</p>
 *          <p>This operation has a limit of five transactions per second, after which transactions are throttled.</p>
 */ var DescribeLogStreamsCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(DescribeLogStreamsCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function DescribeLogStreamsCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ DescribeLogStreamsCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CloudWatchLogsClient";
        var commandName = "DescribeLogStreamsCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.DescribeLogStreamsRequest).filterSensitiveLog,
            outputFilterSensitiveLog: (0, _models0.DescribeLogStreamsResponse).filterSensitiveLog
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    DescribeLogStreamsCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1DescribeLogStreamsCommand)(input, context);
    };
    DescribeLogStreamsCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1DescribeLogStreamsCommand)(output, context);
    };
    return DescribeLogStreamsCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"hB4pg","../protocols/Aws_json1_1":"90twI","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6Xo3P":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DescribeMetricFiltersCommand", ()=>DescribeMetricFiltersCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Lists the specified metric filters. You can list all of the metric filters or filter
 *       the results by log name, prefix, metric name, or metric namespace. The results are
 *       ASCII-sorted by filter name.</p>
 */ var DescribeMetricFiltersCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(DescribeMetricFiltersCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function DescribeMetricFiltersCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ DescribeMetricFiltersCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CloudWatchLogsClient";
        var commandName = "DescribeMetricFiltersCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.DescribeMetricFiltersRequest).filterSensitiveLog,
            outputFilterSensitiveLog: (0, _models0.DescribeMetricFiltersResponse).filterSensitiveLog
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    DescribeMetricFiltersCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1DescribeMetricFiltersCommand)(input, context);
    };
    DescribeMetricFiltersCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1DescribeMetricFiltersCommand)(output, context);
    };
    return DescribeMetricFiltersCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"hB4pg","../protocols/Aws_json1_1":"90twI","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4jf0G":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DescribeQueriesCommand", ()=>DescribeQueriesCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Returns a list of CloudWatch Logs Insights queries that are scheduled, executing, or have
 *       been executed recently in this account. You can request all queries or limit it to queries of
 *       a specific log group or queries with a certain status.</p>
 */ var DescribeQueriesCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(DescribeQueriesCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function DescribeQueriesCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ DescribeQueriesCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CloudWatchLogsClient";
        var commandName = "DescribeQueriesCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.DescribeQueriesRequest).filterSensitiveLog,
            outputFilterSensitiveLog: (0, _models0.DescribeQueriesResponse).filterSensitiveLog
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    DescribeQueriesCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1DescribeQueriesCommand)(input, context);
    };
    DescribeQueriesCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1DescribeQueriesCommand)(output, context);
    };
    return DescribeQueriesCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"hB4pg","../protocols/Aws_json1_1":"90twI","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lWsi5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DescribeQueryDefinitionsCommand", ()=>DescribeQueryDefinitionsCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>This operation returns a paginated list of your saved CloudWatch Logs Insights query definitions.</p>
 *          <p>You can use the <code>queryDefinitionNamePrefix</code> parameter to limit the results to only the
 *       query definitions that have names that start with a certain string.</p>
 */ var DescribeQueryDefinitionsCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(DescribeQueryDefinitionsCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function DescribeQueryDefinitionsCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ DescribeQueryDefinitionsCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CloudWatchLogsClient";
        var commandName = "DescribeQueryDefinitionsCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.DescribeQueryDefinitionsRequest).filterSensitiveLog,
            outputFilterSensitiveLog: (0, _models0.DescribeQueryDefinitionsResponse).filterSensitiveLog
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    DescribeQueryDefinitionsCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1DescribeQueryDefinitionsCommand)(input, context);
    };
    DescribeQueryDefinitionsCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1DescribeQueryDefinitionsCommand)(output, context);
    };
    return DescribeQueryDefinitionsCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"hB4pg","../protocols/Aws_json1_1":"90twI","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"adBnC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DescribeResourcePoliciesCommand", ()=>DescribeResourcePoliciesCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Lists the resource policies in this account.</p>
 */ var DescribeResourcePoliciesCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(DescribeResourcePoliciesCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function DescribeResourcePoliciesCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ DescribeResourcePoliciesCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CloudWatchLogsClient";
        var commandName = "DescribeResourcePoliciesCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.DescribeResourcePoliciesRequest).filterSensitiveLog,
            outputFilterSensitiveLog: (0, _models0.DescribeResourcePoliciesResponse).filterSensitiveLog
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    DescribeResourcePoliciesCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1DescribeResourcePoliciesCommand)(input, context);
    };
    DescribeResourcePoliciesCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1DescribeResourcePoliciesCommand)(output, context);
    };
    return DescribeResourcePoliciesCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"hB4pg","../protocols/Aws_json1_1":"90twI","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bj8Le":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DescribeSubscriptionFiltersCommand", ()=>DescribeSubscriptionFiltersCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Lists the subscription filters for the specified log group. You can list all the subscription filters or filter the results by prefix.
 *       The results are ASCII-sorted by filter name.</p>
 */ var DescribeSubscriptionFiltersCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(DescribeSubscriptionFiltersCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function DescribeSubscriptionFiltersCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ DescribeSubscriptionFiltersCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CloudWatchLogsClient";
        var commandName = "DescribeSubscriptionFiltersCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.DescribeSubscriptionFiltersRequest).filterSensitiveLog,
            outputFilterSensitiveLog: (0, _models0.DescribeSubscriptionFiltersResponse).filterSensitiveLog
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    DescribeSubscriptionFiltersCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1DescribeSubscriptionFiltersCommand)(input, context);
    };
    DescribeSubscriptionFiltersCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1DescribeSubscriptionFiltersCommand)(output, context);
    };
    return DescribeSubscriptionFiltersCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"hB4pg","../protocols/Aws_json1_1":"90twI","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f4qhL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DisassociateKmsKeyCommand", ()=>DisassociateKmsKeyCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Disassociates the associated AWS Key Management Service (AWS KMS) customer master key (CMK) from the specified log group.</p>
 *          <p>After the AWS KMS CMK is disassociated from the log group, AWS CloudWatch Logs stops encrypting newly ingested data for the log group.
 *       All previously ingested data remains encrypted, and AWS CloudWatch Logs requires permissions for the CMK whenever the encrypted data is requested.</p>
 *          <p>Note that it can take up to 5 minutes for this operation to take effect.</p>
 */ var DisassociateKmsKeyCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(DisassociateKmsKeyCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function DisassociateKmsKeyCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ DisassociateKmsKeyCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CloudWatchLogsClient";
        var commandName = "DisassociateKmsKeyCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.DisassociateKmsKeyRequest).filterSensitiveLog,
            outputFilterSensitiveLog: function(output) {
                return output;
            }
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    DisassociateKmsKeyCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1DisassociateKmsKeyCommand)(input, context);
    };
    DisassociateKmsKeyCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1DisassociateKmsKeyCommand)(output, context);
    };
    return DisassociateKmsKeyCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"hB4pg","../protocols/Aws_json1_1":"90twI","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eVZ5x":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FilterLogEventsCommand", ()=>FilterLogEventsCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Lists log events from the specified log group. You can list all the log events or filter the results
 *       using a filter pattern, a time range, and the name of the log stream.</p>
 *          <p>By default, this operation returns as many log events as can fit in 1 MB (up to 10,000
 *       log events) or all the events found within the time range that you specify. If the results
 *       include a token, then there are more log events available, and you can get additional results
 *       by specifying the token in a subsequent call. This operation can return empty results
 *     while there are more log events available through the token.</p>
 *          <p>The returned log events are sorted by event timestamp, the timestamp when the event was ingested
 *     by CloudWatch Logs, and the ID of the <code>PutLogEvents</code> request.</p>
 */ var FilterLogEventsCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(FilterLogEventsCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function FilterLogEventsCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ FilterLogEventsCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CloudWatchLogsClient";
        var commandName = "FilterLogEventsCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.FilterLogEventsRequest).filterSensitiveLog,
            outputFilterSensitiveLog: (0, _models0.FilterLogEventsResponse).filterSensitiveLog
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    FilterLogEventsCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1FilterLogEventsCommand)(input, context);
    };
    FilterLogEventsCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1FilterLogEventsCommand)(output, context);
    };
    return FilterLogEventsCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"hB4pg","../protocols/Aws_json1_1":"90twI","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aQs9i":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GetLogEventsCommand", ()=>GetLogEventsCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Lists log events from the specified log stream. You can list all of the log events or
 *       filter using a time range.</p>
 *
 *          <p>By default, this operation returns as many log events as can fit in a response size of 1MB (up to 10,000 log events).
 *       You can get additional log events by specifying one of the tokens in a subsequent call.
 *       This operation can return empty results while there are more log events available through the token.</p>
 */ var GetLogEventsCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(GetLogEventsCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function GetLogEventsCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ GetLogEventsCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CloudWatchLogsClient";
        var commandName = "GetLogEventsCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.GetLogEventsRequest).filterSensitiveLog,
            outputFilterSensitiveLog: (0, _models0.GetLogEventsResponse).filterSensitiveLog
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    GetLogEventsCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1GetLogEventsCommand)(input, context);
    };
    GetLogEventsCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1GetLogEventsCommand)(output, context);
    };
    return GetLogEventsCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"hB4pg","../protocols/Aws_json1_1":"90twI","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2YmeP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GetLogGroupFieldsCommand", ()=>GetLogGroupFieldsCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Returns a list of the fields that are included in log events in the specified log group, along with the percentage of log events
 *     that contain each field. The search is limited to a time period that you specify.</p>
 *          <p>In the results, fields that start with @ are fields generated by CloudWatch Logs. For
 *       example, <code>@timestamp</code> is the timestamp of each log event. For more information about the fields that are
 *       generated by CloudWatch logs, see
 *       <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_AnalyzeLogData-discoverable-fields.html">Supported Logs and Discovered Fields</a>.</p>
 *          <p>The response results are sorted by the frequency percentage, starting
 *     with the highest percentage.</p>
 */ var GetLogGroupFieldsCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(GetLogGroupFieldsCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function GetLogGroupFieldsCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ GetLogGroupFieldsCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CloudWatchLogsClient";
        var commandName = "GetLogGroupFieldsCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.GetLogGroupFieldsRequest).filterSensitiveLog,
            outputFilterSensitiveLog: (0, _models0.GetLogGroupFieldsResponse).filterSensitiveLog
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    GetLogGroupFieldsCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1GetLogGroupFieldsCommand)(input, context);
    };
    GetLogGroupFieldsCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1GetLogGroupFieldsCommand)(output, context);
    };
    return GetLogGroupFieldsCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"hB4pg","../protocols/Aws_json1_1":"90twI","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l1BiR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GetLogRecordCommand", ()=>GetLogRecordCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Retrieves all of the fields and values of a single log event. All fields are retrieved,
 *       even if the original query that produced the <code>logRecordPointer</code> retrieved only a
 *       subset of fields. Fields are returned as field name/field value pairs.</p>
 *          <p>The full unparsed log event is returned within <code>@message</code>.</p>
 */ var GetLogRecordCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(GetLogRecordCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function GetLogRecordCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ GetLogRecordCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CloudWatchLogsClient";
        var commandName = "GetLogRecordCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.GetLogRecordRequest).filterSensitiveLog,
            outputFilterSensitiveLog: (0, _models0.GetLogRecordResponse).filterSensitiveLog
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    GetLogRecordCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1GetLogRecordCommand)(input, context);
    };
    GetLogRecordCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1GetLogRecordCommand)(output, context);
    };
    return GetLogRecordCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"hB4pg","../protocols/Aws_json1_1":"90twI","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aMyWT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GetQueryResultsCommand", ()=>GetQueryResultsCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Returns the results from the specified query.</p>
 *          <p>Only the fields requested in the query are returned, along with a <code>@ptr</code>
 *       field, which is the identifier for the log record. You can use the value of <code>@ptr</code>
 *       in a <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_GetLogRecord.html">GetLogRecord</a>
 *       operation to get the full log record.</p>
 *          <p>
 *             <code>GetQueryResults</code>
 *       does not start a query execution. To run a query, use <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_StartQuery.html">StartQuery</a>.</p>
 *          <p>If the value of the <code>Status</code> field in the output is <code>Running</code>, this operation
 *       returns only partial results. If you see a value of <code>Scheduled</code> or <code>Running</code> for the status,
 *       you can retry the operation later to see the final results. </p>
 */ var GetQueryResultsCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(GetQueryResultsCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function GetQueryResultsCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ GetQueryResultsCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CloudWatchLogsClient";
        var commandName = "GetQueryResultsCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.GetQueryResultsRequest).filterSensitiveLog,
            outputFilterSensitiveLog: (0, _models0.GetQueryResultsResponse).filterSensitiveLog
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    GetQueryResultsCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1GetQueryResultsCommand)(input, context);
    };
    GetQueryResultsCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1GetQueryResultsCommand)(output, context);
    };
    return GetQueryResultsCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"hB4pg","../protocols/Aws_json1_1":"90twI","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i6kRK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ListTagsLogGroupCommand", ()=>ListTagsLogGroupCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Lists the tags for the specified log group.</p>
 */ var ListTagsLogGroupCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(ListTagsLogGroupCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function ListTagsLogGroupCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ ListTagsLogGroupCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CloudWatchLogsClient";
        var commandName = "ListTagsLogGroupCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.ListTagsLogGroupRequest).filterSensitiveLog,
            outputFilterSensitiveLog: (0, _models0.ListTagsLogGroupResponse).filterSensitiveLog
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    ListTagsLogGroupCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1ListTagsLogGroupCommand)(input, context);
    };
    ListTagsLogGroupCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1ListTagsLogGroupCommand)(output, context);
    };
    return ListTagsLogGroupCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"hB4pg","../protocols/Aws_json1_1":"90twI","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lkjty":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PutDestinationCommand", ()=>PutDestinationCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Creates or updates a destination. This operation is used only to create destinations for cross-account subscriptions.</p>
 *          <p>A destination encapsulates a physical resource (such
 *       as an Amazon Kinesis stream) and enables you to subscribe to a real-time stream of log events
 *       for a different account, ingested using <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutLogEvents.html">PutLogEvents</a>.</p>
 *          <p>Through an access policy, a destination controls what is written to it.
 *       By default, <code>PutDestination</code> does not set any access policy with the destination,
 *       which means a cross-account user cannot call <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutSubscriptionFilter.html">PutSubscriptionFilter</a> against
 *       this destination. To enable this, the destination owner must call <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutDestinationPolicy.html">PutDestinationPolicy</a> after <code>PutDestination</code>.</p>
 *          <p>To perform a <code>PutDestination</code> operation, you must also have the
 *     <code>iam:PassRole</code> permission.</p>
 */ var PutDestinationCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(PutDestinationCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function PutDestinationCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ PutDestinationCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CloudWatchLogsClient";
        var commandName = "PutDestinationCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.PutDestinationRequest).filterSensitiveLog,
            outputFilterSensitiveLog: (0, _models0.PutDestinationResponse).filterSensitiveLog
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    PutDestinationCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1PutDestinationCommand)(input, context);
    };
    PutDestinationCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1PutDestinationCommand)(output, context);
    };
    return PutDestinationCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"hB4pg","../protocols/Aws_json1_1":"90twI","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ad16f":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PutDestinationPolicyCommand", ()=>PutDestinationPolicyCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Creates or updates an access policy associated with an existing
 *       destination. An access policy is an <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies_overview.html">IAM policy document</a> that is used
 *       to authorize claims to register a subscription filter against a given destination.</p>
 */ var PutDestinationPolicyCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(PutDestinationPolicyCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function PutDestinationPolicyCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ PutDestinationPolicyCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CloudWatchLogsClient";
        var commandName = "PutDestinationPolicyCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.PutDestinationPolicyRequest).filterSensitiveLog,
            outputFilterSensitiveLog: function(output) {
                return output;
            }
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    PutDestinationPolicyCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1PutDestinationPolicyCommand)(input, context);
    };
    PutDestinationPolicyCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1PutDestinationPolicyCommand)(output, context);
    };
    return PutDestinationPolicyCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"hB4pg","../protocols/Aws_json1_1":"90twI","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fjHYs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PutLogEventsCommand", ()=>PutLogEventsCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Uploads a batch of log events to the specified log stream.</p>
 *          <p>You must include the sequence token obtained from the response of the previous call. An
 *       upload in a newly created log stream does not require a sequence token. You can also get the
 *       sequence token in the <code>expectedSequenceToken</code> field from
 *         <code>InvalidSequenceTokenException</code>. If you call <code>PutLogEvents</code> twice
 *       within a narrow time period using the same value for <code>sequenceToken</code>, both calls
 *       might be successful or one might be rejected.</p>
 *          <p>The batch of events must satisfy the following constraints:</p>
 *          <ul>
 *             <li>
 *                <p>The maximum batch size is 1,048,576 bytes. This size is calculated as the sum of
 *           all event messages in UTF-8, plus 26 bytes for each log event.</p>
 *             </li>
 *             <li>
 *                <p>None of the log events in the batch can be more than 2 hours in the future.</p>
 *             </li>
 *             <li>
 *                <p>None of the log events in the batch can be older than 14 days or older than the retention
 *           period of the log group.</p>
 *             </li>
 *             <li>
 *                <p>The log events in the batch must be in chronological order by their timestamp. The
 *           timestamp is the time the event occurred, expressed as the number of milliseconds after
 *           Jan 1, 1970 00:00:00 UTC. (In AWS Tools for PowerShell and the AWS SDK for .NET, the
 *           timestamp is specified in .NET format: yyyy-mm-ddThh:mm:ss. For example,
 *           2017-09-15T13:45:30.) </p>
 *             </li>
 *             <li>
 *                <p>A batch of log events in a single request cannot span more than 24 hours. Otherwise, the operation fails.</p>
 *             </li>
 *             <li>
 *                <p>The maximum number of log events in a batch is 10,000.</p>
 *             </li>
 *             <li>
 *                <p>There is a quota of 5 requests per second per log stream. Additional requests are throttled. This quota can't be changed.</p>
 *             </li>
 *          </ul>
 *          <p>If a call to <code>PutLogEvents</code> returns "UnrecognizedClientException" the most likely cause is an invalid AWS access key ID or secret key. </p>
 */ var PutLogEventsCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(PutLogEventsCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function PutLogEventsCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ PutLogEventsCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CloudWatchLogsClient";
        var commandName = "PutLogEventsCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.PutLogEventsRequest).filterSensitiveLog,
            outputFilterSensitiveLog: (0, _models0.PutLogEventsResponse).filterSensitiveLog
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    PutLogEventsCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1PutLogEventsCommand)(input, context);
    };
    PutLogEventsCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1PutLogEventsCommand)(output, context);
    };
    return PutLogEventsCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"hB4pg","../protocols/Aws_json1_1":"90twI","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3E6xe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PutMetricFilterCommand", ()=>PutMetricFilterCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Creates or updates a metric filter and associates it with the specified log group.
 *       Metric filters allow you to configure rules to extract metric data from log events ingested
 *       through <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutLogEvents.html">PutLogEvents</a>.</p>
 *          <p>The maximum number of metric filters that can be associated with a log group is
 *       100.</p>
 */ var PutMetricFilterCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(PutMetricFilterCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function PutMetricFilterCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ PutMetricFilterCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CloudWatchLogsClient";
        var commandName = "PutMetricFilterCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.PutMetricFilterRequest).filterSensitiveLog,
            outputFilterSensitiveLog: function(output) {
                return output;
            }
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    PutMetricFilterCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1PutMetricFilterCommand)(input, context);
    };
    PutMetricFilterCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1PutMetricFilterCommand)(output, context);
    };
    return PutMetricFilterCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"hB4pg","../protocols/Aws_json1_1":"90twI","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eCnCq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PutQueryDefinitionCommand", ()=>PutQueryDefinitionCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Creates or updates a query definition for CloudWatch Logs Insights. For
 *       more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/AnalyzingLogData.html">Analyzing Log Data with CloudWatch Logs Insights</a>.</p>
 *
 *          <p>To update a query definition, specify its
 *         <code>queryDefinitionId</code> in your request. The values of <code>name</code>, <code>queryString</code>,
 *       and <code>logGroupNames</code> are changed to the values that you specify in your update
 *       operation. No current values are retained from the current query definition. For example, if
 *       you update a current query definition that includes log groups, and you don't specify the
 *         <code>logGroupNames</code> parameter in your update operation, the query definition changes
 *       to contain no log groups.</p>
 *          <p>You must have the <code>logs:PutQueryDefinition</code> permission to be able to perform
 *     this operation.</p>
 */ var PutQueryDefinitionCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(PutQueryDefinitionCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function PutQueryDefinitionCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ PutQueryDefinitionCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CloudWatchLogsClient";
        var commandName = "PutQueryDefinitionCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.PutQueryDefinitionRequest).filterSensitiveLog,
            outputFilterSensitiveLog: (0, _models0.PutQueryDefinitionResponse).filterSensitiveLog
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    PutQueryDefinitionCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1PutQueryDefinitionCommand)(input, context);
    };
    PutQueryDefinitionCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1PutQueryDefinitionCommand)(output, context);
    };
    return PutQueryDefinitionCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"hB4pg","../protocols/Aws_json1_1":"90twI","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4oFp5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PutResourcePolicyCommand", ()=>PutResourcePolicyCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Creates or updates a resource policy allowing other AWS services to put log events to
 *       this account, such as Amazon Route 53. An account can have up to 10 resource policies per AWS
 *       Region.</p>
 */ var PutResourcePolicyCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(PutResourcePolicyCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function PutResourcePolicyCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ PutResourcePolicyCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CloudWatchLogsClient";
        var commandName = "PutResourcePolicyCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.PutResourcePolicyRequest).filterSensitiveLog,
            outputFilterSensitiveLog: (0, _models0.PutResourcePolicyResponse).filterSensitiveLog
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    PutResourcePolicyCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1PutResourcePolicyCommand)(input, context);
    };
    PutResourcePolicyCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1PutResourcePolicyCommand)(output, context);
    };
    return PutResourcePolicyCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"hB4pg","../protocols/Aws_json1_1":"90twI","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hoP3q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PutRetentionPolicyCommand", ()=>PutRetentionPolicyCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Sets the retention of the specified log group. A retention policy allows you to
 *       configure the number of days for which to retain log events in the specified log
 *       group.</p>
 */ var PutRetentionPolicyCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(PutRetentionPolicyCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function PutRetentionPolicyCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ PutRetentionPolicyCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CloudWatchLogsClient";
        var commandName = "PutRetentionPolicyCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.PutRetentionPolicyRequest).filterSensitiveLog,
            outputFilterSensitiveLog: function(output) {
                return output;
            }
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    PutRetentionPolicyCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1PutRetentionPolicyCommand)(input, context);
    };
    PutRetentionPolicyCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1PutRetentionPolicyCommand)(output, context);
    };
    return PutRetentionPolicyCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"hB4pg","../protocols/Aws_json1_1":"90twI","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"38fYM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PutSubscriptionFilterCommand", ()=>PutSubscriptionFilterCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Creates or updates a subscription filter and associates it with the specified log
 *       group. Subscription filters allow you to subscribe to a real-time stream of log events
 *       ingested through <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutLogEvents.html">PutLogEvents</a> and have them delivered to a specific
 *       destination. When log events are sent to the
 *       receiving service, they are Base64 encoded
 *       and compressed with the gzip format.</p>
 *          <p>The following destinations are supported for subscription filters:</p>
 *          <ul>
 *             <li>
 *                <p>An Amazon Kinesis stream belonging to the same account as the subscription filter,
 *           for same-account delivery.</p>
 *             </li>
 *             <li>
 *                <p>A logical destination that belongs to a different account, for cross-account delivery.</p>
 *             </li>
 *             <li>
 *                <p>An Amazon Kinesis Firehose delivery stream that belongs to the same account as the
 *           subscription filter, for same-account delivery.</p>
 *             </li>
 *             <li>
 *                <p>An AWS Lambda function that belongs to the same account as the subscription filter,
 *           for same-account delivery.</p>
 *             </li>
 *          </ul>
 *          <p>There can only be one subscription filter associated with a log group. If you are
 *       updating an existing filter, you must specify the correct name in <code>filterName</code>.
 *       Otherwise, the call fails because you cannot associate a second filter with a log
 *       group.</p>
 *          <p>To perform a <code>PutSubscriptionFilter</code> operation, you must also have the
 *       <code>iam:PassRole</code> permission.</p>
 */ var PutSubscriptionFilterCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(PutSubscriptionFilterCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function PutSubscriptionFilterCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ PutSubscriptionFilterCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CloudWatchLogsClient";
        var commandName = "PutSubscriptionFilterCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.PutSubscriptionFilterRequest).filterSensitiveLog,
            outputFilterSensitiveLog: function(output) {
                return output;
            }
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    PutSubscriptionFilterCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1PutSubscriptionFilterCommand)(input, context);
    };
    PutSubscriptionFilterCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1PutSubscriptionFilterCommand)(output, context);
    };
    return PutSubscriptionFilterCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"hB4pg","../protocols/Aws_json1_1":"90twI","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fsVSG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StartQueryCommand", ()=>StartQueryCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Schedules a query of a log group using CloudWatch Logs Insights. You specify the log group
 *       and time range to query and the query string to use.</p>
 *          <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_QuerySyntax.html">CloudWatch Logs Insights Query Syntax</a>.</p>
 *
 *          <p>Queries time out after 15 minutes of execution. If your queries are timing out, reduce the
 *       time range being searched or partition your query into a number of queries.</p>
 */ var StartQueryCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(StartQueryCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function StartQueryCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ StartQueryCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CloudWatchLogsClient";
        var commandName = "StartQueryCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.StartQueryRequest).filterSensitiveLog,
            outputFilterSensitiveLog: (0, _models0.StartQueryResponse).filterSensitiveLog
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    StartQueryCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1StartQueryCommand)(input, context);
    };
    StartQueryCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1StartQueryCommand)(output, context);
    };
    return StartQueryCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"hB4pg","../protocols/Aws_json1_1":"90twI","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aodZ0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StopQueryCommand", ()=>StopQueryCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Stops a CloudWatch Logs Insights query that is in progress. If the query has already ended, the operation
 *     returns an error indicating that the specified query is not running.</p>
 */ var StopQueryCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(StopQueryCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function StopQueryCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ StopQueryCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CloudWatchLogsClient";
        var commandName = "StopQueryCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.StopQueryRequest).filterSensitiveLog,
            outputFilterSensitiveLog: (0, _models0.StopQueryResponse).filterSensitiveLog
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    StopQueryCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1StopQueryCommand)(input, context);
    };
    StopQueryCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1StopQueryCommand)(output, context);
    };
    return StopQueryCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"hB4pg","../protocols/Aws_json1_1":"90twI","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"43ptU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TagLogGroupCommand", ()=>TagLogGroupCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Adds or updates the specified tags for the specified log group.</p>
 *          <p>To list the tags for a log group, use <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_ListTagsLogGroup.html">ListTagsLogGroup</a>.
 *       To remove tags, use <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_UntagLogGroup.html">UntagLogGroup</a>.</p>
 *          <p>For more information about tags, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/Working-with-log-groups-and-streams.html#log-group-tagging">Tag Log Groups in Amazon CloudWatch Logs</a>
 *       in the <i>Amazon CloudWatch Logs User Guide</i>.</p>
 */ var TagLogGroupCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(TagLogGroupCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function TagLogGroupCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ TagLogGroupCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CloudWatchLogsClient";
        var commandName = "TagLogGroupCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.TagLogGroupRequest).filterSensitiveLog,
            outputFilterSensitiveLog: function(output) {
                return output;
            }
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    TagLogGroupCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1TagLogGroupCommand)(input, context);
    };
    TagLogGroupCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1TagLogGroupCommand)(output, context);
    };
    return TagLogGroupCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"hB4pg","../protocols/Aws_json1_1":"90twI","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jWtrJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TestMetricFilterCommand", ()=>TestMetricFilterCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Tests the filter pattern of a metric filter against a sample of log event messages. You
 *       can use this operation to validate the correctness of a metric filter pattern.</p>
 */ var TestMetricFilterCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(TestMetricFilterCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function TestMetricFilterCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ TestMetricFilterCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CloudWatchLogsClient";
        var commandName = "TestMetricFilterCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.TestMetricFilterRequest).filterSensitiveLog,
            outputFilterSensitiveLog: (0, _models0.TestMetricFilterResponse).filterSensitiveLog
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    TestMetricFilterCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1TestMetricFilterCommand)(input, context);
    };
    TestMetricFilterCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1TestMetricFilterCommand)(output, context);
    };
    return TestMetricFilterCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"hB4pg","../protocols/Aws_json1_1":"90twI","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hUuTM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "UntagLogGroupCommand", ()=>UntagLogGroupCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Removes the specified tags from the specified log group.</p>
 *          <p>To list the tags for a log group, use <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_ListTagsLogGroup.html">ListTagsLogGroup</a>.
 *       To add tags, use <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_TagLogGroup.html">TagLogGroup</a>.</p>
 */ var UntagLogGroupCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(UntagLogGroupCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function UntagLogGroupCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ UntagLogGroupCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CloudWatchLogsClient";
        var commandName = "UntagLogGroupCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.UntagLogGroupRequest).filterSensitiveLog,
            outputFilterSensitiveLog: function(output) {
                return output;
            }
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    UntagLogGroupCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1UntagLogGroupCommand)(input, context);
    };
    UntagLogGroupCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1UntagLogGroupCommand)(output, context);
    };
    return UntagLogGroupCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"hB4pg","../protocols/Aws_json1_1":"90twI","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8cnzC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "paginateDescribeDestinations", ()=>paginateDescribeDestinations);
var _tslib = require("tslib");
var _cloudWatchLogs = require("../CloudWatchLogs");
var _cloudWatchLogsClient = require("../CloudWatchLogsClient");
var _describeDestinationsCommand = require("../commands/DescribeDestinationsCommand");
/**
 * @private
 */ var makePagedClientRequest = function(client, input) {
    var args = [];
    for(var _i = 2; _i < arguments.length; _i++)args[_i - 2] = arguments[_i];
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    return [
                        4 /*yield*/ ,
                        client.send.apply(client, (0, _tslib.__spread)([
                            new (0, _describeDestinationsCommand.DescribeDestinationsCommand)(input)
                        ], args))
                    ];
                case 1:
                    // @ts-ignore
                    return [
                        2 /*return*/ ,
                        _a.sent()
                    ];
            }
        });
    });
};
/**
 * @private
 */ var makePagedRequest = function(client, input) {
    var args = [];
    for(var _i = 2; _i < arguments.length; _i++)args[_i - 2] = arguments[_i];
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    return [
                        4 /*yield*/ ,
                        client.describeDestinations.apply(client, (0, _tslib.__spread)([
                            input
                        ], args))
                    ];
                case 1:
                    // @ts-ignore
                    return [
                        2 /*return*/ ,
                        _a.sent()
                    ];
            }
        });
    });
};
function paginateDescribeDestinations(config, input) {
    var additionalArguments = [];
    for(var _i = 2; _i < arguments.length; _i++)additionalArguments[_i - 2] = arguments[_i];
    return (0, _tslib.__asyncGenerator)(this, arguments, function paginateDescribeDestinations_1() {
        var token, hasNext, page;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    token = config.startingToken || undefined;
                    hasNext = true;
                    _a.label = 1;
                case 1:
                    if (!hasNext) return [
                        3 /*break*/ ,
                        9
                    ];
                    input.nextToken = token;
                    input["limit"] = config.pageSize;
                    if (!(config.client instanceof (0, _cloudWatchLogs.CloudWatchLogs))) return [
                        3 /*break*/ ,
                        3
                    ];
                    return [
                        4 /*yield*/ ,
                        (0, _tslib.__await)(makePagedRequest.apply(void 0, (0, _tslib.__spread)([
                            config.client,
                            input
                        ], additionalArguments)))
                    ];
                case 2:
                    page = _a.sent();
                    return [
                        3 /*break*/ ,
                        6
                    ];
                case 3:
                    if (!(config.client instanceof (0, _cloudWatchLogsClient.CloudWatchLogsClient))) return [
                        3 /*break*/ ,
                        5
                    ];
                    return [
                        4 /*yield*/ ,
                        (0, _tslib.__await)(makePagedClientRequest.apply(void 0, (0, _tslib.__spread)([
                            config.client,
                            input
                        ], additionalArguments)))
                    ];
                case 4:
                    page = _a.sent();
                    return [
                        3 /*break*/ ,
                        6
                    ];
                case 5:
                    throw new Error("Invalid client, expected CloudWatchLogs | CloudWatchLogsClient");
                case 6:
                    return [
                        4 /*yield*/ ,
                        (0, _tslib.__await)(page)
                    ];
                case 7:
                    return [
                        4 /*yield*/ ,
                        _a.sent()
                    ];
                case 8:
                    _a.sent();
                    token = page.nextToken;
                    hasNext = !!token;
                    return [
                        3 /*break*/ ,
                        1
                    ];
                case 9:
                    return [
                        4 /*yield*/ ,
                        (0, _tslib.__await)(undefined)
                    ];
                case 10:
                    // @ts-ignore
                    return [
                        2 /*return*/ ,
                        _a.sent()
                    ];
            }
        });
    });
}

},{"tslib":"lRdW5","../CloudWatchLogs":"cun4t","../CloudWatchLogsClient":"d0U1q","../commands/DescribeDestinationsCommand":"gW1q6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8qj6M":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "paginateDescribeLogGroups", ()=>paginateDescribeLogGroups);
var _tslib = require("tslib");
var _cloudWatchLogs = require("../CloudWatchLogs");
var _cloudWatchLogsClient = require("../CloudWatchLogsClient");
var _describeLogGroupsCommand = require("../commands/DescribeLogGroupsCommand");
/**
 * @private
 */ var makePagedClientRequest = function(client, input) {
    var args = [];
    for(var _i = 2; _i < arguments.length; _i++)args[_i - 2] = arguments[_i];
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    return [
                        4 /*yield*/ ,
                        client.send.apply(client, (0, _tslib.__spread)([
                            new (0, _describeLogGroupsCommand.DescribeLogGroupsCommand)(input)
                        ], args))
                    ];
                case 1:
                    // @ts-ignore
                    return [
                        2 /*return*/ ,
                        _a.sent()
                    ];
            }
        });
    });
};
/**
 * @private
 */ var makePagedRequest = function(client, input) {
    var args = [];
    for(var _i = 2; _i < arguments.length; _i++)args[_i - 2] = arguments[_i];
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    return [
                        4 /*yield*/ ,
                        client.describeLogGroups.apply(client, (0, _tslib.__spread)([
                            input
                        ], args))
                    ];
                case 1:
                    // @ts-ignore
                    return [
                        2 /*return*/ ,
                        _a.sent()
                    ];
            }
        });
    });
};
function paginateDescribeLogGroups(config, input) {
    var additionalArguments = [];
    for(var _i = 2; _i < arguments.length; _i++)additionalArguments[_i - 2] = arguments[_i];
    return (0, _tslib.__asyncGenerator)(this, arguments, function paginateDescribeLogGroups_1() {
        var token, hasNext, page;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    token = config.startingToken || undefined;
                    hasNext = true;
                    _a.label = 1;
                case 1:
                    if (!hasNext) return [
                        3 /*break*/ ,
                        9
                    ];
                    input.nextToken = token;
                    input["limit"] = config.pageSize;
                    if (!(config.client instanceof (0, _cloudWatchLogs.CloudWatchLogs))) return [
                        3 /*break*/ ,
                        3
                    ];
                    return [
                        4 /*yield*/ ,
                        (0, _tslib.__await)(makePagedRequest.apply(void 0, (0, _tslib.__spread)([
                            config.client,
                            input
                        ], additionalArguments)))
                    ];
                case 2:
                    page = _a.sent();
                    return [
                        3 /*break*/ ,
                        6
                    ];
                case 3:
                    if (!(config.client instanceof (0, _cloudWatchLogsClient.CloudWatchLogsClient))) return [
                        3 /*break*/ ,
                        5
                    ];
                    return [
                        4 /*yield*/ ,
                        (0, _tslib.__await)(makePagedClientRequest.apply(void 0, (0, _tslib.__spread)([
                            config.client,
                            input
                        ], additionalArguments)))
                    ];
                case 4:
                    page = _a.sent();
                    return [
                        3 /*break*/ ,
                        6
                    ];
                case 5:
                    throw new Error("Invalid client, expected CloudWatchLogs | CloudWatchLogsClient");
                case 6:
                    return [
                        4 /*yield*/ ,
                        (0, _tslib.__await)(page)
                    ];
                case 7:
                    return [
                        4 /*yield*/ ,
                        _a.sent()
                    ];
                case 8:
                    _a.sent();
                    token = page.nextToken;
                    hasNext = !!token;
                    return [
                        3 /*break*/ ,
                        1
                    ];
                case 9:
                    return [
                        4 /*yield*/ ,
                        (0, _tslib.__await)(undefined)
                    ];
                case 10:
                    // @ts-ignore
                    return [
                        2 /*return*/ ,
                        _a.sent()
                    ];
            }
        });
    });
}

},{"tslib":"lRdW5","../CloudWatchLogs":"cun4t","../CloudWatchLogsClient":"d0U1q","../commands/DescribeLogGroupsCommand":"eP5yc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aqA7i":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "paginateDescribeLogStreams", ()=>paginateDescribeLogStreams);
var _tslib = require("tslib");
var _cloudWatchLogs = require("../CloudWatchLogs");
var _cloudWatchLogsClient = require("../CloudWatchLogsClient");
var _describeLogStreamsCommand = require("../commands/DescribeLogStreamsCommand");
/**
 * @private
 */ var makePagedClientRequest = function(client, input) {
    var args = [];
    for(var _i = 2; _i < arguments.length; _i++)args[_i - 2] = arguments[_i];
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    return [
                        4 /*yield*/ ,
                        client.send.apply(client, (0, _tslib.__spread)([
                            new (0, _describeLogStreamsCommand.DescribeLogStreamsCommand)(input)
                        ], args))
                    ];
                case 1:
                    // @ts-ignore
                    return [
                        2 /*return*/ ,
                        _a.sent()
                    ];
            }
        });
    });
};
/**
 * @private
 */ var makePagedRequest = function(client, input) {
    var args = [];
    for(var _i = 2; _i < arguments.length; _i++)args[_i - 2] = arguments[_i];
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    return [
                        4 /*yield*/ ,
                        client.describeLogStreams.apply(client, (0, _tslib.__spread)([
                            input
                        ], args))
                    ];
                case 1:
                    // @ts-ignore
                    return [
                        2 /*return*/ ,
                        _a.sent()
                    ];
            }
        });
    });
};
function paginateDescribeLogStreams(config, input) {
    var additionalArguments = [];
    for(var _i = 2; _i < arguments.length; _i++)additionalArguments[_i - 2] = arguments[_i];
    return (0, _tslib.__asyncGenerator)(this, arguments, function paginateDescribeLogStreams_1() {
        var token, hasNext, page;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    token = config.startingToken || undefined;
                    hasNext = true;
                    _a.label = 1;
                case 1:
                    if (!hasNext) return [
                        3 /*break*/ ,
                        9
                    ];
                    input.nextToken = token;
                    input["limit"] = config.pageSize;
                    if (!(config.client instanceof (0, _cloudWatchLogs.CloudWatchLogs))) return [
                        3 /*break*/ ,
                        3
                    ];
                    return [
                        4 /*yield*/ ,
                        (0, _tslib.__await)(makePagedRequest.apply(void 0, (0, _tslib.__spread)([
                            config.client,
                            input
                        ], additionalArguments)))
                    ];
                case 2:
                    page = _a.sent();
                    return [
                        3 /*break*/ ,
                        6
                    ];
                case 3:
                    if (!(config.client instanceof (0, _cloudWatchLogsClient.CloudWatchLogsClient))) return [
                        3 /*break*/ ,
                        5
                    ];
                    return [
                        4 /*yield*/ ,
                        (0, _tslib.__await)(makePagedClientRequest.apply(void 0, (0, _tslib.__spread)([
                            config.client,
                            input
                        ], additionalArguments)))
                    ];
                case 4:
                    page = _a.sent();
                    return [
                        3 /*break*/ ,
                        6
                    ];
                case 5:
                    throw new Error("Invalid client, expected CloudWatchLogs | CloudWatchLogsClient");
                case 6:
                    return [
                        4 /*yield*/ ,
                        (0, _tslib.__await)(page)
                    ];
                case 7:
                    return [
                        4 /*yield*/ ,
                        _a.sent()
                    ];
                case 8:
                    _a.sent();
                    token = page.nextToken;
                    hasNext = !!token;
                    return [
                        3 /*break*/ ,
                        1
                    ];
                case 9:
                    return [
                        4 /*yield*/ ,
                        (0, _tslib.__await)(undefined)
                    ];
                case 10:
                    // @ts-ignore
                    return [
                        2 /*return*/ ,
                        _a.sent()
                    ];
            }
        });
    });
}

},{"tslib":"lRdW5","../CloudWatchLogs":"cun4t","../CloudWatchLogsClient":"d0U1q","../commands/DescribeLogStreamsCommand":"a3nMC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aQqVB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "paginateDescribeMetricFilters", ()=>paginateDescribeMetricFilters);
var _tslib = require("tslib");
var _cloudWatchLogs = require("../CloudWatchLogs");
var _cloudWatchLogsClient = require("../CloudWatchLogsClient");
var _describeMetricFiltersCommand = require("../commands/DescribeMetricFiltersCommand");
/**
 * @private
 */ var makePagedClientRequest = function(client, input) {
    var args = [];
    for(var _i = 2; _i < arguments.length; _i++)args[_i - 2] = arguments[_i];
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    return [
                        4 /*yield*/ ,
                        client.send.apply(client, (0, _tslib.__spread)([
                            new (0, _describeMetricFiltersCommand.DescribeMetricFiltersCommand)(input)
                        ], args))
                    ];
                case 1:
                    // @ts-ignore
                    return [
                        2 /*return*/ ,
                        _a.sent()
                    ];
            }
        });
    });
};
/**
 * @private
 */ var makePagedRequest = function(client, input) {
    var args = [];
    for(var _i = 2; _i < arguments.length; _i++)args[_i - 2] = arguments[_i];
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    return [
                        4 /*yield*/ ,
                        client.describeMetricFilters.apply(client, (0, _tslib.__spread)([
                            input
                        ], args))
                    ];
                case 1:
                    // @ts-ignore
                    return [
                        2 /*return*/ ,
                        _a.sent()
                    ];
            }
        });
    });
};
function paginateDescribeMetricFilters(config, input) {
    var additionalArguments = [];
    for(var _i = 2; _i < arguments.length; _i++)additionalArguments[_i - 2] = arguments[_i];
    return (0, _tslib.__asyncGenerator)(this, arguments, function paginateDescribeMetricFilters_1() {
        var token, hasNext, page;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    token = config.startingToken || undefined;
                    hasNext = true;
                    _a.label = 1;
                case 1:
                    if (!hasNext) return [
                        3 /*break*/ ,
                        9
                    ];
                    input.nextToken = token;
                    input["limit"] = config.pageSize;
                    if (!(config.client instanceof (0, _cloudWatchLogs.CloudWatchLogs))) return [
                        3 /*break*/ ,
                        3
                    ];
                    return [
                        4 /*yield*/ ,
                        (0, _tslib.__await)(makePagedRequest.apply(void 0, (0, _tslib.__spread)([
                            config.client,
                            input
                        ], additionalArguments)))
                    ];
                case 2:
                    page = _a.sent();
                    return [
                        3 /*break*/ ,
                        6
                    ];
                case 3:
                    if (!(config.client instanceof (0, _cloudWatchLogsClient.CloudWatchLogsClient))) return [
                        3 /*break*/ ,
                        5
                    ];
                    return [
                        4 /*yield*/ ,
                        (0, _tslib.__await)(makePagedClientRequest.apply(void 0, (0, _tslib.__spread)([
                            config.client,
                            input
                        ], additionalArguments)))
                    ];
                case 4:
                    page = _a.sent();
                    return [
                        3 /*break*/ ,
                        6
                    ];
                case 5:
                    throw new Error("Invalid client, expected CloudWatchLogs | CloudWatchLogsClient");
                case 6:
                    return [
                        4 /*yield*/ ,
                        (0, _tslib.__await)(page)
                    ];
                case 7:
                    return [
                        4 /*yield*/ ,
                        _a.sent()
                    ];
                case 8:
                    _a.sent();
                    token = page.nextToken;
                    hasNext = !!token;
                    return [
                        3 /*break*/ ,
                        1
                    ];
                case 9:
                    return [
                        4 /*yield*/ ,
                        (0, _tslib.__await)(undefined)
                    ];
                case 10:
                    // @ts-ignore
                    return [
                        2 /*return*/ ,
                        _a.sent()
                    ];
            }
        });
    });
}

},{"tslib":"lRdW5","../CloudWatchLogs":"cun4t","../CloudWatchLogsClient":"d0U1q","../commands/DescribeMetricFiltersCommand":"6Xo3P","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cwBOI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "paginateDescribeSubscriptionFilters", ()=>paginateDescribeSubscriptionFilters);
var _tslib = require("tslib");
var _cloudWatchLogs = require("../CloudWatchLogs");
var _cloudWatchLogsClient = require("../CloudWatchLogsClient");
var _describeSubscriptionFiltersCommand = require("../commands/DescribeSubscriptionFiltersCommand");
/**
 * @private
 */ var makePagedClientRequest = function(client, input) {
    var args = [];
    for(var _i = 2; _i < arguments.length; _i++)args[_i - 2] = arguments[_i];
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    return [
                        4 /*yield*/ ,
                        client.send.apply(client, (0, _tslib.__spread)([
                            new (0, _describeSubscriptionFiltersCommand.DescribeSubscriptionFiltersCommand)(input)
                        ], args))
                    ];
                case 1:
                    // @ts-ignore
                    return [
                        2 /*return*/ ,
                        _a.sent()
                    ];
            }
        });
    });
};
/**
 * @private
 */ var makePagedRequest = function(client, input) {
    var args = [];
    for(var _i = 2; _i < arguments.length; _i++)args[_i - 2] = arguments[_i];
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    return [
                        4 /*yield*/ ,
                        client.describeSubscriptionFilters.apply(client, (0, _tslib.__spread)([
                            input
                        ], args))
                    ];
                case 1:
                    // @ts-ignore
                    return [
                        2 /*return*/ ,
                        _a.sent()
                    ];
            }
        });
    });
};
function paginateDescribeSubscriptionFilters(config, input) {
    var additionalArguments = [];
    for(var _i = 2; _i < arguments.length; _i++)additionalArguments[_i - 2] = arguments[_i];
    return (0, _tslib.__asyncGenerator)(this, arguments, function paginateDescribeSubscriptionFilters_1() {
        var token, hasNext, page;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    token = config.startingToken || undefined;
                    hasNext = true;
                    _a.label = 1;
                case 1:
                    if (!hasNext) return [
                        3 /*break*/ ,
                        9
                    ];
                    input.nextToken = token;
                    input["limit"] = config.pageSize;
                    if (!(config.client instanceof (0, _cloudWatchLogs.CloudWatchLogs))) return [
                        3 /*break*/ ,
                        3
                    ];
                    return [
                        4 /*yield*/ ,
                        (0, _tslib.__await)(makePagedRequest.apply(void 0, (0, _tslib.__spread)([
                            config.client,
                            input
                        ], additionalArguments)))
                    ];
                case 2:
                    page = _a.sent();
                    return [
                        3 /*break*/ ,
                        6
                    ];
                case 3:
                    if (!(config.client instanceof (0, _cloudWatchLogsClient.CloudWatchLogsClient))) return [
                        3 /*break*/ ,
                        5
                    ];
                    return [
                        4 /*yield*/ ,
                        (0, _tslib.__await)(makePagedClientRequest.apply(void 0, (0, _tslib.__spread)([
                            config.client,
                            input
                        ], additionalArguments)))
                    ];
                case 4:
                    page = _a.sent();
                    return [
                        3 /*break*/ ,
                        6
                    ];
                case 5:
                    throw new Error("Invalid client, expected CloudWatchLogs | CloudWatchLogsClient");
                case 6:
                    return [
                        4 /*yield*/ ,
                        (0, _tslib.__await)(page)
                    ];
                case 7:
                    return [
                        4 /*yield*/ ,
                        _a.sent()
                    ];
                case 8:
                    _a.sent();
                    token = page.nextToken;
                    hasNext = !!token;
                    return [
                        3 /*break*/ ,
                        1
                    ];
                case 9:
                    return [
                        4 /*yield*/ ,
                        (0, _tslib.__await)(undefined)
                    ];
                case 10:
                    // @ts-ignore
                    return [
                        2 /*return*/ ,
                        _a.sent()
                    ];
            }
        });
    });
}

},{"tslib":"lRdW5","../CloudWatchLogs":"cun4t","../CloudWatchLogsClient":"d0U1q","../commands/DescribeSubscriptionFiltersCommand":"bj8Le","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eag8l":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "paginateFilterLogEvents", ()=>paginateFilterLogEvents);
var _tslib = require("tslib");
var _cloudWatchLogs = require("../CloudWatchLogs");
var _cloudWatchLogsClient = require("../CloudWatchLogsClient");
var _filterLogEventsCommand = require("../commands/FilterLogEventsCommand");
/**
 * @private
 */ var makePagedClientRequest = function(client, input) {
    var args = [];
    for(var _i = 2; _i < arguments.length; _i++)args[_i - 2] = arguments[_i];
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    return [
                        4 /*yield*/ ,
                        client.send.apply(client, (0, _tslib.__spread)([
                            new (0, _filterLogEventsCommand.FilterLogEventsCommand)(input)
                        ], args))
                    ];
                case 1:
                    // @ts-ignore
                    return [
                        2 /*return*/ ,
                        _a.sent()
                    ];
            }
        });
    });
};
/**
 * @private
 */ var makePagedRequest = function(client, input) {
    var args = [];
    for(var _i = 2; _i < arguments.length; _i++)args[_i - 2] = arguments[_i];
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    return [
                        4 /*yield*/ ,
                        client.filterLogEvents.apply(client, (0, _tslib.__spread)([
                            input
                        ], args))
                    ];
                case 1:
                    // @ts-ignore
                    return [
                        2 /*return*/ ,
                        _a.sent()
                    ];
            }
        });
    });
};
function paginateFilterLogEvents(config, input) {
    var additionalArguments = [];
    for(var _i = 2; _i < arguments.length; _i++)additionalArguments[_i - 2] = arguments[_i];
    return (0, _tslib.__asyncGenerator)(this, arguments, function paginateFilterLogEvents_1() {
        var token, hasNext, page;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    token = config.startingToken || undefined;
                    hasNext = true;
                    _a.label = 1;
                case 1:
                    if (!hasNext) return [
                        3 /*break*/ ,
                        9
                    ];
                    input.nextToken = token;
                    input["limit"] = config.pageSize;
                    if (!(config.client instanceof (0, _cloudWatchLogs.CloudWatchLogs))) return [
                        3 /*break*/ ,
                        3
                    ];
                    return [
                        4 /*yield*/ ,
                        (0, _tslib.__await)(makePagedRequest.apply(void 0, (0, _tslib.__spread)([
                            config.client,
                            input
                        ], additionalArguments)))
                    ];
                case 2:
                    page = _a.sent();
                    return [
                        3 /*break*/ ,
                        6
                    ];
                case 3:
                    if (!(config.client instanceof (0, _cloudWatchLogsClient.CloudWatchLogsClient))) return [
                        3 /*break*/ ,
                        5
                    ];
                    return [
                        4 /*yield*/ ,
                        (0, _tslib.__await)(makePagedClientRequest.apply(void 0, (0, _tslib.__spread)([
                            config.client,
                            input
                        ], additionalArguments)))
                    ];
                case 4:
                    page = _a.sent();
                    return [
                        3 /*break*/ ,
                        6
                    ];
                case 5:
                    throw new Error("Invalid client, expected CloudWatchLogs | CloudWatchLogsClient");
                case 6:
                    return [
                        4 /*yield*/ ,
                        (0, _tslib.__await)(page)
                    ];
                case 7:
                    return [
                        4 /*yield*/ ,
                        _a.sent()
                    ];
                case 8:
                    _a.sent();
                    token = page.nextToken;
                    hasNext = !!token;
                    return [
                        3 /*break*/ ,
                        1
                    ];
                case 9:
                    return [
                        4 /*yield*/ ,
                        (0, _tslib.__await)(undefined)
                    ];
                case 10:
                    // @ts-ignore
                    return [
                        2 /*return*/ ,
                        _a.sent()
                    ];
            }
        });
    });
}

},{"tslib":"lRdW5","../CloudWatchLogs":"cun4t","../CloudWatchLogsClient":"d0U1q","../commands/FilterLogEventsCommand":"eVZ5x","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bRKnZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "paginateGetLogEvents", ()=>paginateGetLogEvents);
var _tslib = require("tslib");
var _cloudWatchLogs = require("../CloudWatchLogs");
var _cloudWatchLogsClient = require("../CloudWatchLogsClient");
var _getLogEventsCommand = require("../commands/GetLogEventsCommand");
/**
 * @private
 */ var makePagedClientRequest = function(client, input) {
    var args = [];
    for(var _i = 2; _i < arguments.length; _i++)args[_i - 2] = arguments[_i];
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    return [
                        4 /*yield*/ ,
                        client.send.apply(client, (0, _tslib.__spread)([
                            new (0, _getLogEventsCommand.GetLogEventsCommand)(input)
                        ], args))
                    ];
                case 1:
                    // @ts-ignore
                    return [
                        2 /*return*/ ,
                        _a.sent()
                    ];
            }
        });
    });
};
/**
 * @private
 */ var makePagedRequest = function(client, input) {
    var args = [];
    for(var _i = 2; _i < arguments.length; _i++)args[_i - 2] = arguments[_i];
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    return [
                        4 /*yield*/ ,
                        client.getLogEvents.apply(client, (0, _tslib.__spread)([
                            input
                        ], args))
                    ];
                case 1:
                    // @ts-ignore
                    return [
                        2 /*return*/ ,
                        _a.sent()
                    ];
            }
        });
    });
};
function paginateGetLogEvents(config, input) {
    var additionalArguments = [];
    for(var _i = 2; _i < arguments.length; _i++)additionalArguments[_i - 2] = arguments[_i];
    return (0, _tslib.__asyncGenerator)(this, arguments, function paginateGetLogEvents_1() {
        var token, hasNext, page;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    token = config.startingToken || undefined;
                    hasNext = true;
                    _a.label = 1;
                case 1:
                    if (!hasNext) return [
                        3 /*break*/ ,
                        9
                    ];
                    input.nextToken = token;
                    input["limit"] = config.pageSize;
                    if (!(config.client instanceof (0, _cloudWatchLogs.CloudWatchLogs))) return [
                        3 /*break*/ ,
                        3
                    ];
                    return [
                        4 /*yield*/ ,
                        (0, _tslib.__await)(makePagedRequest.apply(void 0, (0, _tslib.__spread)([
                            config.client,
                            input
                        ], additionalArguments)))
                    ];
                case 2:
                    page = _a.sent();
                    return [
                        3 /*break*/ ,
                        6
                    ];
                case 3:
                    if (!(config.client instanceof (0, _cloudWatchLogsClient.CloudWatchLogsClient))) return [
                        3 /*break*/ ,
                        5
                    ];
                    return [
                        4 /*yield*/ ,
                        (0, _tslib.__await)(makePagedClientRequest.apply(void 0, (0, _tslib.__spread)([
                            config.client,
                            input
                        ], additionalArguments)))
                    ];
                case 4:
                    page = _a.sent();
                    return [
                        3 /*break*/ ,
                        6
                    ];
                case 5:
                    throw new Error("Invalid client, expected CloudWatchLogs | CloudWatchLogsClient");
                case 6:
                    return [
                        4 /*yield*/ ,
                        (0, _tslib.__await)(page)
                    ];
                case 7:
                    return [
                        4 /*yield*/ ,
                        _a.sent()
                    ];
                case 8:
                    _a.sent();
                    token = page.nextForwardToken;
                    hasNext = !!token;
                    return [
                        3 /*break*/ ,
                        1
                    ];
                case 9:
                    return [
                        4 /*yield*/ ,
                        (0, _tslib.__await)(undefined)
                    ];
                case 10:
                    // @ts-ignore
                    return [
                        2 /*return*/ ,
                        _a.sent()
                    ];
            }
        });
    });
}

},{"tslib":"lRdW5","../CloudWatchLogs":"cun4t","../CloudWatchLogsClient":"d0U1q","../commands/GetLogEventsCommand":"aQs9i","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lf3R3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lmkVM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _models0 = require("./models_0");
parcelHelpers.exportAll(_models0, exports);

},{"./models_0":"hB4pg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"zKgKu":[function(require,module,exports) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GoogleOAuth", ()=>GoogleOAuth);
parcelHelpers.export(exports, "FacebookOAuth", ()=>FacebookOAuth);
var _googleOAuth = require("./GoogleOAuth");
var _facebookOAuth = require("./FacebookOAuth");
var GoogleOAuth = new (0, _googleOAuth.GoogleOAuth)();
var FacebookOAuth = new (0, _facebookOAuth.FacebookOAuth)();

},{"./GoogleOAuth":"dDWqF","./FacebookOAuth":"cLE4d","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dDWqF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GoogleOAuth", ()=>GoogleOAuth);
var _tslib = require("tslib");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var _logger = require("../Logger");
var _js = require("../JS");
var _util = require("../Util");
var logger = new (0, _logger.ConsoleLogger)("CognitoCredentials");
var waitForInit = new Promise(function(res, rej) {
    if (!(0, _js.browserOrNode)().isBrowser) {
        logger.debug("not in the browser, directly resolved");
        return res();
    }
    var ga = window["gapi"] && window["gapi"].auth2 ? window["gapi"].auth2 : null;
    if (ga) {
        logger.debug("google api already loaded");
        return res();
    } else setTimeout(function() {
        return res();
    }, 2000);
});
var GoogleOAuth = /** @class */ function() {
    function GoogleOAuth() {
        this.initialized = false;
        this.refreshGoogleToken = this.refreshGoogleToken.bind(this);
        this._refreshGoogleTokenImpl = this._refreshGoogleTokenImpl.bind(this);
    }
    GoogleOAuth.prototype.refreshGoogleToken = function() {
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            return (0, _tslib.__generator)(this, function(_a) {
                switch(_a.label){
                    case 0:
                        if (!!this.initialized) return [
                            3 /*break*/ ,
                            2
                        ];
                        logger.debug("need to wait for the Google SDK loaded");
                        return [
                            4 /*yield*/ ,
                            waitForInit
                        ];
                    case 1:
                        _a.sent();
                        this.initialized = true;
                        logger.debug("finish waiting");
                        _a.label = 2;
                    case 2:
                        return [
                            2 /*return*/ ,
                            this._refreshGoogleTokenImpl()
                        ];
                }
            });
        });
    };
    GoogleOAuth.prototype._refreshGoogleTokenImpl = function() {
        var ga = null;
        if ((0, _js.browserOrNode)().isBrowser) ga = window["gapi"] && window["gapi"].auth2 ? window["gapi"].auth2 : null;
        if (!ga) {
            logger.debug("no gapi auth2 available");
            return Promise.reject("no gapi auth2 available");
        }
        return new Promise(function(res, rej) {
            ga.getAuthInstance().then(function(googleAuth) {
                if (!googleAuth) {
                    logger.debug("google Auth undefined");
                    rej(new (0, _util.NonRetryableError)("google Auth undefined"));
                }
                var googleUser = googleAuth.currentUser.get();
                // refresh the token
                if (googleUser.isSignedIn()) {
                    logger.debug("refreshing the google access token");
                    googleUser.reloadAuthResponse().then(function(authResponse) {
                        var id_token = authResponse.id_token, expires_at = authResponse.expires_at;
                        res({
                            token: id_token,
                            expires_at: expires_at
                        });
                    }).catch(function(err) {
                        if (err && err.error === "network_error") // Not using NonRetryableError so handler will be retried
                        rej("Network error reloading google auth response");
                        else rej(new (0, _util.NonRetryableError)("Failed to reload google auth response"));
                    });
                } else rej(new (0, _util.NonRetryableError)("User is not signed in with Google"));
            }).catch(function(err) {
                logger.debug("Failed to refresh google token", err);
                rej(new (0, _util.NonRetryableError)("Failed to refresh google token"));
            });
        });
    };
    return GoogleOAuth;
}();

},{"tslib":"iyInc","../Logger":"aOIPE","../JS":"fFubg","../Util":"hLH9s","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cLE4d":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FacebookOAuth", ()=>FacebookOAuth);
var _tslib = require("tslib");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var _logger = require("../Logger");
var _js = require("../JS");
var _util = require("../Util");
var logger = new (0, _logger.ConsoleLogger)("CognitoCredentials");
var waitForInit = new Promise(function(res, rej) {
    if (!(0, _js.browserOrNode)().isBrowser) {
        logger.debug("not in the browser, directly resolved");
        return res();
    }
    var fb = window["FB"];
    if (fb) {
        logger.debug("FB SDK already loaded");
        return res();
    } else setTimeout(function() {
        return res();
    }, 2000);
});
var FacebookOAuth = /** @class */ function() {
    function FacebookOAuth() {
        this.initialized = false;
        this.refreshFacebookToken = this.refreshFacebookToken.bind(this);
        this._refreshFacebookTokenImpl = this._refreshFacebookTokenImpl.bind(this);
    }
    FacebookOAuth.prototype.refreshFacebookToken = function() {
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            return (0, _tslib.__generator)(this, function(_a) {
                switch(_a.label){
                    case 0:
                        if (!!this.initialized) return [
                            3 /*break*/ ,
                            2
                        ];
                        logger.debug("need to wait for the Facebook SDK loaded");
                        return [
                            4 /*yield*/ ,
                            waitForInit
                        ];
                    case 1:
                        _a.sent();
                        this.initialized = true;
                        logger.debug("finish waiting");
                        _a.label = 2;
                    case 2:
                        return [
                            2 /*return*/ ,
                            this._refreshFacebookTokenImpl()
                        ];
                }
            });
        });
    };
    FacebookOAuth.prototype._refreshFacebookTokenImpl = function() {
        var fb = null;
        if ((0, _js.browserOrNode)().isBrowser) fb = window["FB"];
        if (!fb) {
            var errorMessage = "no fb sdk available";
            logger.debug(errorMessage);
            return Promise.reject(new (0, _util.NonRetryableError)(errorMessage));
        }
        return new Promise(function(res, rej) {
            fb.getLoginStatus(function(fbResponse) {
                if (!fbResponse || !fbResponse.authResponse) {
                    var errorMessage = "no response from facebook when refreshing the jwt token";
                    logger.debug(errorMessage);
                    // There is no definitive indication for a network error in
                    // fbResponse, so we are treating it as an invalid token.
                    rej(new (0, _util.NonRetryableError)(errorMessage));
                } else {
                    var response = fbResponse.authResponse;
                    var accessToken = response.accessToken, expiresIn = response.expiresIn;
                    var date = new Date();
                    var expires_at = expiresIn * 1000 + date.getTime();
                    if (!accessToken) {
                        var errorMessage = "the jwtToken is undefined";
                        logger.debug(errorMessage);
                        rej(new (0, _util.NonRetryableError)(errorMessage));
                    }
                    res({
                        token: accessToken,
                        expires_at: expires_at
                    });
                }
            }, {
                scope: "public_profile,email"
            });
        });
    };
    return FacebookOAuth;
}();

},{"tslib":"iyInc","../Logger":"aOIPE","../JS":"fFubg","../Util":"hLH9s","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e9vlE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CredentialsClass", ()=>CredentialsClass);
parcelHelpers.export(exports, "Credentials", ()=>Credentials);
var _tslib = require("tslib");
var _logger = require("./Logger");
var _storageHelper = require("./StorageHelper");
var _js = require("./JS");
var _oauthHelper = require("./OAuthHelper");
var _util = require("./Util");
var _amplify = require("./Amplify");
var _credentialProviderCognitoIdentity = require("@aws-sdk/credential-provider-cognito-identity");
var _clientCognitoIdentity = require("@aws-sdk/client-cognito-identity");
var _parseAWSExports = require("./parseAWSExports");
var _hub = require("./Hub");
var _cognitoIdentityClient = require("./Util/CognitoIdentityClient");
var logger = new (0, _logger.ConsoleLogger)("Credentials");
var CREDENTIALS_TTL = 3000000; // 50 min, can be modified on config if required in the future
var COGNITO_IDENTITY_KEY_PREFIX = "CognitoIdentityId-";
var AMPLIFY_SYMBOL = typeof Symbol !== "undefined" && typeof Symbol.for === "function" ? Symbol.for("amplify_default") : "@@amplify_default";
var dispatchCredentialsEvent = function(event, data, message) {
    (0, _hub.Hub).dispatch("core", {
        event: event,
        data: data,
        message: message
    }, "Credentials", AMPLIFY_SYMBOL);
};
var CredentialsClass = /** @class */ function() {
    function CredentialsClass(config) {
        this._gettingCredPromise = null;
        this._refreshHandlers = {};
        // Allow `Auth` to be injected for SSR, but Auth isn't a required dependency for Credentials
        this.Auth = undefined;
        this.configure(config);
        this._refreshHandlers["google"] = (0, _oauthHelper.GoogleOAuth).refreshGoogleToken;
        this._refreshHandlers["facebook"] = (0, _oauthHelper.FacebookOAuth).refreshFacebookToken;
    }
    CredentialsClass.prototype.getModuleName = function() {
        return "Credentials";
    };
    CredentialsClass.prototype.getCredSource = function() {
        return this._credentials_source;
    };
    CredentialsClass.prototype.configure = function(config) {
        if (!config) return this._config || {};
        this._config = Object.assign({}, this._config, config);
        var refreshHandlers = this._config.refreshHandlers;
        // If the developer has provided an object of refresh handlers,
        // then we can merge the provided handlers with the current handlers.
        if (refreshHandlers) this._refreshHandlers = (0, _tslib.__assign)((0, _tslib.__assign)({}, this._refreshHandlers), refreshHandlers);
        this._storage = this._config.storage;
        if (!this._storage) this._storage = new (0, _storageHelper.StorageHelper)().getStorage();
        this._storageSync = Promise.resolve();
        if (typeof this._storage["sync"] === "function") this._storageSync = this._storage["sync"]();
        dispatchCredentialsEvent("credentials_configured", null, "Credentials has been configured successfully");
        return this._config;
    };
    CredentialsClass.prototype.get = function() {
        logger.debug("getting credentials");
        return this._pickupCredentials();
    };
    // currently we only store the guest identity in local storage
    CredentialsClass.prototype._getCognitoIdentityIdStorageKey = function(identityPoolId) {
        return "" + COGNITO_IDENTITY_KEY_PREFIX + identityPoolId;
    };
    CredentialsClass.prototype._pickupCredentials = function() {
        logger.debug("picking up credentials");
        if (!this._gettingCredPromise || !this._gettingCredPromise.isPending()) {
            logger.debug("getting new cred promise");
            this._gettingCredPromise = (0, _js.makeQuerablePromise)(this._keepAlive());
        } else logger.debug("getting old cred promise");
        return this._gettingCredPromise;
    };
    CredentialsClass.prototype._keepAlive = function() {
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            var cred, _a, Auth, user_1, session, refreshToken_1, refreshRequest, err_1;
            return (0, _tslib.__generator)(this, function(_b) {
                switch(_b.label){
                    case 0:
                        logger.debug("checking if credentials exists and not expired");
                        cred = this._credentials;
                        if (cred && !this._isExpired(cred) && !this._isPastTTL()) {
                            logger.debug("credentials not changed and not expired, directly return");
                            return [
                                2 /*return*/ ,
                                Promise.resolve(cred)
                            ];
                        }
                        logger.debug("need to get a new credential or refresh the existing one");
                        _a = this.Auth, Auth = _a === void 0 ? (0, _amplify.Amplify).Auth : _a;
                        if (!Auth || typeof Auth.currentUserCredentials !== "function") // If Auth module is not imported, do a best effort to get guest credentials
                        return [
                            2 /*return*/ ,
                            this._setCredentialsForGuest()
                        ];
                        if (!(!this._isExpired(cred) && this._isPastTTL())) return [
                            3 /*break*/ ,
                            6
                        ];
                        logger.debug("ttl has passed but token is not yet expired");
                        _b.label = 1;
                    case 1:
                        _b.trys.push([
                            1,
                            5,
                            ,
                            6
                        ]);
                        return [
                            4 /*yield*/ ,
                            Auth.currentUserPoolUser()
                        ];
                    case 2:
                        user_1 = _b.sent();
                        return [
                            4 /*yield*/ ,
                            Auth.currentSession()
                        ];
                    case 3:
                        session = _b.sent();
                        refreshToken_1 = session.refreshToken;
                        refreshRequest = new Promise(function(res, rej) {
                            user_1.refreshSession(refreshToken_1, function(err, data) {
                                return err ? rej(err) : res(data);
                            });
                        });
                        return [
                            4 /*yield*/ ,
                            refreshRequest
                        ];
                    case 4:
                        _b.sent(); // note that rejections will be caught and handled in the catch block.
                        return [
                            3 /*break*/ ,
                            6
                        ];
                    case 5:
                        err_1 = _b.sent();
                        // should not throw because user might just be on guest access or is authenticated through federation
                        logger.debug("Error attempting to refreshing the session", err_1);
                        return [
                            3 /*break*/ ,
                            6
                        ];
                    case 6:
                        return [
                            2 /*return*/ ,
                            Auth.currentUserCredentials()
                        ];
                }
            });
        });
    };
    CredentialsClass.prototype.refreshFederatedToken = function(federatedInfo) {
        logger.debug("Getting federated credentials");
        var provider = federatedInfo.provider, user = federatedInfo.user, token = federatedInfo.token, identity_id = federatedInfo.identity_id;
        var expires_at = federatedInfo.expires_at;
        // Make sure expires_at is in millis
        expires_at = new Date(expires_at).getFullYear() === 1970 ? expires_at * 1000 : expires_at;
        var that = this;
        logger.debug("checking if federated jwt token expired");
        if (expires_at > new Date().getTime()) {
            // if not expired
            logger.debug("token not expired");
            return this._setCredentialsFromFederation({
                provider: provider,
                token: token,
                user: user,
                identity_id: identity_id,
                expires_at: expires_at
            });
        } else // if refresh handler exists
        if (that._refreshHandlers[provider] && typeof that._refreshHandlers[provider] === "function") {
            logger.debug("getting refreshed jwt token from federation provider");
            return this._providerRefreshWithRetry({
                refreshHandler: that._refreshHandlers[provider],
                provider: provider,
                user: user
            });
        } else {
            logger.debug("no refresh handler for provider:", provider);
            this.clear();
            return Promise.reject("no refresh handler for provider");
        }
    };
    CredentialsClass.prototype._providerRefreshWithRetry = function(_a) {
        var _this = this;
        var refreshHandler = _a.refreshHandler, provider = _a.provider, user = _a.user;
        var MAX_DELAY_MS = 10000;
        // refreshHandler will retry network errors, otherwise it will
        // return NonRetryableError to break out of jitteredExponentialRetry
        return (0, _util.jitteredExponentialRetry)(refreshHandler, [], MAX_DELAY_MS).then(function(data) {
            logger.debug("refresh federated token sucessfully", data);
            return _this._setCredentialsFromFederation({
                provider: provider,
                token: data.token,
                user: user,
                identity_id: data.identity_id,
                expires_at: data.expires_at
            });
        }).catch(function(e) {
            var isNetworkError = typeof e === "string" && e.toLowerCase().lastIndexOf("network error", e.length) === 0;
            if (!isNetworkError) _this.clear();
            logger.debug("refresh federated token failed", e);
            return Promise.reject("refreshing federation token failed: " + e);
        });
    };
    CredentialsClass.prototype._isExpired = function(credentials) {
        if (!credentials) {
            logger.debug("no credentials for expiration check");
            return true;
        }
        logger.debug("are these credentials expired?", credentials);
        var ts = Date.now();
        /* returns date object.
            https://github.com/aws/aws-sdk-js-v3/blob/v1.0.0-beta.1/packages/types/src/credentials.ts#L26
        */ var expiration = credentials.expiration;
        return expiration.getTime() <= ts;
    };
    CredentialsClass.prototype._isPastTTL = function() {
        return this._nextCredentialsRefresh <= Date.now();
    };
    CredentialsClass.prototype._setCredentialsForGuest = function() {
        var _a;
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            var _b, identityPoolId, region, mandatorySignIn, identityPoolRegion, identityId, _c, cognitoClient, credentials, cognitoIdentityParams, credentialsProvider;
            var _this = this;
            return (0, _tslib.__generator)(this, function(_d) {
                switch(_d.label){
                    case 0:
                        logger.debug("setting credentials for guest");
                        if (!((_a = this._config) === null || _a === void 0 ? void 0 : _a.identityPoolId)) // If Credentials are not configured thru Auth module,
                        // doing best effort to check if the library was configured
                        this._config = Object.assign({}, this._config, (0, _parseAWSExports.parseAWSExports)(this._config || {}).Auth);
                        _b = this._config, identityPoolId = _b.identityPoolId, region = _b.region, mandatorySignIn = _b.mandatorySignIn, identityPoolRegion = _b.identityPoolRegion;
                        if (mandatorySignIn) return [
                            2 /*return*/ ,
                            Promise.reject("cannot get guest credentials when mandatory signin enabled")
                        ];
                        if (!identityPoolId) {
                            logger.debug("No Cognito Identity pool provided for unauthenticated access");
                            return [
                                2 /*return*/ ,
                                Promise.reject("No Cognito Identity pool provided for unauthenticated access")
                            ];
                        }
                        if (!identityPoolRegion && !region) {
                            logger.debug("region is not configured for getting the credentials");
                            return [
                                2 /*return*/ ,
                                Promise.reject("region is not configured for getting the credentials")
                            ];
                        }
                        _c = this;
                        return [
                            4 /*yield*/ ,
                            this._getGuestIdentityId()
                        ];
                    case 1:
                        identityId = _c._identityId = _d.sent();
                        cognitoClient = (0, _cognitoIdentityClient.createCognitoIdentityClient)({
                            region: identityPoolRegion || region
                        });
                        credentials = undefined;
                        if (identityId) {
                            cognitoIdentityParams = {
                                identityId: identityId,
                                client: cognitoClient
                            };
                            credentials = (0, _credentialProviderCognitoIdentity.fromCognitoIdentity)(cognitoIdentityParams)();
                        } else {
                            credentialsProvider = function() {
                                return (0, _tslib.__awaiter)(_this, void 0, void 0, function() {
                                    var IdentityId, cognitoIdentityParams, credentialsFromCognitoIdentity;
                                    return (0, _tslib.__generator)(this, function(_a) {
                                        switch(_a.label){
                                            case 0:
                                                return [
                                                    4 /*yield*/ ,
                                                    cognitoClient.send(new (0, _clientCognitoIdentity.GetIdCommand)({
                                                        IdentityPoolId: identityPoolId
                                                    }))
                                                ];
                                            case 1:
                                                IdentityId = _a.sent().IdentityId;
                                                this._identityId = IdentityId;
                                                cognitoIdentityParams = {
                                                    client: cognitoClient,
                                                    identityId: IdentityId
                                                };
                                                credentialsFromCognitoIdentity = (0, _credentialProviderCognitoIdentity.fromCognitoIdentity)(cognitoIdentityParams);
                                                return [
                                                    2 /*return*/ ,
                                                    credentialsFromCognitoIdentity()
                                                ];
                                        }
                                    });
                                });
                            };
                            credentials = credentialsProvider().catch(function(err) {
                                return (0, _tslib.__awaiter)(_this, void 0, void 0, function() {
                                    return (0, _tslib.__generator)(this, function(_a) {
                                        throw err;
                                    });
                                });
                            });
                        }
                        return [
                            2 /*return*/ ,
                            this._loadCredentials(credentials, "guest", false, null).then(function(res) {
                                return res;
                            }).catch(function(e) {
                                return (0, _tslib.__awaiter)(_this, void 0, void 0, function() {
                                    var credentialsProvider;
                                    var _this = this;
                                    return (0, _tslib.__generator)(this, function(_a) {
                                        switch(_a.label){
                                            case 0:
                                                if (!(e.name === "ResourceNotFoundException" && e.message === "Identity '" + identityId + "' not found.")) return [
                                                    3 /*break*/ ,
                                                    2
                                                ];
                                                logger.debug("Failed to load guest credentials");
                                                return [
                                                    4 /*yield*/ ,
                                                    this._removeGuestIdentityId()
                                                ];
                                            case 1:
                                                _a.sent();
                                                credentialsProvider = function() {
                                                    return (0, _tslib.__awaiter)(_this, void 0, void 0, function() {
                                                        var IdentityId, cognitoIdentityParams, credentialsFromCognitoIdentity;
                                                        return (0, _tslib.__generator)(this, function(_a) {
                                                            switch(_a.label){
                                                                case 0:
                                                                    return [
                                                                        4 /*yield*/ ,
                                                                        cognitoClient.send(new (0, _clientCognitoIdentity.GetIdCommand)({
                                                                            IdentityPoolId: identityPoolId
                                                                        }))
                                                                    ];
                                                                case 1:
                                                                    IdentityId = _a.sent().IdentityId;
                                                                    this._identityId = IdentityId;
                                                                    cognitoIdentityParams = {
                                                                        client: cognitoClient,
                                                                        identityId: IdentityId
                                                                    };
                                                                    credentialsFromCognitoIdentity = (0, _credentialProviderCognitoIdentity.fromCognitoIdentity)(cognitoIdentityParams);
                                                                    return [
                                                                        2 /*return*/ ,
                                                                        credentialsFromCognitoIdentity()
                                                                    ];
                                                            }
                                                        });
                                                    });
                                                };
                                                credentials = credentialsProvider().catch(function(err) {
                                                    return (0, _tslib.__awaiter)(_this, void 0, void 0, function() {
                                                        return (0, _tslib.__generator)(this, function(_a) {
                                                            throw err;
                                                        });
                                                    });
                                                });
                                                return [
                                                    2 /*return*/ ,
                                                    this._loadCredentials(credentials, "guest", false, null)
                                                ];
                                            case 2:
                                                return [
                                                    2 /*return*/ ,
                                                    e
                                                ];
                                        }
                                    });
                                });
                            })
                        ];
                }
            });
        });
    };
    CredentialsClass.prototype._setCredentialsFromFederation = function(params) {
        var provider = params.provider, token = params.token, identity_id = params.identity_id;
        var domains = {
            google: "accounts.google.com",
            facebook: "graph.facebook.com",
            amazon: "www.amazon.com",
            developer: "cognito-identity.amazonaws.com"
        };
        // Use custom provider url instead of the predefined ones
        var domain = domains[provider] || provider;
        if (!domain) return Promise.reject("You must specify a federated provider");
        var logins = {};
        logins[domain] = token;
        var _a = this._config, identityPoolId = _a.identityPoolId, region = _a.region, identityPoolRegion = _a.identityPoolRegion;
        if (!identityPoolId) {
            logger.debug("No Cognito Federated Identity pool provided");
            return Promise.reject("No Cognito Federated Identity pool provided");
        }
        if (!identityPoolRegion && !region) {
            logger.debug("region is not configured for getting the credentials");
            return Promise.reject("region is not configured for getting the credentials");
        }
        var cognitoClient = (0, _cognitoIdentityClient.createCognitoIdentityClient)({
            region: identityPoolRegion || region
        });
        var credentials = undefined;
        if (identity_id) {
            var cognitoIdentityParams = {
                identityId: identity_id,
                logins: logins,
                client: cognitoClient
            };
            credentials = (0, _credentialProviderCognitoIdentity.fromCognitoIdentity)(cognitoIdentityParams)();
        } else {
            var cognitoIdentityParams = {
                logins: logins,
                identityPoolId: identityPoolId,
                client: cognitoClient
            };
            credentials = (0, _credentialProviderCognitoIdentity.fromCognitoIdentityPool)(cognitoIdentityParams)();
        }
        return this._loadCredentials(credentials, "federated", true, params);
    };
    CredentialsClass.prototype._setCredentialsFromSession = function(session) {
        var _this = this;
        logger.debug("set credentials from session");
        var idToken = session.getIdToken().getJwtToken();
        var _a = this._config, region = _a.region, userPoolId = _a.userPoolId, identityPoolId = _a.identityPoolId, identityPoolRegion = _a.identityPoolRegion;
        if (!identityPoolId) {
            logger.debug("No Cognito Federated Identity pool provided");
            return Promise.reject("No Cognito Federated Identity pool provided");
        }
        if (!identityPoolRegion && !region) {
            logger.debug("region is not configured for getting the credentials");
            return Promise.reject("region is not configured for getting the credentials");
        }
        var key = "cognito-idp." + region + ".amazonaws.com/" + userPoolId;
        var logins = {};
        logins[key] = idToken;
        var cognitoClient = (0, _cognitoIdentityClient.createCognitoIdentityClient)({
            region: identityPoolRegion || region
        });
        /*
            Retreiving identityId with GetIdCommand to mimic the behavior in the following code in aws-sdk-v3:
            https://git.io/JeDxU

            Note: Retreive identityId from CredentialsProvider once aws-sdk-js v3 supports this.
        */ var credentialsProvider = function() {
            return (0, _tslib.__awaiter)(_this, void 0, void 0, function() {
                var guestIdentityId, generatedOrRetrievedIdentityId, IdentityId, _a, _b, AccessKeyId, Expiration, SecretKey, SessionToken, primaryIdentityId;
                return (0, _tslib.__generator)(this, function(_c) {
                    switch(_c.label){
                        case 0:
                            return [
                                4 /*yield*/ ,
                                this._getGuestIdentityId()
                            ];
                        case 1:
                            guestIdentityId = _c.sent();
                            if (!!guestIdentityId) return [
                                3 /*break*/ ,
                                3
                            ];
                            return [
                                4 /*yield*/ ,
                                cognitoClient.send(new (0, _clientCognitoIdentity.GetIdCommand)({
                                    IdentityPoolId: identityPoolId,
                                    Logins: logins
                                }))
                            ];
                        case 2:
                            IdentityId = _c.sent().IdentityId;
                            generatedOrRetrievedIdentityId = IdentityId;
                            _c.label = 3;
                        case 3:
                            return [
                                4 /*yield*/ ,
                                cognitoClient.send(new (0, _clientCognitoIdentity.GetCredentialsForIdentityCommand)({
                                    IdentityId: guestIdentityId || generatedOrRetrievedIdentityId,
                                    Logins: logins
                                }))
                            ];
                        case 4:
                            _a = _c.sent(), _b = _a.Credentials, AccessKeyId = _b.AccessKeyId, Expiration = _b.Expiration, SecretKey = _b.SecretKey, SessionToken = _b.SessionToken, primaryIdentityId = _a.IdentityId;
                            this._identityId = primaryIdentityId;
                            if (!guestIdentityId) return [
                                3 /*break*/ ,
                                6
                            ];
                            // if guestIdentity is found and used by GetCredentialsForIdentity
                            // it will be linked to the logins provided, and disqualified as an unauth identity
                            logger.debug("The guest identity " + guestIdentityId + " has been successfully linked to the logins");
                            if (guestIdentityId === primaryIdentityId) logger.debug("The guest identity " + guestIdentityId + " has become the primary identity");
                            // remove it from local storage to avoid being used as a guest Identity by _setCredentialsForGuest
                            return [
                                4 /*yield*/ ,
                                this._removeGuestIdentityId()
                            ];
                        case 5:
                            // remove it from local storage to avoid being used as a guest Identity by _setCredentialsForGuest
                            _c.sent();
                            _c.label = 6;
                        case 6:
                            // https://github.com/aws/aws-sdk-js-v3/blob/main/packages/credential-provider-cognito-identity/src/fromCognitoIdentity.ts#L40
                            return [
                                2 /*return*/ ,
                                {
                                    accessKeyId: AccessKeyId,
                                    secretAccessKey: SecretKey,
                                    sessionToken: SessionToken,
                                    expiration: Expiration,
                                    identityId: primaryIdentityId
                                }
                            ];
                    }
                });
            });
        };
        var credentials = credentialsProvider().catch(function(err) {
            return (0, _tslib.__awaiter)(_this, void 0, void 0, function() {
                return (0, _tslib.__generator)(this, function(_a) {
                    throw err;
                });
            });
        });
        return this._loadCredentials(credentials, "userPool", true, null);
    };
    CredentialsClass.prototype._loadCredentials = function(credentials, source, authenticated, info) {
        var _this = this;
        var that = this;
        return new Promise(function(res, rej) {
            credentials.then(function(credentials) {
                return (0, _tslib.__awaiter)(_this, void 0, void 0, function() {
                    var user, provider, token, expires_at, identity_id;
                    return (0, _tslib.__generator)(this, function(_a) {
                        switch(_a.label){
                            case 0:
                                logger.debug("Load credentials successfully", credentials);
                                if (this._identityId && !credentials.identityId) credentials["identityId"] = this._identityId;
                                that._credentials = credentials;
                                that._credentials.authenticated = authenticated;
                                that._credentials_source = source;
                                that._nextCredentialsRefresh = new Date().getTime() + CREDENTIALS_TTL;
                                if (source === "federated") {
                                    user = Object.assign({
                                        id: this._credentials.identityId
                                    }, info.user);
                                    provider = info.provider, token = info.token, expires_at = info.expires_at, identity_id = info.identity_id;
                                    try {
                                        this._storage.setItem("aws-amplify-federatedInfo", JSON.stringify({
                                            provider: provider,
                                            token: token,
                                            user: user,
                                            expires_at: expires_at,
                                            identity_id: identity_id
                                        }));
                                    } catch (e) {
                                        logger.debug("Failed to put federated info into auth storage", e);
                                    }
                                }
                                if (!(source === "guest")) return [
                                    3 /*break*/ ,
                                    2
                                ];
                                return [
                                    4 /*yield*/ ,
                                    this._setGuestIdentityId(credentials.identityId)
                                ];
                            case 1:
                                _a.sent();
                                _a.label = 2;
                            case 2:
                                res(that._credentials);
                                return [
                                    2 /*return*/ 
                                ];
                        }
                    });
                });
            }).catch(function(err) {
                if (err) {
                    logger.debug("Failed to load credentials", credentials);
                    logger.debug("Error loading credentials", err);
                    rej(err);
                    return;
                }
            });
        });
    };
    CredentialsClass.prototype.set = function(params, source) {
        if (source === "session") return this._setCredentialsFromSession(params);
        else if (source === "federation") return this._setCredentialsFromFederation(params);
        else if (source === "guest") return this._setCredentialsForGuest();
        else {
            logger.debug("no source specified for setting credentials");
            return Promise.reject("invalid source");
        }
    };
    CredentialsClass.prototype.clear = function() {
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            return (0, _tslib.__generator)(this, function(_a) {
                this._credentials = null;
                this._credentials_source = null;
                logger.debug("removing aws-amplify-federatedInfo from storage");
                this._storage.removeItem("aws-amplify-federatedInfo");
                return [
                    2 /*return*/ 
                ];
            });
        });
    };
    /* operations on local stored guest identity */ CredentialsClass.prototype._getGuestIdentityId = function() {
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            var identityPoolId, e_1;
            return (0, _tslib.__generator)(this, function(_a) {
                switch(_a.label){
                    case 0:
                        identityPoolId = this._config.identityPoolId;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([
                            1,
                            3,
                            ,
                            4
                        ]);
                        return [
                            4 /*yield*/ ,
                            this._storageSync
                        ];
                    case 2:
                        _a.sent();
                        return [
                            2 /*return*/ ,
                            this._storage.getItem(this._getCognitoIdentityIdStorageKey(identityPoolId))
                        ];
                    case 3:
                        e_1 = _a.sent();
                        logger.debug("Failed to get the cached guest identityId", e_1);
                        return [
                            3 /*break*/ ,
                            4
                        ];
                    case 4:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    CredentialsClass.prototype._setGuestIdentityId = function(identityId) {
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            var identityPoolId, e_2;
            return (0, _tslib.__generator)(this, function(_a) {
                switch(_a.label){
                    case 0:
                        identityPoolId = this._config.identityPoolId;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([
                            1,
                            3,
                            ,
                            4
                        ]);
                        return [
                            4 /*yield*/ ,
                            this._storageSync
                        ];
                    case 2:
                        _a.sent();
                        this._storage.setItem(this._getCognitoIdentityIdStorageKey(identityPoolId), identityId);
                        return [
                            3 /*break*/ ,
                            4
                        ];
                    case 3:
                        e_2 = _a.sent();
                        logger.debug("Failed to cache guest identityId", e_2);
                        return [
                            3 /*break*/ ,
                            4
                        ];
                    case 4:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    CredentialsClass.prototype._removeGuestIdentityId = function() {
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            var identityPoolId;
            return (0, _tslib.__generator)(this, function(_a) {
                identityPoolId = this._config.identityPoolId;
                logger.debug("removing " + this._getCognitoIdentityIdStorageKey(identityPoolId) + " from storage");
                this._storage.removeItem(this._getCognitoIdentityIdStorageKey(identityPoolId));
                return [
                    2 /*return*/ 
                ];
            });
        });
    };
    /**
     * Compact version of credentials
     * @param {Object} credentials
     * @return {Object} - Credentials
     */ CredentialsClass.prototype.shear = function(credentials) {
        return {
            accessKeyId: credentials.accessKeyId,
            sessionToken: credentials.sessionToken,
            secretAccessKey: credentials.secretAccessKey,
            identityId: credentials.identityId,
            authenticated: credentials.authenticated
        };
    };
    return CredentialsClass;
}();
var Credentials = new CredentialsClass(null);
(0, _amplify.Amplify).register(Credentials);

},{"tslib":"iyInc","./Logger":"aOIPE","./StorageHelper":"3R0f0","./JS":"fFubg","./OAuthHelper":"zKgKu","./Util":"hLH9s","./Amplify":"4gP56","@aws-sdk/credential-provider-cognito-identity":"i6AvY","@aws-sdk/client-cognito-identity":"6STYA","./parseAWSExports":"gsLRZ","./Hub":"kCAC7","./Util/CognitoIdentityClient":"lb266","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3R0f0":[function(require,module,exports) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MemoryStorage", ()=>MemoryStorage);
parcelHelpers.export(exports, "StorageHelper", ()=>StorageHelper);
var dataMemory = {};
/** @class */ var MemoryStorage = /** @class */ function() {
    function MemoryStorage() {}
    /**
     * This is used to set a specific item in storage
     * @param {string} key - the key for the item
     * @param {object} value - the value
     * @returns {string} value that was set
     */ MemoryStorage.setItem = function(key, value) {
        dataMemory[key] = value;
        return dataMemory[key];
    };
    /**
     * This is used to get a specific key from storage
     * @param {string} key - the key for the item
     * This is used to clear the storage
     * @returns {string} the data item
     */ MemoryStorage.getItem = function(key) {
        return Object.prototype.hasOwnProperty.call(dataMemory, key) ? dataMemory[key] : undefined;
    };
    /**
     * This is used to remove an item from storage
     * @param {string} key - the key being set
     * @returns {string} value - value that was deleted
     */ MemoryStorage.removeItem = function(key) {
        return delete dataMemory[key];
    };
    /**
     * This is used to clear the storage
     * @returns {string} nothing
     */ MemoryStorage.clear = function() {
        dataMemory = {};
        return dataMemory;
    };
    return MemoryStorage;
}();
var StorageHelper = /** @class */ function() {
    /**
     * This is used to get a storage object
     * @returns {object} the storage
     */ function StorageHelper() {
        try {
            this.storageWindow = window.localStorage;
            this.storageWindow.setItem("aws.amplify.test-ls", 1);
            this.storageWindow.removeItem("aws.amplify.test-ls");
        } catch (exception) {
            this.storageWindow = MemoryStorage;
        }
    }
    /**
     * This is used to return the storage
     * @returns {object} the storage
     */ StorageHelper.prototype.getStorage = function() {
        return this.storageWindow;
    };
    return StorageHelper;
}();

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i6AvY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _cognitoProviderParameters = require("./CognitoProviderParameters");
parcelHelpers.exportAll(_cognitoProviderParameters, exports);
var _fromCognitoIdentity = require("./fromCognitoIdentity");
parcelHelpers.exportAll(_fromCognitoIdentity, exports);
var _fromCognitoIdentityPool = require("./fromCognitoIdentityPool");
parcelHelpers.exportAll(_fromCognitoIdentityPool, exports);
var _logins = require("./Logins");
parcelHelpers.exportAll(_logins, exports);
var _storage = require("./Storage");
parcelHelpers.exportAll(_storage, exports);

},{"./CognitoProviderParameters":"lyocJ","./fromCognitoIdentity":"d8ZgH","./fromCognitoIdentityPool":"4UQMg","./Logins":"4jsuG","./Storage":"2jcFA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lyocJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d8ZgH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Retrieves temporary AWS credentials using Amazon Cognito's
 * `GetCredentialsForIdentity` operation.
 *
 * Results from this function call are not cached internally.
 */ parcelHelpers.export(exports, "fromCognitoIdentity", ()=>fromCognitoIdentity);
var _tslib = require("tslib");
var _clientCognitoIdentity = require("@aws-sdk/client-cognito-identity");
var _propertyProvider = require("@aws-sdk/property-provider");
var _resolveLogins = require("./resolveLogins");
function fromCognitoIdentity(parameters) {
    var _this = this;
    return function() {
        return (0, _tslib.__awaiter)(_this, void 0, void 0, function() {
            var _a, _b, _c, AccessKeyId, Expiration, _d, SecretKey, SessionToken, _e, _f, _g, _h;
            var _j;
            return (0, _tslib.__generator)(this, function(_k) {
                switch(_k.label){
                    case 0:
                        _f = (_e = parameters.client).send;
                        _g = (0, _clientCognitoIdentity.GetCredentialsForIdentityCommand).bind;
                        _j = {
                            CustomRoleArn: parameters.customRoleArn,
                            IdentityId: parameters.identityId
                        };
                        if (!parameters.logins) return [
                            3 /*break*/ ,
                            2
                        ];
                        return [
                            4 /*yield*/ ,
                            (0, _resolveLogins.resolveLogins)(parameters.logins)
                        ];
                    case 1:
                        _h = _k.sent();
                        return [
                            3 /*break*/ ,
                            3
                        ];
                    case 2:
                        _h = undefined;
                        _k.label = 3;
                    case 3:
                        return [
                            4 /*yield*/ ,
                            _f.apply(_e, [
                                new (_g.apply((0, _clientCognitoIdentity.GetCredentialsForIdentityCommand), [
                                    void 0,
                                    (_j.Logins = _h, _j)
                                ]))()
                            ])
                        ];
                    case 4:
                        _a = _k.sent().Credentials, _b = _a === void 0 ? throwOnMissingCredentials() : _a, _c = _b.AccessKeyId, AccessKeyId = _c === void 0 ? throwOnMissingAccessKeyId() : _c, Expiration = _b.Expiration, _d = _b.SecretKey, SecretKey = _d === void 0 ? throwOnMissingSecretKey() : _d, SessionToken = _b.SessionToken;
                        return [
                            2 /*return*/ ,
                            {
                                identityId: parameters.identityId,
                                accessKeyId: AccessKeyId,
                                secretAccessKey: SecretKey,
                                sessionToken: SessionToken,
                                expiration: Expiration
                            }
                        ];
                }
            });
        });
    };
}
function throwOnMissingAccessKeyId() {
    throw new (0, _propertyProvider.ProviderError)("Response from Amazon Cognito contained no access key ID");
}
function throwOnMissingCredentials() {
    throw new (0, _propertyProvider.ProviderError)("Response from Amazon Cognito contained no credentials");
}
function throwOnMissingSecretKey() {
    throw new (0, _propertyProvider.ProviderError)("Response from Amazon Cognito contained no secret key");
}

},{"tslib":"fvjju","@aws-sdk/client-cognito-identity":"6STYA","@aws-sdk/property-provider":"hAZuM","./resolveLogins":"lCi3C","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fvjju":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6STYA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _cognitoIdentityClient = require("./CognitoIdentityClient");
parcelHelpers.exportAll(_cognitoIdentityClient, exports);
var _cognitoIdentity = require("./CognitoIdentity");
parcelHelpers.exportAll(_cognitoIdentity, exports);
var _createIdentityPoolCommand = require("./commands/CreateIdentityPoolCommand");
parcelHelpers.exportAll(_createIdentityPoolCommand, exports);
var _deleteIdentitiesCommand = require("./commands/DeleteIdentitiesCommand");
parcelHelpers.exportAll(_deleteIdentitiesCommand, exports);
var _deleteIdentityPoolCommand = require("./commands/DeleteIdentityPoolCommand");
parcelHelpers.exportAll(_deleteIdentityPoolCommand, exports);
var _describeIdentityCommand = require("./commands/DescribeIdentityCommand");
parcelHelpers.exportAll(_describeIdentityCommand, exports);
var _describeIdentityPoolCommand = require("./commands/DescribeIdentityPoolCommand");
parcelHelpers.exportAll(_describeIdentityPoolCommand, exports);
var _getCredentialsForIdentityCommand = require("./commands/GetCredentialsForIdentityCommand");
parcelHelpers.exportAll(_getCredentialsForIdentityCommand, exports);
var _getIdCommand = require("./commands/GetIdCommand");
parcelHelpers.exportAll(_getIdCommand, exports);
var _getIdentityPoolRolesCommand = require("./commands/GetIdentityPoolRolesCommand");
parcelHelpers.exportAll(_getIdentityPoolRolesCommand, exports);
var _getOpenIdTokenCommand = require("./commands/GetOpenIdTokenCommand");
parcelHelpers.exportAll(_getOpenIdTokenCommand, exports);
var _getOpenIdTokenForDeveloperIdentityCommand = require("./commands/GetOpenIdTokenForDeveloperIdentityCommand");
parcelHelpers.exportAll(_getOpenIdTokenForDeveloperIdentityCommand, exports);
var _listIdentitiesCommand = require("./commands/ListIdentitiesCommand");
parcelHelpers.exportAll(_listIdentitiesCommand, exports);
var _listIdentityPoolsCommand = require("./commands/ListIdentityPoolsCommand");
parcelHelpers.exportAll(_listIdentityPoolsCommand, exports);
var _listIdentityPoolsPaginator = require("./pagination/ListIdentityPoolsPaginator");
parcelHelpers.exportAll(_listIdentityPoolsPaginator, exports);
var _listTagsForResourceCommand = require("./commands/ListTagsForResourceCommand");
parcelHelpers.exportAll(_listTagsForResourceCommand, exports);
var _lookupDeveloperIdentityCommand = require("./commands/LookupDeveloperIdentityCommand");
parcelHelpers.exportAll(_lookupDeveloperIdentityCommand, exports);
var _mergeDeveloperIdentitiesCommand = require("./commands/MergeDeveloperIdentitiesCommand");
parcelHelpers.exportAll(_mergeDeveloperIdentitiesCommand, exports);
var _setIdentityPoolRolesCommand = require("./commands/SetIdentityPoolRolesCommand");
parcelHelpers.exportAll(_setIdentityPoolRolesCommand, exports);
var _tagResourceCommand = require("./commands/TagResourceCommand");
parcelHelpers.exportAll(_tagResourceCommand, exports);
var _unlinkDeveloperIdentityCommand = require("./commands/UnlinkDeveloperIdentityCommand");
parcelHelpers.exportAll(_unlinkDeveloperIdentityCommand, exports);
var _unlinkIdentityCommand = require("./commands/UnlinkIdentityCommand");
parcelHelpers.exportAll(_unlinkIdentityCommand, exports);
var _untagResourceCommand = require("./commands/UntagResourceCommand");
parcelHelpers.exportAll(_untagResourceCommand, exports);
var _updateIdentityPoolCommand = require("./commands/UpdateIdentityPoolCommand");
parcelHelpers.exportAll(_updateIdentityPoolCommand, exports);
var _interfaces = require("./pagination/Interfaces");
parcelHelpers.exportAll(_interfaces, exports);
var _index = require("./models/index");
parcelHelpers.exportAll(_index, exports);

},{"./CognitoIdentityClient":"1Nf7t","./CognitoIdentity":"7p0Bm","./commands/CreateIdentityPoolCommand":"6cRlb","./commands/DeleteIdentitiesCommand":"feHXf","./commands/DeleteIdentityPoolCommand":"2BSd5","./commands/DescribeIdentityCommand":"bvdzi","./commands/DescribeIdentityPoolCommand":"fH5Li","./commands/GetCredentialsForIdentityCommand":"hQK33","./commands/GetIdCommand":"4yuUU","./commands/GetIdentityPoolRolesCommand":"4JFs7","./commands/GetOpenIdTokenCommand":"hSuZN","./commands/GetOpenIdTokenForDeveloperIdentityCommand":"4EA8n","./commands/ListIdentitiesCommand":"X0a7D","./commands/ListIdentityPoolsCommand":"67GkQ","./pagination/ListIdentityPoolsPaginator":"4vhX5","./commands/ListTagsForResourceCommand":"72e2u","./commands/LookupDeveloperIdentityCommand":"4QUGD","./commands/MergeDeveloperIdentitiesCommand":"1a82C","./commands/SetIdentityPoolRolesCommand":"5AF9n","./commands/TagResourceCommand":"dTzMp","./commands/UnlinkDeveloperIdentityCommand":"cps4w","./commands/UnlinkIdentityCommand":"7bFwt","./commands/UntagResourceCommand":"dqfrd","./commands/UpdateIdentityPoolCommand":"khfzc","./pagination/Interfaces":"jXKli","./models/index":"8ftZ2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1Nf7t":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CognitoIdentityClient", ()=>CognitoIdentityClient);
var _tslib = require("tslib");
var _runtimeConfig = require("./runtimeConfig");
var _configResolver = require("@aws-sdk/config-resolver");
var _middlewareContentLength = require("@aws-sdk/middleware-content-length");
var _middlewareHostHeader = require("@aws-sdk/middleware-host-header");
var _middlewareLogger = require("@aws-sdk/middleware-logger");
var _middlewareRetry = require("@aws-sdk/middleware-retry");
var _middlewareSigning = require("@aws-sdk/middleware-signing");
var _middlewareUserAgent = require("@aws-sdk/middleware-user-agent");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <fullname>Amazon Cognito Federated Identities</fullname>
 *          <p>Amazon Cognito Federated Identities is a web service that delivers scoped temporary
 *          credentials to mobile devices and other untrusted environments. It uniquely identifies a
 *          device and supplies the user with a consistent identity over the lifetime of an
 *          application.</p>
 *          <p>Using Amazon Cognito Federated Identities, you can enable authentication with one or
 *          more third-party identity providers (Facebook, Google, or Login with Amazon) or an Amazon
 *          Cognito user pool, and you can also choose to support unauthenticated access from your app.
 *          Cognito delivers a unique identifier for each user and acts as an OpenID token provider
 *          trusted by AWS Security Token Service (STS) to access temporary, limited-privilege AWS
 *          credentials.</p>
 *          <p>For a description of the authentication flow from the Amazon Cognito Developer Guide
 *          see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/authentication-flow.html">Authentication Flow</a>.</p>
 *          <p>For more information see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-identity.html">Amazon Cognito Federated Identities</a>.</p>
 */ var CognitoIdentityClient = /** @class */ function(_super) {
    (0, _tslib.__extends)(CognitoIdentityClient, _super);
    function CognitoIdentityClient(configuration) {
        var _this = this;
        var _config_0 = (0, _tslib.__assign)((0, _tslib.__assign)({}, (0, _runtimeConfig.ClientDefaultValues)), configuration);
        var _config_1 = (0, _configResolver.resolveRegionConfig)(_config_0);
        var _config_2 = (0, _configResolver.resolveEndpointsConfig)(_config_1);
        var _config_3 = (0, _middlewareSigning.resolveAwsAuthConfig)(_config_2);
        var _config_4 = (0, _middlewareRetry.resolveRetryConfig)(_config_3);
        var _config_5 = (0, _middlewareHostHeader.resolveHostHeaderConfig)(_config_4);
        var _config_6 = (0, _middlewareUserAgent.resolveUserAgentConfig)(_config_5);
        _this = _super.call(this, _config_6) || this;
        _this.config = _config_6;
        _this.middlewareStack.use((0, _middlewareRetry.getRetryPlugin)(_this.config));
        _this.middlewareStack.use((0, _middlewareContentLength.getContentLengthPlugin)(_this.config));
        _this.middlewareStack.use((0, _middlewareHostHeader.getHostHeaderPlugin)(_this.config));
        _this.middlewareStack.use((0, _middlewareLogger.getLoggerPlugin)(_this.config));
        _this.middlewareStack.use((0, _middlewareUserAgent.getUserAgentPlugin)(_this.config));
        return _this;
    }
    CognitoIdentityClient.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
    };
    return CognitoIdentityClient;
}((0, _smithyClient.Client));

},{"tslib":"lRdW5","./runtimeConfig":"eLuT7","@aws-sdk/config-resolver":"cd0W3","@aws-sdk/middleware-content-length":"kUr8i","@aws-sdk/middleware-host-header":"fDojh","@aws-sdk/middleware-logger":"b6LDm","@aws-sdk/middleware-retry":"hgahj","@aws-sdk/middleware-signing":"7xrR2","@aws-sdk/middleware-user-agent":"7Khhc","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eLuT7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ClientDefaultValues", ()=>ClientDefaultValues);
var _tslib = require("tslib");
var _packageJson = require("./package.json");
var _packageJsonDefault = parcelHelpers.interopDefault(_packageJson);
var _sha256Browser = require("@aws-crypto/sha256-browser");
var _fetchHttpHandler = require("@aws-sdk/fetch-http-handler");
var _invalidDependency = require("@aws-sdk/invalid-dependency");
var _middlewareRetry = require("@aws-sdk/middleware-retry");
var _utilBase64Browser = require("@aws-sdk/util-base64-browser");
var _utilBodyLengthBrowser = require("@aws-sdk/util-body-length-browser");
var _utilUserAgentBrowser = require("@aws-sdk/util-user-agent-browser");
var _utilUtf8Browser = require("@aws-sdk/util-utf8-browser");
var _runtimeConfigShared = require("./runtimeConfig.shared");
var ClientDefaultValues = (0, _tslib.__assign)((0, _tslib.__assign)({}, (0, _runtimeConfigShared.ClientSharedValues)), {
    runtime: "browser",
    base64Decoder: (0, _utilBase64Browser.fromBase64),
    base64Encoder: (0, _utilBase64Browser.toBase64),
    bodyLengthChecker: (0, _utilBodyLengthBrowser.calculateBodyLength),
    credentialDefaultProvider: function(_) {
        return function() {
            return Promise.reject(new Error("Credential is missing"));
        };
    },
    defaultUserAgentProvider: (0, _utilUserAgentBrowser.defaultUserAgent)({
        serviceId: (0, _runtimeConfigShared.ClientSharedValues).serviceId,
        clientVersion: (0, _packageJsonDefault.default).version
    }),
    maxAttempts: (0, _middlewareRetry.DEFAULT_MAX_ATTEMPTS),
    region: (0, _invalidDependency.invalidProvider)("Region is missing"),
    requestHandler: new (0, _fetchHttpHandler.FetchHttpHandler)(),
    sha256: (0, _sha256Browser.Sha256),
    streamCollector: (0, _fetchHttpHandler.streamCollector),
    utf8Decoder: (0, _utilUtf8Browser.fromUtf8),
    utf8Encoder: (0, _utilUtf8Browser.toUtf8)
});

},{"tslib":"lRdW5","./package.json":"dglBI","@aws-crypto/sha256-browser":"h7M77","@aws-sdk/fetch-http-handler":"atrsn","@aws-sdk/invalid-dependency":"1ry3q","@aws-sdk/middleware-retry":"hgahj","@aws-sdk/util-base64-browser":"aNXKr","@aws-sdk/util-body-length-browser":"kyGUn","@aws-sdk/util-user-agent-browser":"26YQ4","@aws-sdk/util-utf8-browser":"aUJSS","./runtimeConfig.shared":"14XAX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dglBI":[function(require,module,exports) {
module.exports = JSON.parse('{"name":"@aws-sdk/client-cognito-identity","description":"AWS SDK for JavaScript Cognito Identity Client for Node.js, Browser and React Native","version":"3.6.1","scripts":{"clean":"yarn remove-definitions && yarn remove-dist && yarn remove-documentation","build-documentation":"yarn remove-documentation && typedoc ./","prepublishOnly":"yarn build","pretest":"yarn build:cjs","remove-definitions":"rimraf ./types","remove-dist":"rimraf ./dist","remove-documentation":"rimraf ./docs","test:unit":"mocha **/cjs/**/*.spec.js","test:e2e":"mocha **/cjs/**/*.ispec.js && karma start karma.conf.js","test":"yarn test:unit","build:cjs":"tsc -p tsconfig.json","build:es":"tsc -p tsconfig.es.json","build":"yarn build:cjs && yarn build:es","postbuild":"downlevel-dts types types/ts3.4"},"main":"./dist/cjs/index.js","types":"./types/index.d.ts","module":"./dist/es/index.js","browser":{"./runtimeConfig":"./runtimeConfig.browser"},"react-native":{"./runtimeConfig":"./runtimeConfig.native"},"sideEffects":false,"dependencies":{"@aws-crypto/sha256-browser":"^1.0.0","@aws-crypto/sha256-js":"^1.0.0","@aws-sdk/config-resolver":"3.6.1","@aws-sdk/credential-provider-node":"3.6.1","@aws-sdk/fetch-http-handler":"3.6.1","@aws-sdk/hash-node":"3.6.1","@aws-sdk/invalid-dependency":"3.6.1","@aws-sdk/middleware-content-length":"3.6.1","@aws-sdk/middleware-host-header":"3.6.1","@aws-sdk/middleware-logger":"3.6.1","@aws-sdk/middleware-retry":"3.6.1","@aws-sdk/middleware-serde":"3.6.1","@aws-sdk/middleware-signing":"3.6.1","@aws-sdk/middleware-stack":"3.6.1","@aws-sdk/middleware-user-agent":"3.6.1","@aws-sdk/node-config-provider":"3.6.1","@aws-sdk/node-http-handler":"3.6.1","@aws-sdk/protocol-http":"3.6.1","@aws-sdk/smithy-client":"3.6.1","@aws-sdk/types":"3.6.1","@aws-sdk/url-parser":"3.6.1","@aws-sdk/url-parser-native":"3.6.1","@aws-sdk/util-base64-browser":"3.6.1","@aws-sdk/util-base64-node":"3.6.1","@aws-sdk/util-body-length-browser":"3.6.1","@aws-sdk/util-body-length-node":"3.6.1","@aws-sdk/util-user-agent-browser":"3.6.1","@aws-sdk/util-user-agent-node":"3.6.1","@aws-sdk/util-utf8-browser":"3.6.1","@aws-sdk/util-utf8-node":"3.6.1","tslib":"^2.0.0"},"devDependencies":{"@aws-sdk/client-documentation-generator":"3.6.1","@aws-sdk/client-iam":"3.6.1","@types/chai":"^4.2.11","@types/mocha":"^8.0.4","@types/node":"^12.7.5","downlevel-dts":"0.7.0","jest":"^26.1.0","rimraf":"^3.0.0","typedoc":"^0.19.2","typescript":"~4.1.2"},"engines":{"node":">=10.0.0"},"typesVersions":{"<4.0":{"types/*":["types/ts3.4/*"]}},"author":{"name":"AWS SDK for JavaScript Team","url":"https://aws.amazon.com/javascript/"},"license":"Apache-2.0","homepage":"https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-cognito-identity","repository":{"type":"git","url":"https://github.com/aws/aws-sdk-js-v3.git","directory":"clients/client-cognito-identity"}}');

},{}],"14XAX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ClientSharedValues", ()=>ClientSharedValues);
var _endpoints = require("./endpoints");
var _urlParser = require("@aws-sdk/url-parser");
var ClientSharedValues = {
    apiVersion: "2014-06-30",
    disableHostPrefix: false,
    logger: {},
    regionInfoProvider: (0, _endpoints.defaultRegionInfoProvider),
    serviceId: "Cognito Identity",
    urlParser: (0, _urlParser.parseUrl)
};

},{"./endpoints":"4lxDw","@aws-sdk/url-parser":"aIEzl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4lxDw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "defaultRegionInfoProvider", ()=>defaultRegionInfoProvider);
var _tslib = require("tslib");
// Partition default templates
var AWS_TEMPLATE = "cognito-identity.{region}.amazonaws.com";
var AWS_CN_TEMPLATE = "cognito-identity.{region}.amazonaws.com.cn";
var AWS_ISO_TEMPLATE = "cognito-identity.{region}.c2s.ic.gov";
var AWS_ISO_B_TEMPLATE = "cognito-identity.{region}.sc2s.sgov.gov";
var AWS_US_GOV_TEMPLATE = "cognito-identity.{region}.amazonaws.com";
// Partition regions
var AWS_REGIONS = new Set([
    "af-south-1",
    "ap-east-1",
    "ap-northeast-1",
    "ap-northeast-2",
    "ap-south-1",
    "ap-southeast-1",
    "ap-southeast-2",
    "ca-central-1",
    "eu-central-1",
    "eu-north-1",
    "eu-south-1",
    "eu-west-1",
    "eu-west-2",
    "eu-west-3",
    "me-south-1",
    "sa-east-1",
    "us-east-1",
    "us-east-2",
    "us-west-1",
    "us-west-2"
]);
var AWS_CN_REGIONS = new Set([
    "cn-north-1",
    "cn-northwest-1"
]);
var AWS_ISO_REGIONS = new Set([
    "us-iso-east-1"
]);
var AWS_ISO_B_REGIONS = new Set([
    "us-isob-east-1"
]);
var AWS_US_GOV_REGIONS = new Set([
    "us-gov-east-1",
    "us-gov-west-1"
]);
var defaultRegionInfoProvider = function(region, options) {
    var regionInfo = undefined;
    switch(region){
        // First, try to match exact region names.
        case "ap-northeast-1":
            regionInfo = {
                hostname: "cognito-identity.ap-northeast-1.amazonaws.com",
                partition: "aws"
            };
            break;
        case "ap-northeast-2":
            regionInfo = {
                hostname: "cognito-identity.ap-northeast-2.amazonaws.com",
                partition: "aws"
            };
            break;
        case "ap-south-1":
            regionInfo = {
                hostname: "cognito-identity.ap-south-1.amazonaws.com",
                partition: "aws"
            };
            break;
        case "ap-southeast-1":
            regionInfo = {
                hostname: "cognito-identity.ap-southeast-1.amazonaws.com",
                partition: "aws"
            };
            break;
        case "ap-southeast-2":
            regionInfo = {
                hostname: "cognito-identity.ap-southeast-2.amazonaws.com",
                partition: "aws"
            };
            break;
        case "ca-central-1":
            regionInfo = {
                hostname: "cognito-identity.ca-central-1.amazonaws.com",
                partition: "aws"
            };
            break;
        case "cn-north-1":
            regionInfo = {
                hostname: "cognito-identity.cn-north-1.amazonaws.com.cn",
                partition: "aws-cn"
            };
            break;
        case "eu-central-1":
            regionInfo = {
                hostname: "cognito-identity.eu-central-1.amazonaws.com",
                partition: "aws"
            };
            break;
        case "eu-north-1":
            regionInfo = {
                hostname: "cognito-identity.eu-north-1.amazonaws.com",
                partition: "aws"
            };
            break;
        case "eu-west-1":
            regionInfo = {
                hostname: "cognito-identity.eu-west-1.amazonaws.com",
                partition: "aws"
            };
            break;
        case "eu-west-2":
            regionInfo = {
                hostname: "cognito-identity.eu-west-2.amazonaws.com",
                partition: "aws"
            };
            break;
        case "eu-west-3":
            regionInfo = {
                hostname: "cognito-identity.eu-west-3.amazonaws.com",
                partition: "aws"
            };
            break;
        case "fips-us-east-1":
            regionInfo = {
                hostname: "cognito-identity-fips.us-east-1.amazonaws.com",
                partition: "aws",
                signingRegion: "us-east-1"
            };
            break;
        case "fips-us-east-2":
            regionInfo = {
                hostname: "cognito-identity-fips.us-east-2.amazonaws.com",
                partition: "aws",
                signingRegion: "us-east-2"
            };
            break;
        case "fips-us-gov-west-1":
            regionInfo = {
                hostname: "cognito-identity-fips.us-gov-west-1.amazonaws.com",
                partition: "aws-us-gov",
                signingRegion: "us-gov-west-1"
            };
            break;
        case "fips-us-west-2":
            regionInfo = {
                hostname: "cognito-identity-fips.us-west-2.amazonaws.com",
                partition: "aws",
                signingRegion: "us-west-2"
            };
            break;
        case "sa-east-1":
            regionInfo = {
                hostname: "cognito-identity.sa-east-1.amazonaws.com",
                partition: "aws"
            };
            break;
        case "us-east-1":
            regionInfo = {
                hostname: "cognito-identity.us-east-1.amazonaws.com",
                partition: "aws"
            };
            break;
        case "us-east-2":
            regionInfo = {
                hostname: "cognito-identity.us-east-2.amazonaws.com",
                partition: "aws"
            };
            break;
        case "us-gov-west-1":
            regionInfo = {
                hostname: "cognito-identity.us-gov-west-1.amazonaws.com",
                partition: "aws-us-gov"
            };
            break;
        case "us-west-1":
            regionInfo = {
                hostname: "cognito-identity.us-west-1.amazonaws.com",
                partition: "aws"
            };
            break;
        case "us-west-2":
            regionInfo = {
                hostname: "cognito-identity.us-west-2.amazonaws.com",
                partition: "aws"
            };
            break;
        // Next, try to match partition endpoints.
        default:
            if (AWS_REGIONS.has(region)) regionInfo = {
                hostname: AWS_TEMPLATE.replace("{region}", region),
                partition: "aws"
            };
            if (AWS_CN_REGIONS.has(region)) regionInfo = {
                hostname: AWS_CN_TEMPLATE.replace("{region}", region),
                partition: "aws-cn"
            };
            if (AWS_ISO_REGIONS.has(region)) regionInfo = {
                hostname: AWS_ISO_TEMPLATE.replace("{region}", region),
                partition: "aws-iso"
            };
            if (AWS_ISO_B_REGIONS.has(region)) regionInfo = {
                hostname: AWS_ISO_B_TEMPLATE.replace("{region}", region),
                partition: "aws-iso-b"
            };
            if (AWS_US_GOV_REGIONS.has(region)) regionInfo = {
                hostname: AWS_US_GOV_TEMPLATE.replace("{region}", region),
                partition: "aws-us-gov"
            };
            // Finally, assume it's an AWS partition endpoint.
            if (regionInfo === undefined) regionInfo = {
                hostname: AWS_TEMPLATE.replace("{region}", region),
                partition: "aws"
            };
    }
    return Promise.resolve((0, _tslib.__assign)({
        signingService: "cognito-identity"
    }, regionInfo));
};

},{"tslib":"lRdW5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7p0Bm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CognitoIdentity", ()=>CognitoIdentity);
var _tslib = require("tslib");
var _cognitoIdentityClient = require("./CognitoIdentityClient");
var _createIdentityPoolCommand = require("./commands/CreateIdentityPoolCommand");
var _deleteIdentitiesCommand = require("./commands/DeleteIdentitiesCommand");
var _deleteIdentityPoolCommand = require("./commands/DeleteIdentityPoolCommand");
var _describeIdentityCommand = require("./commands/DescribeIdentityCommand");
var _describeIdentityPoolCommand = require("./commands/DescribeIdentityPoolCommand");
var _getCredentialsForIdentityCommand = require("./commands/GetCredentialsForIdentityCommand");
var _getIdCommand = require("./commands/GetIdCommand");
var _getIdentityPoolRolesCommand = require("./commands/GetIdentityPoolRolesCommand");
var _getOpenIdTokenCommand = require("./commands/GetOpenIdTokenCommand");
var _getOpenIdTokenForDeveloperIdentityCommand = require("./commands/GetOpenIdTokenForDeveloperIdentityCommand");
var _listIdentitiesCommand = require("./commands/ListIdentitiesCommand");
var _listIdentityPoolsCommand = require("./commands/ListIdentityPoolsCommand");
var _listTagsForResourceCommand = require("./commands/ListTagsForResourceCommand");
var _lookupDeveloperIdentityCommand = require("./commands/LookupDeveloperIdentityCommand");
var _mergeDeveloperIdentitiesCommand = require("./commands/MergeDeveloperIdentitiesCommand");
var _setIdentityPoolRolesCommand = require("./commands/SetIdentityPoolRolesCommand");
var _tagResourceCommand = require("./commands/TagResourceCommand");
var _unlinkDeveloperIdentityCommand = require("./commands/UnlinkDeveloperIdentityCommand");
var _unlinkIdentityCommand = require("./commands/UnlinkIdentityCommand");
var _untagResourceCommand = require("./commands/UntagResourceCommand");
var _updateIdentityPoolCommand = require("./commands/UpdateIdentityPoolCommand");
/**
 * <fullname>Amazon Cognito Federated Identities</fullname>
 *          <p>Amazon Cognito Federated Identities is a web service that delivers scoped temporary
 *          credentials to mobile devices and other untrusted environments. It uniquely identifies a
 *          device and supplies the user with a consistent identity over the lifetime of an
 *          application.</p>
 *          <p>Using Amazon Cognito Federated Identities, you can enable authentication with one or
 *          more third-party identity providers (Facebook, Google, or Login with Amazon) or an Amazon
 *          Cognito user pool, and you can also choose to support unauthenticated access from your app.
 *          Cognito delivers a unique identifier for each user and acts as an OpenID token provider
 *          trusted by AWS Security Token Service (STS) to access temporary, limited-privilege AWS
 *          credentials.</p>
 *          <p>For a description of the authentication flow from the Amazon Cognito Developer Guide
 *          see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/authentication-flow.html">Authentication Flow</a>.</p>
 *          <p>For more information see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-identity.html">Amazon Cognito Federated Identities</a>.</p>
 */ var CognitoIdentity = /** @class */ function(_super) {
    (0, _tslib.__extends)(CognitoIdentity, _super);
    function CognitoIdentity() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CognitoIdentity.prototype.createIdentityPool = function(args, optionsOrCb, cb) {
        var command = new (0, _createIdentityPoolCommand.CreateIdentityPoolCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CognitoIdentity.prototype.deleteIdentities = function(args, optionsOrCb, cb) {
        var command = new (0, _deleteIdentitiesCommand.DeleteIdentitiesCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CognitoIdentity.prototype.deleteIdentityPool = function(args, optionsOrCb, cb) {
        var command = new (0, _deleteIdentityPoolCommand.DeleteIdentityPoolCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CognitoIdentity.prototype.describeIdentity = function(args, optionsOrCb, cb) {
        var command = new (0, _describeIdentityCommand.DescribeIdentityCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CognitoIdentity.prototype.describeIdentityPool = function(args, optionsOrCb, cb) {
        var command = new (0, _describeIdentityPoolCommand.DescribeIdentityPoolCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CognitoIdentity.prototype.getCredentialsForIdentity = function(args, optionsOrCb, cb) {
        var command = new (0, _getCredentialsForIdentityCommand.GetCredentialsForIdentityCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CognitoIdentity.prototype.getId = function(args, optionsOrCb, cb) {
        var command = new (0, _getIdCommand.GetIdCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CognitoIdentity.prototype.getIdentityPoolRoles = function(args, optionsOrCb, cb) {
        var command = new (0, _getIdentityPoolRolesCommand.GetIdentityPoolRolesCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CognitoIdentity.prototype.getOpenIdToken = function(args, optionsOrCb, cb) {
        var command = new (0, _getOpenIdTokenCommand.GetOpenIdTokenCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CognitoIdentity.prototype.getOpenIdTokenForDeveloperIdentity = function(args, optionsOrCb, cb) {
        var command = new (0, _getOpenIdTokenForDeveloperIdentityCommand.GetOpenIdTokenForDeveloperIdentityCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CognitoIdentity.prototype.listIdentities = function(args, optionsOrCb, cb) {
        var command = new (0, _listIdentitiesCommand.ListIdentitiesCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CognitoIdentity.prototype.listIdentityPools = function(args, optionsOrCb, cb) {
        var command = new (0, _listIdentityPoolsCommand.ListIdentityPoolsCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CognitoIdentity.prototype.listTagsForResource = function(args, optionsOrCb, cb) {
        var command = new (0, _listTagsForResourceCommand.ListTagsForResourceCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CognitoIdentity.prototype.lookupDeveloperIdentity = function(args, optionsOrCb, cb) {
        var command = new (0, _lookupDeveloperIdentityCommand.LookupDeveloperIdentityCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CognitoIdentity.prototype.mergeDeveloperIdentities = function(args, optionsOrCb, cb) {
        var command = new (0, _mergeDeveloperIdentitiesCommand.MergeDeveloperIdentitiesCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CognitoIdentity.prototype.setIdentityPoolRoles = function(args, optionsOrCb, cb) {
        var command = new (0, _setIdentityPoolRolesCommand.SetIdentityPoolRolesCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CognitoIdentity.prototype.tagResource = function(args, optionsOrCb, cb) {
        var command = new (0, _tagResourceCommand.TagResourceCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CognitoIdentity.prototype.unlinkDeveloperIdentity = function(args, optionsOrCb, cb) {
        var command = new (0, _unlinkDeveloperIdentityCommand.UnlinkDeveloperIdentityCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CognitoIdentity.prototype.unlinkIdentity = function(args, optionsOrCb, cb) {
        var command = new (0, _unlinkIdentityCommand.UnlinkIdentityCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CognitoIdentity.prototype.untagResource = function(args, optionsOrCb, cb) {
        var command = new (0, _untagResourceCommand.UntagResourceCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    CognitoIdentity.prototype.updateIdentityPool = function(args, optionsOrCb, cb) {
        var command = new (0, _updateIdentityPoolCommand.UpdateIdentityPoolCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    };
    return CognitoIdentity;
}((0, _cognitoIdentityClient.CognitoIdentityClient));

},{"tslib":"lRdW5","./CognitoIdentityClient":"1Nf7t","./commands/CreateIdentityPoolCommand":"6cRlb","./commands/DeleteIdentitiesCommand":"feHXf","./commands/DeleteIdentityPoolCommand":"2BSd5","./commands/DescribeIdentityCommand":"bvdzi","./commands/DescribeIdentityPoolCommand":"fH5Li","./commands/GetCredentialsForIdentityCommand":"hQK33","./commands/GetIdCommand":"4yuUU","./commands/GetIdentityPoolRolesCommand":"4JFs7","./commands/GetOpenIdTokenCommand":"hSuZN","./commands/GetOpenIdTokenForDeveloperIdentityCommand":"4EA8n","./commands/ListIdentitiesCommand":"X0a7D","./commands/ListIdentityPoolsCommand":"67GkQ","./commands/ListTagsForResourceCommand":"72e2u","./commands/LookupDeveloperIdentityCommand":"4QUGD","./commands/MergeDeveloperIdentitiesCommand":"1a82C","./commands/SetIdentityPoolRolesCommand":"5AF9n","./commands/TagResourceCommand":"dTzMp","./commands/UnlinkDeveloperIdentityCommand":"cps4w","./commands/UnlinkIdentityCommand":"7bFwt","./commands/UntagResourceCommand":"dqfrd","./commands/UpdateIdentityPoolCommand":"khfzc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6cRlb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CreateIdentityPoolCommand", ()=>CreateIdentityPoolCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _middlewareSigning = require("@aws-sdk/middleware-signing");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Creates a new identity pool. The identity pool is a store of user identity
 *          information that is specific to your AWS account. The keys for <code>SupportedLoginProviders</code> are as follows:</p>
 *
 *          <ul>
 *             <li>
 *                <p>Facebook: <code>graph.facebook.com</code>
 *                </p>
 *             </li>
 *             <li>
 *                <p>Google: <code>accounts.google.com</code>
 *                </p>
 *             </li>
 *             <li>
 *                <p>Amazon: <code>www.amazon.com</code>
 *                </p>
 *             </li>
 *             <li>
 *                <p>Twitter: <code>api.twitter.com</code>
 *                </p>
 *             </li>
 *             <li>
 *                <p>Digits: <code>www.digits.com</code>
 *                </p>
 *             </li>
 *          </ul>
 *
 *          <p>You must use AWS Developer credentials to call this API.</p>
 */ var CreateIdentityPoolCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(CreateIdentityPoolCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function CreateIdentityPoolCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ CreateIdentityPoolCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareSigning.getAwsAuthPlugin)(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CognitoIdentityClient";
        var commandName = "CreateIdentityPoolCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.CreateIdentityPoolInput).filterSensitiveLog,
            outputFilterSensitiveLog: (0, _models0.IdentityPool).filterSensitiveLog
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    CreateIdentityPoolCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1CreateIdentityPoolCommand)(input, context);
    };
    CreateIdentityPoolCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1CreateIdentityPoolCommand)(output, context);
    };
    return CreateIdentityPoolCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"k79k4","../protocols/Aws_json1_1":"3sr6F","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/middleware-signing":"7xrR2","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"k79k4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AmbiguousRoleResolutionType", ()=>AmbiguousRoleResolutionType);
parcelHelpers.export(exports, "CognitoIdentityProvider", ()=>CognitoIdentityProvider);
parcelHelpers.export(exports, "CreateIdentityPoolInput", ()=>CreateIdentityPoolInput);
parcelHelpers.export(exports, "IdentityPool", ()=>IdentityPool);
parcelHelpers.export(exports, "InternalErrorException", ()=>InternalErrorException);
parcelHelpers.export(exports, "InvalidParameterException", ()=>InvalidParameterException);
parcelHelpers.export(exports, "LimitExceededException", ()=>LimitExceededException);
parcelHelpers.export(exports, "NotAuthorizedException", ()=>NotAuthorizedException);
parcelHelpers.export(exports, "ResourceConflictException", ()=>ResourceConflictException);
parcelHelpers.export(exports, "TooManyRequestsException", ()=>TooManyRequestsException);
parcelHelpers.export(exports, "DeleteIdentitiesInput", ()=>DeleteIdentitiesInput);
parcelHelpers.export(exports, "ErrorCode", ()=>ErrorCode);
parcelHelpers.export(exports, "UnprocessedIdentityId", ()=>UnprocessedIdentityId);
parcelHelpers.export(exports, "DeleteIdentitiesResponse", ()=>DeleteIdentitiesResponse);
parcelHelpers.export(exports, "DeleteIdentityPoolInput", ()=>DeleteIdentityPoolInput);
parcelHelpers.export(exports, "ResourceNotFoundException", ()=>ResourceNotFoundException);
parcelHelpers.export(exports, "DescribeIdentityInput", ()=>DescribeIdentityInput);
parcelHelpers.export(exports, "IdentityDescription", ()=>IdentityDescription);
parcelHelpers.export(exports, "DescribeIdentityPoolInput", ()=>DescribeIdentityPoolInput);
parcelHelpers.export(exports, "ExternalServiceException", ()=>ExternalServiceException);
parcelHelpers.export(exports, "GetCredentialsForIdentityInput", ()=>GetCredentialsForIdentityInput);
parcelHelpers.export(exports, "Credentials", ()=>Credentials);
parcelHelpers.export(exports, "GetCredentialsForIdentityResponse", ()=>GetCredentialsForIdentityResponse);
parcelHelpers.export(exports, "InvalidIdentityPoolConfigurationException", ()=>InvalidIdentityPoolConfigurationException);
parcelHelpers.export(exports, "GetIdInput", ()=>GetIdInput);
parcelHelpers.export(exports, "GetIdResponse", ()=>GetIdResponse);
parcelHelpers.export(exports, "GetIdentityPoolRolesInput", ()=>GetIdentityPoolRolesInput);
parcelHelpers.export(exports, "MappingRuleMatchType", ()=>MappingRuleMatchType);
parcelHelpers.export(exports, "MappingRule", ()=>MappingRule);
parcelHelpers.export(exports, "RulesConfigurationType", ()=>RulesConfigurationType);
parcelHelpers.export(exports, "RoleMappingType", ()=>RoleMappingType);
parcelHelpers.export(exports, "RoleMapping", ()=>RoleMapping);
parcelHelpers.export(exports, "GetIdentityPoolRolesResponse", ()=>GetIdentityPoolRolesResponse);
parcelHelpers.export(exports, "GetOpenIdTokenInput", ()=>GetOpenIdTokenInput);
parcelHelpers.export(exports, "GetOpenIdTokenResponse", ()=>GetOpenIdTokenResponse);
parcelHelpers.export(exports, "DeveloperUserAlreadyRegisteredException", ()=>DeveloperUserAlreadyRegisteredException);
parcelHelpers.export(exports, "GetOpenIdTokenForDeveloperIdentityInput", ()=>GetOpenIdTokenForDeveloperIdentityInput);
parcelHelpers.export(exports, "GetOpenIdTokenForDeveloperIdentityResponse", ()=>GetOpenIdTokenForDeveloperIdentityResponse);
parcelHelpers.export(exports, "ListIdentitiesInput", ()=>ListIdentitiesInput);
parcelHelpers.export(exports, "ListIdentitiesResponse", ()=>ListIdentitiesResponse);
parcelHelpers.export(exports, "ListIdentityPoolsInput", ()=>ListIdentityPoolsInput);
parcelHelpers.export(exports, "IdentityPoolShortDescription", ()=>IdentityPoolShortDescription);
parcelHelpers.export(exports, "ListIdentityPoolsResponse", ()=>ListIdentityPoolsResponse);
parcelHelpers.export(exports, "ListTagsForResourceInput", ()=>ListTagsForResourceInput);
parcelHelpers.export(exports, "ListTagsForResourceResponse", ()=>ListTagsForResourceResponse);
parcelHelpers.export(exports, "LookupDeveloperIdentityInput", ()=>LookupDeveloperIdentityInput);
parcelHelpers.export(exports, "LookupDeveloperIdentityResponse", ()=>LookupDeveloperIdentityResponse);
parcelHelpers.export(exports, "MergeDeveloperIdentitiesInput", ()=>MergeDeveloperIdentitiesInput);
parcelHelpers.export(exports, "MergeDeveloperIdentitiesResponse", ()=>MergeDeveloperIdentitiesResponse);
parcelHelpers.export(exports, "ConcurrentModificationException", ()=>ConcurrentModificationException);
parcelHelpers.export(exports, "SetIdentityPoolRolesInput", ()=>SetIdentityPoolRolesInput);
parcelHelpers.export(exports, "TagResourceInput", ()=>TagResourceInput);
parcelHelpers.export(exports, "TagResourceResponse", ()=>TagResourceResponse);
parcelHelpers.export(exports, "UnlinkDeveloperIdentityInput", ()=>UnlinkDeveloperIdentityInput);
parcelHelpers.export(exports, "UnlinkIdentityInput", ()=>UnlinkIdentityInput);
parcelHelpers.export(exports, "UntagResourceInput", ()=>UntagResourceInput);
parcelHelpers.export(exports, "UntagResourceResponse", ()=>UntagResourceResponse);
var _tslib = require("tslib");
var AmbiguousRoleResolutionType;
(function(AmbiguousRoleResolutionType) {
    AmbiguousRoleResolutionType["AUTHENTICATED_ROLE"] = "AuthenticatedRole";
    AmbiguousRoleResolutionType["DENY"] = "Deny";
})(AmbiguousRoleResolutionType || (AmbiguousRoleResolutionType = {}));
var CognitoIdentityProvider;
(function(CognitoIdentityProvider) {
    CognitoIdentityProvider.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(CognitoIdentityProvider || (CognitoIdentityProvider = {}));
var CreateIdentityPoolInput;
(function(CreateIdentityPoolInput) {
    CreateIdentityPoolInput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(CreateIdentityPoolInput || (CreateIdentityPoolInput = {}));
var IdentityPool;
(function(IdentityPool) {
    IdentityPool.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(IdentityPool || (IdentityPool = {}));
var InternalErrorException;
(function(InternalErrorException) {
    InternalErrorException.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(InternalErrorException || (InternalErrorException = {}));
var InvalidParameterException;
(function(InvalidParameterException) {
    InvalidParameterException.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(InvalidParameterException || (InvalidParameterException = {}));
var LimitExceededException;
(function(LimitExceededException) {
    LimitExceededException.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(LimitExceededException || (LimitExceededException = {}));
var NotAuthorizedException;
(function(NotAuthorizedException) {
    NotAuthorizedException.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(NotAuthorizedException || (NotAuthorizedException = {}));
var ResourceConflictException;
(function(ResourceConflictException) {
    ResourceConflictException.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ResourceConflictException || (ResourceConflictException = {}));
var TooManyRequestsException;
(function(TooManyRequestsException) {
    TooManyRequestsException.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(TooManyRequestsException || (TooManyRequestsException = {}));
var DeleteIdentitiesInput;
(function(DeleteIdentitiesInput) {
    DeleteIdentitiesInput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DeleteIdentitiesInput || (DeleteIdentitiesInput = {}));
var ErrorCode;
(function(ErrorCode) {
    ErrorCode["ACCESS_DENIED"] = "AccessDenied";
    ErrorCode["INTERNAL_SERVER_ERROR"] = "InternalServerError";
})(ErrorCode || (ErrorCode = {}));
var UnprocessedIdentityId;
(function(UnprocessedIdentityId) {
    UnprocessedIdentityId.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(UnprocessedIdentityId || (UnprocessedIdentityId = {}));
var DeleteIdentitiesResponse;
(function(DeleteIdentitiesResponse) {
    DeleteIdentitiesResponse.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DeleteIdentitiesResponse || (DeleteIdentitiesResponse = {}));
var DeleteIdentityPoolInput;
(function(DeleteIdentityPoolInput) {
    DeleteIdentityPoolInput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DeleteIdentityPoolInput || (DeleteIdentityPoolInput = {}));
var ResourceNotFoundException;
(function(ResourceNotFoundException) {
    ResourceNotFoundException.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ResourceNotFoundException || (ResourceNotFoundException = {}));
var DescribeIdentityInput;
(function(DescribeIdentityInput) {
    DescribeIdentityInput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DescribeIdentityInput || (DescribeIdentityInput = {}));
var IdentityDescription;
(function(IdentityDescription) {
    IdentityDescription.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(IdentityDescription || (IdentityDescription = {}));
var DescribeIdentityPoolInput;
(function(DescribeIdentityPoolInput) {
    DescribeIdentityPoolInput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DescribeIdentityPoolInput || (DescribeIdentityPoolInput = {}));
var ExternalServiceException;
(function(ExternalServiceException) {
    ExternalServiceException.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ExternalServiceException || (ExternalServiceException = {}));
var GetCredentialsForIdentityInput;
(function(GetCredentialsForIdentityInput) {
    GetCredentialsForIdentityInput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetCredentialsForIdentityInput || (GetCredentialsForIdentityInput = {}));
var Credentials;
(function(Credentials) {
    Credentials.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(Credentials || (Credentials = {}));
var GetCredentialsForIdentityResponse;
(function(GetCredentialsForIdentityResponse) {
    GetCredentialsForIdentityResponse.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetCredentialsForIdentityResponse || (GetCredentialsForIdentityResponse = {}));
var InvalidIdentityPoolConfigurationException;
(function(InvalidIdentityPoolConfigurationException) {
    InvalidIdentityPoolConfigurationException.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(InvalidIdentityPoolConfigurationException || (InvalidIdentityPoolConfigurationException = {}));
var GetIdInput;
(function(GetIdInput) {
    GetIdInput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetIdInput || (GetIdInput = {}));
var GetIdResponse;
(function(GetIdResponse) {
    GetIdResponse.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetIdResponse || (GetIdResponse = {}));
var GetIdentityPoolRolesInput;
(function(GetIdentityPoolRolesInput) {
    GetIdentityPoolRolesInput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetIdentityPoolRolesInput || (GetIdentityPoolRolesInput = {}));
var MappingRuleMatchType;
(function(MappingRuleMatchType) {
    MappingRuleMatchType["CONTAINS"] = "Contains";
    MappingRuleMatchType["EQUALS"] = "Equals";
    MappingRuleMatchType["NOT_EQUAL"] = "NotEqual";
    MappingRuleMatchType["STARTS_WITH"] = "StartsWith";
})(MappingRuleMatchType || (MappingRuleMatchType = {}));
var MappingRule;
(function(MappingRule) {
    MappingRule.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(MappingRule || (MappingRule = {}));
var RulesConfigurationType;
(function(RulesConfigurationType) {
    RulesConfigurationType.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(RulesConfigurationType || (RulesConfigurationType = {}));
var RoleMappingType;
(function(RoleMappingType) {
    RoleMappingType["RULES"] = "Rules";
    RoleMappingType["TOKEN"] = "Token";
})(RoleMappingType || (RoleMappingType = {}));
var RoleMapping;
(function(RoleMapping) {
    RoleMapping.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(RoleMapping || (RoleMapping = {}));
var GetIdentityPoolRolesResponse;
(function(GetIdentityPoolRolesResponse) {
    GetIdentityPoolRolesResponse.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetIdentityPoolRolesResponse || (GetIdentityPoolRolesResponse = {}));
var GetOpenIdTokenInput;
(function(GetOpenIdTokenInput) {
    GetOpenIdTokenInput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetOpenIdTokenInput || (GetOpenIdTokenInput = {}));
var GetOpenIdTokenResponse;
(function(GetOpenIdTokenResponse) {
    GetOpenIdTokenResponse.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetOpenIdTokenResponse || (GetOpenIdTokenResponse = {}));
var DeveloperUserAlreadyRegisteredException;
(function(DeveloperUserAlreadyRegisteredException) {
    DeveloperUserAlreadyRegisteredException.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DeveloperUserAlreadyRegisteredException || (DeveloperUserAlreadyRegisteredException = {}));
var GetOpenIdTokenForDeveloperIdentityInput;
(function(GetOpenIdTokenForDeveloperIdentityInput) {
    GetOpenIdTokenForDeveloperIdentityInput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetOpenIdTokenForDeveloperIdentityInput || (GetOpenIdTokenForDeveloperIdentityInput = {}));
var GetOpenIdTokenForDeveloperIdentityResponse;
(function(GetOpenIdTokenForDeveloperIdentityResponse) {
    GetOpenIdTokenForDeveloperIdentityResponse.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetOpenIdTokenForDeveloperIdentityResponse || (GetOpenIdTokenForDeveloperIdentityResponse = {}));
var ListIdentitiesInput;
(function(ListIdentitiesInput) {
    ListIdentitiesInput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ListIdentitiesInput || (ListIdentitiesInput = {}));
var ListIdentitiesResponse;
(function(ListIdentitiesResponse) {
    ListIdentitiesResponse.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ListIdentitiesResponse || (ListIdentitiesResponse = {}));
var ListIdentityPoolsInput;
(function(ListIdentityPoolsInput) {
    ListIdentityPoolsInput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ListIdentityPoolsInput || (ListIdentityPoolsInput = {}));
var IdentityPoolShortDescription;
(function(IdentityPoolShortDescription) {
    IdentityPoolShortDescription.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(IdentityPoolShortDescription || (IdentityPoolShortDescription = {}));
var ListIdentityPoolsResponse;
(function(ListIdentityPoolsResponse) {
    ListIdentityPoolsResponse.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ListIdentityPoolsResponse || (ListIdentityPoolsResponse = {}));
var ListTagsForResourceInput;
(function(ListTagsForResourceInput) {
    ListTagsForResourceInput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ListTagsForResourceInput || (ListTagsForResourceInput = {}));
var ListTagsForResourceResponse;
(function(ListTagsForResourceResponse) {
    ListTagsForResourceResponse.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ListTagsForResourceResponse || (ListTagsForResourceResponse = {}));
var LookupDeveloperIdentityInput;
(function(LookupDeveloperIdentityInput) {
    LookupDeveloperIdentityInput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(LookupDeveloperIdentityInput || (LookupDeveloperIdentityInput = {}));
var LookupDeveloperIdentityResponse;
(function(LookupDeveloperIdentityResponse) {
    LookupDeveloperIdentityResponse.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(LookupDeveloperIdentityResponse || (LookupDeveloperIdentityResponse = {}));
var MergeDeveloperIdentitiesInput;
(function(MergeDeveloperIdentitiesInput) {
    MergeDeveloperIdentitiesInput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(MergeDeveloperIdentitiesInput || (MergeDeveloperIdentitiesInput = {}));
var MergeDeveloperIdentitiesResponse;
(function(MergeDeveloperIdentitiesResponse) {
    MergeDeveloperIdentitiesResponse.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(MergeDeveloperIdentitiesResponse || (MergeDeveloperIdentitiesResponse = {}));
var ConcurrentModificationException;
(function(ConcurrentModificationException) {
    ConcurrentModificationException.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ConcurrentModificationException || (ConcurrentModificationException = {}));
var SetIdentityPoolRolesInput;
(function(SetIdentityPoolRolesInput) {
    SetIdentityPoolRolesInput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(SetIdentityPoolRolesInput || (SetIdentityPoolRolesInput = {}));
var TagResourceInput;
(function(TagResourceInput) {
    TagResourceInput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(TagResourceInput || (TagResourceInput = {}));
var TagResourceResponse;
(function(TagResourceResponse) {
    TagResourceResponse.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(TagResourceResponse || (TagResourceResponse = {}));
var UnlinkDeveloperIdentityInput;
(function(UnlinkDeveloperIdentityInput) {
    UnlinkDeveloperIdentityInput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(UnlinkDeveloperIdentityInput || (UnlinkDeveloperIdentityInput = {}));
var UnlinkIdentityInput;
(function(UnlinkIdentityInput) {
    UnlinkIdentityInput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(UnlinkIdentityInput || (UnlinkIdentityInput = {}));
var UntagResourceInput;
(function(UntagResourceInput) {
    UntagResourceInput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(UntagResourceInput || (UntagResourceInput = {}));
var UntagResourceResponse;
(function(UntagResourceResponse) {
    UntagResourceResponse.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(UntagResourceResponse || (UntagResourceResponse = {}));

},{"tslib":"lRdW5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3sr6F":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "serializeAws_json1_1CreateIdentityPoolCommand", ()=>serializeAws_json1_1CreateIdentityPoolCommand);
parcelHelpers.export(exports, "serializeAws_json1_1DeleteIdentitiesCommand", ()=>serializeAws_json1_1DeleteIdentitiesCommand);
parcelHelpers.export(exports, "serializeAws_json1_1DeleteIdentityPoolCommand", ()=>serializeAws_json1_1DeleteIdentityPoolCommand);
parcelHelpers.export(exports, "serializeAws_json1_1DescribeIdentityCommand", ()=>serializeAws_json1_1DescribeIdentityCommand);
parcelHelpers.export(exports, "serializeAws_json1_1DescribeIdentityPoolCommand", ()=>serializeAws_json1_1DescribeIdentityPoolCommand);
parcelHelpers.export(exports, "serializeAws_json1_1GetCredentialsForIdentityCommand", ()=>serializeAws_json1_1GetCredentialsForIdentityCommand);
parcelHelpers.export(exports, "serializeAws_json1_1GetIdCommand", ()=>serializeAws_json1_1GetIdCommand);
parcelHelpers.export(exports, "serializeAws_json1_1GetIdentityPoolRolesCommand", ()=>serializeAws_json1_1GetIdentityPoolRolesCommand);
parcelHelpers.export(exports, "serializeAws_json1_1GetOpenIdTokenCommand", ()=>serializeAws_json1_1GetOpenIdTokenCommand);
parcelHelpers.export(exports, "serializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand", ()=>serializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand);
parcelHelpers.export(exports, "serializeAws_json1_1ListIdentitiesCommand", ()=>serializeAws_json1_1ListIdentitiesCommand);
parcelHelpers.export(exports, "serializeAws_json1_1ListIdentityPoolsCommand", ()=>serializeAws_json1_1ListIdentityPoolsCommand);
parcelHelpers.export(exports, "serializeAws_json1_1ListTagsForResourceCommand", ()=>serializeAws_json1_1ListTagsForResourceCommand);
parcelHelpers.export(exports, "serializeAws_json1_1LookupDeveloperIdentityCommand", ()=>serializeAws_json1_1LookupDeveloperIdentityCommand);
parcelHelpers.export(exports, "serializeAws_json1_1MergeDeveloperIdentitiesCommand", ()=>serializeAws_json1_1MergeDeveloperIdentitiesCommand);
parcelHelpers.export(exports, "serializeAws_json1_1SetIdentityPoolRolesCommand", ()=>serializeAws_json1_1SetIdentityPoolRolesCommand);
parcelHelpers.export(exports, "serializeAws_json1_1TagResourceCommand", ()=>serializeAws_json1_1TagResourceCommand);
parcelHelpers.export(exports, "serializeAws_json1_1UnlinkDeveloperIdentityCommand", ()=>serializeAws_json1_1UnlinkDeveloperIdentityCommand);
parcelHelpers.export(exports, "serializeAws_json1_1UnlinkIdentityCommand", ()=>serializeAws_json1_1UnlinkIdentityCommand);
parcelHelpers.export(exports, "serializeAws_json1_1UntagResourceCommand", ()=>serializeAws_json1_1UntagResourceCommand);
parcelHelpers.export(exports, "serializeAws_json1_1UpdateIdentityPoolCommand", ()=>serializeAws_json1_1UpdateIdentityPoolCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1CreateIdentityPoolCommand", ()=>deserializeAws_json1_1CreateIdentityPoolCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1DeleteIdentitiesCommand", ()=>deserializeAws_json1_1DeleteIdentitiesCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1DeleteIdentityPoolCommand", ()=>deserializeAws_json1_1DeleteIdentityPoolCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1DescribeIdentityCommand", ()=>deserializeAws_json1_1DescribeIdentityCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1DescribeIdentityPoolCommand", ()=>deserializeAws_json1_1DescribeIdentityPoolCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1GetCredentialsForIdentityCommand", ()=>deserializeAws_json1_1GetCredentialsForIdentityCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1GetIdCommand", ()=>deserializeAws_json1_1GetIdCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1GetIdentityPoolRolesCommand", ()=>deserializeAws_json1_1GetIdentityPoolRolesCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1GetOpenIdTokenCommand", ()=>deserializeAws_json1_1GetOpenIdTokenCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand", ()=>deserializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1ListIdentitiesCommand", ()=>deserializeAws_json1_1ListIdentitiesCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1ListIdentityPoolsCommand", ()=>deserializeAws_json1_1ListIdentityPoolsCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1ListTagsForResourceCommand", ()=>deserializeAws_json1_1ListTagsForResourceCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1LookupDeveloperIdentityCommand", ()=>deserializeAws_json1_1LookupDeveloperIdentityCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1MergeDeveloperIdentitiesCommand", ()=>deserializeAws_json1_1MergeDeveloperIdentitiesCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1SetIdentityPoolRolesCommand", ()=>deserializeAws_json1_1SetIdentityPoolRolesCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1TagResourceCommand", ()=>deserializeAws_json1_1TagResourceCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1UnlinkDeveloperIdentityCommand", ()=>deserializeAws_json1_1UnlinkDeveloperIdentityCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1UnlinkIdentityCommand", ()=>deserializeAws_json1_1UnlinkIdentityCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1UntagResourceCommand", ()=>deserializeAws_json1_1UntagResourceCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1UpdateIdentityPoolCommand", ()=>deserializeAws_json1_1UpdateIdentityPoolCommand);
var _tslib = require("tslib");
var _protocolHttp = require("@aws-sdk/protocol-http");
var serializeAws_json1_1CreateIdentityPoolCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "AWSCognitoIdentityService.CreateIdentityPool"
            };
            body = JSON.stringify(serializeAws_json1_1CreateIdentityPoolInput(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1DeleteIdentitiesCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "AWSCognitoIdentityService.DeleteIdentities"
            };
            body = JSON.stringify(serializeAws_json1_1DeleteIdentitiesInput(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1DeleteIdentityPoolCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "AWSCognitoIdentityService.DeleteIdentityPool"
            };
            body = JSON.stringify(serializeAws_json1_1DeleteIdentityPoolInput(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1DescribeIdentityCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "AWSCognitoIdentityService.DescribeIdentity"
            };
            body = JSON.stringify(serializeAws_json1_1DescribeIdentityInput(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1DescribeIdentityPoolCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "AWSCognitoIdentityService.DescribeIdentityPool"
            };
            body = JSON.stringify(serializeAws_json1_1DescribeIdentityPoolInput(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1GetCredentialsForIdentityCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "AWSCognitoIdentityService.GetCredentialsForIdentity"
            };
            body = JSON.stringify(serializeAws_json1_1GetCredentialsForIdentityInput(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1GetIdCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "AWSCognitoIdentityService.GetId"
            };
            body = JSON.stringify(serializeAws_json1_1GetIdInput(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1GetIdentityPoolRolesCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "AWSCognitoIdentityService.GetIdentityPoolRoles"
            };
            body = JSON.stringify(serializeAws_json1_1GetIdentityPoolRolesInput(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1GetOpenIdTokenCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "AWSCognitoIdentityService.GetOpenIdToken"
            };
            body = JSON.stringify(serializeAws_json1_1GetOpenIdTokenInput(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "AWSCognitoIdentityService.GetOpenIdTokenForDeveloperIdentity"
            };
            body = JSON.stringify(serializeAws_json1_1GetOpenIdTokenForDeveloperIdentityInput(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1ListIdentitiesCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "AWSCognitoIdentityService.ListIdentities"
            };
            body = JSON.stringify(serializeAws_json1_1ListIdentitiesInput(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1ListIdentityPoolsCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "AWSCognitoIdentityService.ListIdentityPools"
            };
            body = JSON.stringify(serializeAws_json1_1ListIdentityPoolsInput(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1ListTagsForResourceCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "AWSCognitoIdentityService.ListTagsForResource"
            };
            body = JSON.stringify(serializeAws_json1_1ListTagsForResourceInput(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1LookupDeveloperIdentityCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "AWSCognitoIdentityService.LookupDeveloperIdentity"
            };
            body = JSON.stringify(serializeAws_json1_1LookupDeveloperIdentityInput(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1MergeDeveloperIdentitiesCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "AWSCognitoIdentityService.MergeDeveloperIdentities"
            };
            body = JSON.stringify(serializeAws_json1_1MergeDeveloperIdentitiesInput(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1SetIdentityPoolRolesCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "AWSCognitoIdentityService.SetIdentityPoolRoles"
            };
            body = JSON.stringify(serializeAws_json1_1SetIdentityPoolRolesInput(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1TagResourceCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "AWSCognitoIdentityService.TagResource"
            };
            body = JSON.stringify(serializeAws_json1_1TagResourceInput(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1UnlinkDeveloperIdentityCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "AWSCognitoIdentityService.UnlinkDeveloperIdentity"
            };
            body = JSON.stringify(serializeAws_json1_1UnlinkDeveloperIdentityInput(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1UnlinkIdentityCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "AWSCognitoIdentityService.UnlinkIdentity"
            };
            body = JSON.stringify(serializeAws_json1_1UnlinkIdentityInput(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1UntagResourceCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "AWSCognitoIdentityService.UntagResource"
            };
            body = JSON.stringify(serializeAws_json1_1UntagResourceInput(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1UpdateIdentityPoolCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "AWSCognitoIdentityService.UpdateIdentityPool"
            };
            body = JSON.stringify(serializeAws_json1_1IdentityPool(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var deserializeAws_json1_1CreateIdentityPoolCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var data, contents, response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1CreateIdentityPoolCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1IdentityPool(data, context);
                    response = (0, _tslib.__assign)({
                        $metadata: deserializeMetadata(output)
                    }, contents);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1CreateIdentityPoolCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;
        var _j;
        return (0, _tslib.__generator)(this, function(_k) {
            switch(_k.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _j = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_j.body = _k.sent(), _j)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InternalErrorException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cognitoidentity#InternalErrorException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cognitoidentity#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "LimitExceededException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cognitoidentity#LimitExceededException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "ResourceConflictException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceConflictException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                12
                            ];
                        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                12
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        14
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 8:
                    _f = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)
                    ];
                case 9:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _f.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 10:
                    _g = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context)
                    ];
                case 11:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _g.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 12:
                    _h = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)
                    ];
                case 13:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _h.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1DeleteIdentitiesCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var data, contents, response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1DeleteIdentitiesCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1DeleteIdentitiesResponse(data, context);
                    response = (0, _tslib.__assign)({
                        $metadata: deserializeMetadata(output)
                    }, contents);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1DeleteIdentitiesCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
        var _f;
        return (0, _tslib.__generator)(this, function(_g) {
            switch(_g.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _f = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_f.body = _g.sent(), _f)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InternalErrorException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cognitoidentity#InternalErrorException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cognitoidentity#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        8
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _g.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        9
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _g.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        9
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _g.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        9
                    ];
                case 8:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _g.label = 9;
                case 9:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1DeleteIdentityPoolCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1DeleteIdentityPoolCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    response = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1DeleteIdentityPoolCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
        var _h;
        return (0, _tslib.__generator)(this, function(_j) {
            switch(_j.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _h = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_h.body = _j.sent(), _h)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InternalErrorException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cognitoidentity#InternalErrorException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cognitoidentity#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        12
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 8:
                    _f = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 9:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _f.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 10:
                    _g = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)
                    ];
                case 11:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _g.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 12:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _j.label = 13;
                case 13:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1DescribeIdentityCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var data, contents, response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1DescribeIdentityCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1IdentityDescription(data, context);
                    response = (0, _tslib.__assign)({
                        $metadata: deserializeMetadata(output)
                    }, contents);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1DescribeIdentityCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
        var _h;
        return (0, _tslib.__generator)(this, function(_j) {
            switch(_j.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _h = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_h.body = _j.sent(), _h)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InternalErrorException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cognitoidentity#InternalErrorException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cognitoidentity#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        12
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 8:
                    _f = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 9:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _f.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 10:
                    _g = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)
                    ];
                case 11:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _g.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 12:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _j.label = 13;
                case 13:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1DescribeIdentityPoolCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var data, contents, response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1DescribeIdentityPoolCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1IdentityPool(data, context);
                    response = (0, _tslib.__assign)({
                        $metadata: deserializeMetadata(output)
                    }, contents);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1DescribeIdentityPoolCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
        var _h;
        return (0, _tslib.__generator)(this, function(_j) {
            switch(_j.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _h = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_h.body = _j.sent(), _h)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InternalErrorException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cognitoidentity#InternalErrorException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cognitoidentity#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        12
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 8:
                    _f = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 9:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _f.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 10:
                    _g = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)
                    ];
                case 11:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _g.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 12:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _j.label = 13;
                case 13:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1GetCredentialsForIdentityCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var data, contents, response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1GetCredentialsForIdentityCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1GetCredentialsForIdentityResponse(data, context);
                    response = (0, _tslib.__assign)({
                        $metadata: deserializeMetadata(output)
                    }, contents);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1GetCredentialsForIdentityCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, parsedBody, message;
        var _l;
        return (0, _tslib.__generator)(this, function(_m) {
            switch(_m.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _l = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_l.body = _m.sent(), _l)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "ExternalServiceException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cognitoidentity#ExternalServiceException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "InternalErrorException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cognitoidentity#InternalErrorException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "InvalidIdentityPoolConfigurationException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cognitoidentity#InvalidIdentityPoolConfigurationException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "com.amazonaws.cognitoidentity#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "ResourceConflictException":
                            return [
                                3 /*break*/ ,
                                12
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceConflictException":
                            return [
                                3 /*break*/ ,
                                12
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                14
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                14
                            ];
                        case "TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                16
                            ];
                        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                16
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        18
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ExternalServiceExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _m.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        19
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _m.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        19
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidIdentityPoolConfigurationExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _m.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        19
                    ];
                case 8:
                    _f = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 9:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _f.concat([
                            _m.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        19
                    ];
                case 10:
                    _g = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)
                    ];
                case 11:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _g.concat([
                            _m.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        19
                    ];
                case 12:
                    _h = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context)
                    ];
                case 13:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _h.concat([
                            _m.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        19
                    ];
                case 14:
                    _j = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 15:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _j.concat([
                            _m.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        19
                    ];
                case 16:
                    _k = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)
                    ];
                case 17:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _k.concat([
                            _m.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        19
                    ];
                case 18:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _m.label = 19;
                case 19:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1GetIdCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var data, contents, response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1GetIdCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1GetIdResponse(data, context);
                    response = (0, _tslib.__assign)({
                        $metadata: deserializeMetadata(output)
                    }, contents);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1GetIdCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, parsedBody, message;
        var _l;
        return (0, _tslib.__generator)(this, function(_m) {
            switch(_m.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _l = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_l.body = _m.sent(), _l)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "ExternalServiceException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cognitoidentity#ExternalServiceException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "InternalErrorException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cognitoidentity#InternalErrorException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cognitoidentity#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "LimitExceededException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "com.amazonaws.cognitoidentity#LimitExceededException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "ResourceConflictException":
                            return [
                                3 /*break*/ ,
                                12
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceConflictException":
                            return [
                                3 /*break*/ ,
                                12
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                14
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                14
                            ];
                        case "TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                16
                            ];
                        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                16
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        18
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ExternalServiceExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _m.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        19
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _m.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        19
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _m.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        19
                    ];
                case 8:
                    _f = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)
                    ];
                case 9:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _f.concat([
                            _m.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        19
                    ];
                case 10:
                    _g = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)
                    ];
                case 11:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _g.concat([
                            _m.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        19
                    ];
                case 12:
                    _h = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context)
                    ];
                case 13:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _h.concat([
                            _m.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        19
                    ];
                case 14:
                    _j = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 15:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _j.concat([
                            _m.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        19
                    ];
                case 16:
                    _k = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)
                    ];
                case 17:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _k.concat([
                            _m.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        19
                    ];
                case 18:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _m.label = 19;
                case 19:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1GetIdentityPoolRolesCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var data, contents, response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1GetIdentityPoolRolesCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1GetIdentityPoolRolesResponse(data, context);
                    response = (0, _tslib.__assign)({
                        $metadata: deserializeMetadata(output)
                    }, contents);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1GetIdentityPoolRolesCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;
        var _j;
        return (0, _tslib.__generator)(this, function(_k) {
            switch(_k.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _j = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_j.body = _k.sent(), _j)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InternalErrorException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cognitoidentity#InternalErrorException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cognitoidentity#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "ResourceConflictException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceConflictException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                12
                            ];
                        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                12
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        14
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 8:
                    _f = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context)
                    ];
                case 9:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _f.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 10:
                    _g = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 11:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _g.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 12:
                    _h = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)
                    ];
                case 13:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _h.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1GetOpenIdTokenCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var data, contents, response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1GetOpenIdTokenCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1GetOpenIdTokenResponse(data, context);
                    response = (0, _tslib.__assign)({
                        $metadata: deserializeMetadata(output)
                    }, contents);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1GetOpenIdTokenCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        var _k;
        return (0, _tslib.__generator)(this, function(_l) {
            switch(_l.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _k = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_k.body = _l.sent(), _k)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "ExternalServiceException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cognitoidentity#ExternalServiceException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "InternalErrorException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cognitoidentity#InternalErrorException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cognitoidentity#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "ResourceConflictException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceConflictException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                12
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                12
                            ];
                        case "TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                14
                            ];
                        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                14
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        16
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ExternalServiceExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _l.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        17
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _l.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        17
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _l.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        17
                    ];
                case 8:
                    _f = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)
                    ];
                case 9:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _f.concat([
                            _l.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        17
                    ];
                case 10:
                    _g = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context)
                    ];
                case 11:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _g.concat([
                            _l.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        17
                    ];
                case 12:
                    _h = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 13:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _h.concat([
                            _l.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        17
                    ];
                case 14:
                    _j = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)
                    ];
                case 15:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _j.concat([
                            _l.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        17
                    ];
                case 16:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _l.label = 17;
                case 17:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var data, contents, response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1GetOpenIdTokenForDeveloperIdentityResponse(data, context);
                    response = (0, _tslib.__assign)({
                        $metadata: deserializeMetadata(output)
                    }, contents);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        var _k;
        return (0, _tslib.__generator)(this, function(_l) {
            switch(_l.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _k = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_k.body = _l.sent(), _k)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "DeveloperUserAlreadyRegisteredException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cognitoidentity#DeveloperUserAlreadyRegisteredException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "InternalErrorException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cognitoidentity#InternalErrorException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cognitoidentity#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "ResourceConflictException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceConflictException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                12
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                12
                            ];
                        case "TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                14
                            ];
                        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                14
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        16
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1DeveloperUserAlreadyRegisteredExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _l.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        17
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _l.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        17
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _l.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        17
                    ];
                case 8:
                    _f = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)
                    ];
                case 9:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _f.concat([
                            _l.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        17
                    ];
                case 10:
                    _g = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context)
                    ];
                case 11:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _g.concat([
                            _l.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        17
                    ];
                case 12:
                    _h = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 13:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _h.concat([
                            _l.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        17
                    ];
                case 14:
                    _j = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)
                    ];
                case 15:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _j.concat([
                            _l.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        17
                    ];
                case 16:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _l.label = 17;
                case 17:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1ListIdentitiesCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var data, contents, response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1ListIdentitiesCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1ListIdentitiesResponse(data, context);
                    response = (0, _tslib.__assign)({
                        $metadata: deserializeMetadata(output)
                    }, contents);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1ListIdentitiesCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
        var _h;
        return (0, _tslib.__generator)(this, function(_j) {
            switch(_j.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _h = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_h.body = _j.sent(), _h)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InternalErrorException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cognitoidentity#InternalErrorException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cognitoidentity#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        12
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 8:
                    _f = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 9:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _f.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 10:
                    _g = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)
                    ];
                case 11:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _g.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 12:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _j.label = 13;
                case 13:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1ListIdentityPoolsCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var data, contents, response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1ListIdentityPoolsCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1ListIdentityPoolsResponse(data, context);
                    response = (0, _tslib.__assign)({
                        $metadata: deserializeMetadata(output)
                    }, contents);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1ListIdentityPoolsCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
        var _h;
        return (0, _tslib.__generator)(this, function(_j) {
            switch(_j.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _h = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_h.body = _j.sent(), _h)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InternalErrorException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cognitoidentity#InternalErrorException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cognitoidentity#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        12
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 8:
                    _f = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 9:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _f.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 10:
                    _g = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)
                    ];
                case 11:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _g.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 12:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _j.label = 13;
                case 13:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1ListTagsForResourceCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var data, contents, response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1ListTagsForResourceCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1ListTagsForResourceResponse(data, context);
                    response = (0, _tslib.__assign)({
                        $metadata: deserializeMetadata(output)
                    }, contents);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1ListTagsForResourceCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
        var _h;
        return (0, _tslib.__generator)(this, function(_j) {
            switch(_j.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _h = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_h.body = _j.sent(), _h)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InternalErrorException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cognitoidentity#InternalErrorException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cognitoidentity#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        12
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 8:
                    _f = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 9:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _f.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 10:
                    _g = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)
                    ];
                case 11:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _g.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 12:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _j.label = 13;
                case 13:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1LookupDeveloperIdentityCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var data, contents, response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1LookupDeveloperIdentityCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1LookupDeveloperIdentityResponse(data, context);
                    response = (0, _tslib.__assign)({
                        $metadata: deserializeMetadata(output)
                    }, contents);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1LookupDeveloperIdentityCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;
        var _j;
        return (0, _tslib.__generator)(this, function(_k) {
            switch(_k.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _j = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_j.body = _k.sent(), _j)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InternalErrorException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cognitoidentity#InternalErrorException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cognitoidentity#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "ResourceConflictException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceConflictException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                12
                            ];
                        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                12
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        14
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 8:
                    _f = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context)
                    ];
                case 9:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _f.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 10:
                    _g = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 11:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _g.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 12:
                    _h = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)
                    ];
                case 13:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _h.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1MergeDeveloperIdentitiesCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var data, contents, response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1MergeDeveloperIdentitiesCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1MergeDeveloperIdentitiesResponse(data, context);
                    response = (0, _tslib.__assign)({
                        $metadata: deserializeMetadata(output)
                    }, contents);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1MergeDeveloperIdentitiesCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;
        var _j;
        return (0, _tslib.__generator)(this, function(_k) {
            switch(_k.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _j = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_j.body = _k.sent(), _j)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InternalErrorException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cognitoidentity#InternalErrorException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cognitoidentity#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "ResourceConflictException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceConflictException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                12
                            ];
                        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                12
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        14
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 8:
                    _f = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context)
                    ];
                case 9:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _f.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 10:
                    _g = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 11:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _g.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 12:
                    _h = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)
                    ];
                case 13:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _h.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1SetIdentityPoolRolesCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1SetIdentityPoolRolesCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    response = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1SetIdentityPoolRolesCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        var _k;
        return (0, _tslib.__generator)(this, function(_l) {
            switch(_l.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _k = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_k.body = _l.sent(), _k)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "ConcurrentModificationException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cognitoidentity#ConcurrentModificationException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "InternalErrorException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cognitoidentity#InternalErrorException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cognitoidentity#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "ResourceConflictException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceConflictException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                12
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                12
                            ];
                        case "TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                14
                            ];
                        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                14
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        16
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ConcurrentModificationExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _l.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        17
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _l.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        17
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _l.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        17
                    ];
                case 8:
                    _f = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)
                    ];
                case 9:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _f.concat([
                            _l.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        17
                    ];
                case 10:
                    _g = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context)
                    ];
                case 11:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _g.concat([
                            _l.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        17
                    ];
                case 12:
                    _h = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 13:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _h.concat([
                            _l.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        17
                    ];
                case 14:
                    _j = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)
                    ];
                case 15:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _j.concat([
                            _l.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        17
                    ];
                case 16:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _l.label = 17;
                case 17:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1TagResourceCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var data, contents, response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1TagResourceCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1TagResourceResponse(data, context);
                    response = (0, _tslib.__assign)({
                        $metadata: deserializeMetadata(output)
                    }, contents);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1TagResourceCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
        var _h;
        return (0, _tslib.__generator)(this, function(_j) {
            switch(_j.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _h = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_h.body = _j.sent(), _h)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InternalErrorException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cognitoidentity#InternalErrorException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cognitoidentity#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        12
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 8:
                    _f = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 9:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _f.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 10:
                    _g = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)
                    ];
                case 11:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _g.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 12:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _j.label = 13;
                case 13:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1UnlinkDeveloperIdentityCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1UnlinkDeveloperIdentityCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    response = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1UnlinkDeveloperIdentityCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;
        var _j;
        return (0, _tslib.__generator)(this, function(_k) {
            switch(_k.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _j = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_j.body = _k.sent(), _j)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InternalErrorException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cognitoidentity#InternalErrorException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cognitoidentity#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "ResourceConflictException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceConflictException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                12
                            ];
                        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                12
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        14
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 8:
                    _f = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context)
                    ];
                case 9:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _f.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 10:
                    _g = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 11:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _g.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 12:
                    _h = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)
                    ];
                case 13:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _h.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1UnlinkIdentityCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1UnlinkIdentityCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    response = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1UnlinkIdentityCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        var _k;
        return (0, _tslib.__generator)(this, function(_l) {
            switch(_l.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _k = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_k.body = _l.sent(), _k)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "ExternalServiceException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cognitoidentity#ExternalServiceException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "InternalErrorException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cognitoidentity#InternalErrorException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cognitoidentity#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "ResourceConflictException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceConflictException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                12
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                12
                            ];
                        case "TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                14
                            ];
                        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                14
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        16
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ExternalServiceExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _l.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        17
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _l.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        17
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _l.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        17
                    ];
                case 8:
                    _f = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)
                    ];
                case 9:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _f.concat([
                            _l.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        17
                    ];
                case 10:
                    _g = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context)
                    ];
                case 11:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _g.concat([
                            _l.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        17
                    ];
                case 12:
                    _h = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 13:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _h.concat([
                            _l.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        17
                    ];
                case 14:
                    _j = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)
                    ];
                case 15:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _j.concat([
                            _l.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        17
                    ];
                case 16:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _l.label = 17;
                case 17:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1UntagResourceCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var data, contents, response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1UntagResourceCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1UntagResourceResponse(data, context);
                    response = (0, _tslib.__assign)({
                        $metadata: deserializeMetadata(output)
                    }, contents);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1UntagResourceCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
        var _h;
        return (0, _tslib.__generator)(this, function(_j) {
            switch(_j.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _h = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_h.body = _j.sent(), _h)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InternalErrorException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cognitoidentity#InternalErrorException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cognitoidentity#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        12
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 8:
                    _f = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 9:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _f.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 10:
                    _g = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)
                    ];
                case 11:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _g.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 12:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _j.label = 13;
                case 13:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1UpdateIdentityPoolCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var data, contents, response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1UpdateIdentityPoolCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1IdentityPool(data, context);
                    response = (0, _tslib.__assign)({
                        $metadata: deserializeMetadata(output)
                    }, contents);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1UpdateIdentityPoolCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, parsedBody, message;
        var _l;
        return (0, _tslib.__generator)(this, function(_m) {
            switch(_m.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _l = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_l.body = _m.sent(), _l)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "ConcurrentModificationException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cognitoidentity#ConcurrentModificationException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "InternalErrorException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cognitoidentity#InternalErrorException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cognitoidentity#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "LimitExceededException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "com.amazonaws.cognitoidentity#LimitExceededException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "ResourceConflictException":
                            return [
                                3 /*break*/ ,
                                12
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceConflictException":
                            return [
                                3 /*break*/ ,
                                12
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                14
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                14
                            ];
                        case "TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                16
                            ];
                        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                16
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        18
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ConcurrentModificationExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _m.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        19
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _m.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        19
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _m.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        19
                    ];
                case 8:
                    _f = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)
                    ];
                case 9:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _f.concat([
                            _m.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        19
                    ];
                case 10:
                    _g = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)
                    ];
                case 11:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _g.concat([
                            _m.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        19
                    ];
                case 12:
                    _h = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context)
                    ];
                case 13:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _h.concat([
                            _m.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        19
                    ];
                case 14:
                    _j = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 15:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _j.concat([
                            _m.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        19
                    ];
                case 16:
                    _k = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)
                    ];
                case 17:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _k.concat([
                            _m.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        19
                    ];
                case 18:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _m.label = 19;
                case 19:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1ConcurrentModificationExceptionResponse = function(parsedOutput, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var body, deserialized, contents;
        return (0, _tslib.__generator)(this, function(_a) {
            body = parsedOutput.body;
            deserialized = deserializeAws_json1_1ConcurrentModificationException(body, context);
            contents = (0, _tslib.__assign)({
                name: "ConcurrentModificationException",
                $fault: "client",
                $metadata: deserializeMetadata(parsedOutput)
            }, deserialized);
            return [
                2 /*return*/ ,
                contents
            ];
        });
    });
};
var deserializeAws_json1_1DeveloperUserAlreadyRegisteredExceptionResponse = function(parsedOutput, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var body, deserialized, contents;
        return (0, _tslib.__generator)(this, function(_a) {
            body = parsedOutput.body;
            deserialized = deserializeAws_json1_1DeveloperUserAlreadyRegisteredException(body, context);
            contents = (0, _tslib.__assign)({
                name: "DeveloperUserAlreadyRegisteredException",
                $fault: "client",
                $metadata: deserializeMetadata(parsedOutput)
            }, deserialized);
            return [
                2 /*return*/ ,
                contents
            ];
        });
    });
};
var deserializeAws_json1_1ExternalServiceExceptionResponse = function(parsedOutput, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var body, deserialized, contents;
        return (0, _tslib.__generator)(this, function(_a) {
            body = parsedOutput.body;
            deserialized = deserializeAws_json1_1ExternalServiceException(body, context);
            contents = (0, _tslib.__assign)({
                name: "ExternalServiceException",
                $fault: "client",
                $metadata: deserializeMetadata(parsedOutput)
            }, deserialized);
            return [
                2 /*return*/ ,
                contents
            ];
        });
    });
};
var deserializeAws_json1_1InternalErrorExceptionResponse = function(parsedOutput, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var body, deserialized, contents;
        return (0, _tslib.__generator)(this, function(_a) {
            body = parsedOutput.body;
            deserialized = deserializeAws_json1_1InternalErrorException(body, context);
            contents = (0, _tslib.__assign)({
                name: "InternalErrorException",
                $fault: "server",
                $metadata: deserializeMetadata(parsedOutput)
            }, deserialized);
            return [
                2 /*return*/ ,
                contents
            ];
        });
    });
};
var deserializeAws_json1_1InvalidIdentityPoolConfigurationExceptionResponse = function(parsedOutput, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var body, deserialized, contents;
        return (0, _tslib.__generator)(this, function(_a) {
            body = parsedOutput.body;
            deserialized = deserializeAws_json1_1InvalidIdentityPoolConfigurationException(body, context);
            contents = (0, _tslib.__assign)({
                name: "InvalidIdentityPoolConfigurationException",
                $fault: "client",
                $metadata: deserializeMetadata(parsedOutput)
            }, deserialized);
            return [
                2 /*return*/ ,
                contents
            ];
        });
    });
};
var deserializeAws_json1_1InvalidParameterExceptionResponse = function(parsedOutput, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var body, deserialized, contents;
        return (0, _tslib.__generator)(this, function(_a) {
            body = parsedOutput.body;
            deserialized = deserializeAws_json1_1InvalidParameterException(body, context);
            contents = (0, _tslib.__assign)({
                name: "InvalidParameterException",
                $fault: "client",
                $metadata: deserializeMetadata(parsedOutput)
            }, deserialized);
            return [
                2 /*return*/ ,
                contents
            ];
        });
    });
};
var deserializeAws_json1_1LimitExceededExceptionResponse = function(parsedOutput, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var body, deserialized, contents;
        return (0, _tslib.__generator)(this, function(_a) {
            body = parsedOutput.body;
            deserialized = deserializeAws_json1_1LimitExceededException(body, context);
            contents = (0, _tslib.__assign)({
                name: "LimitExceededException",
                $fault: "client",
                $metadata: deserializeMetadata(parsedOutput)
            }, deserialized);
            return [
                2 /*return*/ ,
                contents
            ];
        });
    });
};
var deserializeAws_json1_1NotAuthorizedExceptionResponse = function(parsedOutput, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var body, deserialized, contents;
        return (0, _tslib.__generator)(this, function(_a) {
            body = parsedOutput.body;
            deserialized = deserializeAws_json1_1NotAuthorizedException(body, context);
            contents = (0, _tslib.__assign)({
                name: "NotAuthorizedException",
                $fault: "client",
                $metadata: deserializeMetadata(parsedOutput)
            }, deserialized);
            return [
                2 /*return*/ ,
                contents
            ];
        });
    });
};
var deserializeAws_json1_1ResourceConflictExceptionResponse = function(parsedOutput, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var body, deserialized, contents;
        return (0, _tslib.__generator)(this, function(_a) {
            body = parsedOutput.body;
            deserialized = deserializeAws_json1_1ResourceConflictException(body, context);
            contents = (0, _tslib.__assign)({
                name: "ResourceConflictException",
                $fault: "client",
                $metadata: deserializeMetadata(parsedOutput)
            }, deserialized);
            return [
                2 /*return*/ ,
                contents
            ];
        });
    });
};
var deserializeAws_json1_1ResourceNotFoundExceptionResponse = function(parsedOutput, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var body, deserialized, contents;
        return (0, _tslib.__generator)(this, function(_a) {
            body = parsedOutput.body;
            deserialized = deserializeAws_json1_1ResourceNotFoundException(body, context);
            contents = (0, _tslib.__assign)({
                name: "ResourceNotFoundException",
                $fault: "client",
                $metadata: deserializeMetadata(parsedOutput)
            }, deserialized);
            return [
                2 /*return*/ ,
                contents
            ];
        });
    });
};
var deserializeAws_json1_1TooManyRequestsExceptionResponse = function(parsedOutput, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var body, deserialized, contents;
        return (0, _tslib.__generator)(this, function(_a) {
            body = parsedOutput.body;
            deserialized = deserializeAws_json1_1TooManyRequestsException(body, context);
            contents = (0, _tslib.__assign)({
                name: "TooManyRequestsException",
                $fault: "client",
                $metadata: deserializeMetadata(parsedOutput)
            }, deserialized);
            return [
                2 /*return*/ ,
                contents
            ];
        });
    });
};
var serializeAws_json1_1CognitoIdentityProvider = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, input.ClientId !== undefined && input.ClientId !== null && {
        ClientId: input.ClientId
    }), input.ProviderName !== undefined && input.ProviderName !== null && {
        ProviderName: input.ProviderName
    }), input.ServerSideTokenCheck !== undefined && input.ServerSideTokenCheck !== null && {
        ServerSideTokenCheck: input.ServerSideTokenCheck
    });
};
var serializeAws_json1_1CognitoIdentityProviderList = function(input, context) {
    return input.filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return serializeAws_json1_1CognitoIdentityProvider(entry, context);
    });
};
var serializeAws_json1_1CreateIdentityPoolInput = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, input.AllowClassicFlow !== undefined && input.AllowClassicFlow !== null && {
        AllowClassicFlow: input.AllowClassicFlow
    }), input.AllowUnauthenticatedIdentities !== undefined && input.AllowUnauthenticatedIdentities !== null && {
        AllowUnauthenticatedIdentities: input.AllowUnauthenticatedIdentities
    }), input.CognitoIdentityProviders !== undefined && input.CognitoIdentityProviders !== null && {
        CognitoIdentityProviders: serializeAws_json1_1CognitoIdentityProviderList(input.CognitoIdentityProviders, context)
    }), input.DeveloperProviderName !== undefined && input.DeveloperProviderName !== null && {
        DeveloperProviderName: input.DeveloperProviderName
    }), input.IdentityPoolName !== undefined && input.IdentityPoolName !== null && {
        IdentityPoolName: input.IdentityPoolName
    }), input.IdentityPoolTags !== undefined && input.IdentityPoolTags !== null && {
        IdentityPoolTags: serializeAws_json1_1IdentityPoolTagsType(input.IdentityPoolTags, context)
    }), input.OpenIdConnectProviderARNs !== undefined && input.OpenIdConnectProviderARNs !== null && {
        OpenIdConnectProviderARNs: serializeAws_json1_1OIDCProviderList(input.OpenIdConnectProviderARNs, context)
    }), input.SamlProviderARNs !== undefined && input.SamlProviderARNs !== null && {
        SamlProviderARNs: serializeAws_json1_1SAMLProviderList(input.SamlProviderARNs, context)
    }), input.SupportedLoginProviders !== undefined && input.SupportedLoginProviders !== null && {
        SupportedLoginProviders: serializeAws_json1_1IdentityProviders(input.SupportedLoginProviders, context)
    });
};
var serializeAws_json1_1DeleteIdentitiesInput = function(input, context) {
    return (0, _tslib.__assign)({}, input.IdentityIdsToDelete !== undefined && input.IdentityIdsToDelete !== null && {
        IdentityIdsToDelete: serializeAws_json1_1IdentityIdList(input.IdentityIdsToDelete, context)
    });
};
var serializeAws_json1_1DeleteIdentityPoolInput = function(input, context) {
    return (0, _tslib.__assign)({}, input.IdentityPoolId !== undefined && input.IdentityPoolId !== null && {
        IdentityPoolId: input.IdentityPoolId
    });
};
var serializeAws_json1_1DescribeIdentityInput = function(input, context) {
    return (0, _tslib.__assign)({}, input.IdentityId !== undefined && input.IdentityId !== null && {
        IdentityId: input.IdentityId
    });
};
var serializeAws_json1_1DescribeIdentityPoolInput = function(input, context) {
    return (0, _tslib.__assign)({}, input.IdentityPoolId !== undefined && input.IdentityPoolId !== null && {
        IdentityPoolId: input.IdentityPoolId
    });
};
var serializeAws_json1_1GetCredentialsForIdentityInput = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, input.CustomRoleArn !== undefined && input.CustomRoleArn !== null && {
        CustomRoleArn: input.CustomRoleArn
    }), input.IdentityId !== undefined && input.IdentityId !== null && {
        IdentityId: input.IdentityId
    }), input.Logins !== undefined && input.Logins !== null && {
        Logins: serializeAws_json1_1LoginsMap(input.Logins, context)
    });
};
var serializeAws_json1_1GetIdentityPoolRolesInput = function(input, context) {
    return (0, _tslib.__assign)({}, input.IdentityPoolId !== undefined && input.IdentityPoolId !== null && {
        IdentityPoolId: input.IdentityPoolId
    });
};
var serializeAws_json1_1GetIdInput = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, input.AccountId !== undefined && input.AccountId !== null && {
        AccountId: input.AccountId
    }), input.IdentityPoolId !== undefined && input.IdentityPoolId !== null && {
        IdentityPoolId: input.IdentityPoolId
    }), input.Logins !== undefined && input.Logins !== null && {
        Logins: serializeAws_json1_1LoginsMap(input.Logins, context)
    });
};
var serializeAws_json1_1GetOpenIdTokenForDeveloperIdentityInput = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, input.IdentityId !== undefined && input.IdentityId !== null && {
        IdentityId: input.IdentityId
    }), input.IdentityPoolId !== undefined && input.IdentityPoolId !== null && {
        IdentityPoolId: input.IdentityPoolId
    }), input.Logins !== undefined && input.Logins !== null && {
        Logins: serializeAws_json1_1LoginsMap(input.Logins, context)
    }), input.TokenDuration !== undefined && input.TokenDuration !== null && {
        TokenDuration: input.TokenDuration
    });
};
var serializeAws_json1_1GetOpenIdTokenInput = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)({}, input.IdentityId !== undefined && input.IdentityId !== null && {
        IdentityId: input.IdentityId
    }), input.Logins !== undefined && input.Logins !== null && {
        Logins: serializeAws_json1_1LoginsMap(input.Logins, context)
    });
};
var serializeAws_json1_1IdentityIdList = function(input, context) {
    return input.filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return entry;
    });
};
var serializeAws_json1_1IdentityPool = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, input.AllowClassicFlow !== undefined && input.AllowClassicFlow !== null && {
        AllowClassicFlow: input.AllowClassicFlow
    }), input.AllowUnauthenticatedIdentities !== undefined && input.AllowUnauthenticatedIdentities !== null && {
        AllowUnauthenticatedIdentities: input.AllowUnauthenticatedIdentities
    }), input.CognitoIdentityProviders !== undefined && input.CognitoIdentityProviders !== null && {
        CognitoIdentityProviders: serializeAws_json1_1CognitoIdentityProviderList(input.CognitoIdentityProviders, context)
    }), input.DeveloperProviderName !== undefined && input.DeveloperProviderName !== null && {
        DeveloperProviderName: input.DeveloperProviderName
    }), input.IdentityPoolId !== undefined && input.IdentityPoolId !== null && {
        IdentityPoolId: input.IdentityPoolId
    }), input.IdentityPoolName !== undefined && input.IdentityPoolName !== null && {
        IdentityPoolName: input.IdentityPoolName
    }), input.IdentityPoolTags !== undefined && input.IdentityPoolTags !== null && {
        IdentityPoolTags: serializeAws_json1_1IdentityPoolTagsType(input.IdentityPoolTags, context)
    }), input.OpenIdConnectProviderARNs !== undefined && input.OpenIdConnectProviderARNs !== null && {
        OpenIdConnectProviderARNs: serializeAws_json1_1OIDCProviderList(input.OpenIdConnectProviderARNs, context)
    }), input.SamlProviderARNs !== undefined && input.SamlProviderARNs !== null && {
        SamlProviderARNs: serializeAws_json1_1SAMLProviderList(input.SamlProviderARNs, context)
    }), input.SupportedLoginProviders !== undefined && input.SupportedLoginProviders !== null && {
        SupportedLoginProviders: serializeAws_json1_1IdentityProviders(input.SupportedLoginProviders, context)
    });
};
var serializeAws_json1_1IdentityPoolTagsListType = function(input, context) {
    return input.filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return entry;
    });
};
var serializeAws_json1_1IdentityPoolTagsType = function(input, context) {
    return Object.entries(input).reduce(function(acc, _a) {
        var _b;
        var _c = (0, _tslib.__read)(_a, 2), key = _c[0], value = _c[1];
        if (value === null) return acc;
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, acc), (_b = {}, _b[key] = value, _b));
    }, {});
};
var serializeAws_json1_1IdentityProviders = function(input, context) {
    return Object.entries(input).reduce(function(acc, _a) {
        var _b;
        var _c = (0, _tslib.__read)(_a, 2), key = _c[0], value = _c[1];
        if (value === null) return acc;
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, acc), (_b = {}, _b[key] = value, _b));
    }, {});
};
var serializeAws_json1_1ListIdentitiesInput = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, input.HideDisabled !== undefined && input.HideDisabled !== null && {
        HideDisabled: input.HideDisabled
    }), input.IdentityPoolId !== undefined && input.IdentityPoolId !== null && {
        IdentityPoolId: input.IdentityPoolId
    }), input.MaxResults !== undefined && input.MaxResults !== null && {
        MaxResults: input.MaxResults
    }), input.NextToken !== undefined && input.NextToken !== null && {
        NextToken: input.NextToken
    });
};
var serializeAws_json1_1ListIdentityPoolsInput = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)({}, input.MaxResults !== undefined && input.MaxResults !== null && {
        MaxResults: input.MaxResults
    }), input.NextToken !== undefined && input.NextToken !== null && {
        NextToken: input.NextToken
    });
};
var serializeAws_json1_1ListTagsForResourceInput = function(input, context) {
    return (0, _tslib.__assign)({}, input.ResourceArn !== undefined && input.ResourceArn !== null && {
        ResourceArn: input.ResourceArn
    });
};
var serializeAws_json1_1LoginsList = function(input, context) {
    return input.filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return entry;
    });
};
var serializeAws_json1_1LoginsMap = function(input, context) {
    return Object.entries(input).reduce(function(acc, _a) {
        var _b;
        var _c = (0, _tslib.__read)(_a, 2), key = _c[0], value = _c[1];
        if (value === null) return acc;
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, acc), (_b = {}, _b[key] = value, _b));
    }, {});
};
var serializeAws_json1_1LookupDeveloperIdentityInput = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, input.DeveloperUserIdentifier !== undefined && input.DeveloperUserIdentifier !== null && {
        DeveloperUserIdentifier: input.DeveloperUserIdentifier
    }), input.IdentityId !== undefined && input.IdentityId !== null && {
        IdentityId: input.IdentityId
    }), input.IdentityPoolId !== undefined && input.IdentityPoolId !== null && {
        IdentityPoolId: input.IdentityPoolId
    }), input.MaxResults !== undefined && input.MaxResults !== null && {
        MaxResults: input.MaxResults
    }), input.NextToken !== undefined && input.NextToken !== null && {
        NextToken: input.NextToken
    });
};
var serializeAws_json1_1MappingRule = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, input.Claim !== undefined && input.Claim !== null && {
        Claim: input.Claim
    }), input.MatchType !== undefined && input.MatchType !== null && {
        MatchType: input.MatchType
    }), input.RoleARN !== undefined && input.RoleARN !== null && {
        RoleARN: input.RoleARN
    }), input.Value !== undefined && input.Value !== null && {
        Value: input.Value
    });
};
var serializeAws_json1_1MappingRulesList = function(input, context) {
    return input.filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return serializeAws_json1_1MappingRule(entry, context);
    });
};
var serializeAws_json1_1MergeDeveloperIdentitiesInput = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, input.DestinationUserIdentifier !== undefined && input.DestinationUserIdentifier !== null && {
        DestinationUserIdentifier: input.DestinationUserIdentifier
    }), input.DeveloperProviderName !== undefined && input.DeveloperProviderName !== null && {
        DeveloperProviderName: input.DeveloperProviderName
    }), input.IdentityPoolId !== undefined && input.IdentityPoolId !== null && {
        IdentityPoolId: input.IdentityPoolId
    }), input.SourceUserIdentifier !== undefined && input.SourceUserIdentifier !== null && {
        SourceUserIdentifier: input.SourceUserIdentifier
    });
};
var serializeAws_json1_1OIDCProviderList = function(input, context) {
    return input.filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return entry;
    });
};
var serializeAws_json1_1RoleMapping = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, input.AmbiguousRoleResolution !== undefined && input.AmbiguousRoleResolution !== null && {
        AmbiguousRoleResolution: input.AmbiguousRoleResolution
    }), input.RulesConfiguration !== undefined && input.RulesConfiguration !== null && {
        RulesConfiguration: serializeAws_json1_1RulesConfigurationType(input.RulesConfiguration, context)
    }), input.Type !== undefined && input.Type !== null && {
        Type: input.Type
    });
};
var serializeAws_json1_1RoleMappingMap = function(input, context) {
    return Object.entries(input).reduce(function(acc, _a) {
        var _b;
        var _c = (0, _tslib.__read)(_a, 2), key = _c[0], value = _c[1];
        if (value === null) return acc;
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, acc), (_b = {}, _b[key] = serializeAws_json1_1RoleMapping(value, context), _b));
    }, {});
};
var serializeAws_json1_1RolesMap = function(input, context) {
    return Object.entries(input).reduce(function(acc, _a) {
        var _b;
        var _c = (0, _tslib.__read)(_a, 2), key = _c[0], value = _c[1];
        if (value === null) return acc;
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, acc), (_b = {}, _b[key] = value, _b));
    }, {});
};
var serializeAws_json1_1RulesConfigurationType = function(input, context) {
    return (0, _tslib.__assign)({}, input.Rules !== undefined && input.Rules !== null && {
        Rules: serializeAws_json1_1MappingRulesList(input.Rules, context)
    });
};
var serializeAws_json1_1SAMLProviderList = function(input, context) {
    return input.filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return entry;
    });
};
var serializeAws_json1_1SetIdentityPoolRolesInput = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, input.IdentityPoolId !== undefined && input.IdentityPoolId !== null && {
        IdentityPoolId: input.IdentityPoolId
    }), input.RoleMappings !== undefined && input.RoleMappings !== null && {
        RoleMappings: serializeAws_json1_1RoleMappingMap(input.RoleMappings, context)
    }), input.Roles !== undefined && input.Roles !== null && {
        Roles: serializeAws_json1_1RolesMap(input.Roles, context)
    });
};
var serializeAws_json1_1TagResourceInput = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)({}, input.ResourceArn !== undefined && input.ResourceArn !== null && {
        ResourceArn: input.ResourceArn
    }), input.Tags !== undefined && input.Tags !== null && {
        Tags: serializeAws_json1_1IdentityPoolTagsType(input.Tags, context)
    });
};
var serializeAws_json1_1UnlinkDeveloperIdentityInput = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, input.DeveloperProviderName !== undefined && input.DeveloperProviderName !== null && {
        DeveloperProviderName: input.DeveloperProviderName
    }), input.DeveloperUserIdentifier !== undefined && input.DeveloperUserIdentifier !== null && {
        DeveloperUserIdentifier: input.DeveloperUserIdentifier
    }), input.IdentityId !== undefined && input.IdentityId !== null && {
        IdentityId: input.IdentityId
    }), input.IdentityPoolId !== undefined && input.IdentityPoolId !== null && {
        IdentityPoolId: input.IdentityPoolId
    });
};
var serializeAws_json1_1UnlinkIdentityInput = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, input.IdentityId !== undefined && input.IdentityId !== null && {
        IdentityId: input.IdentityId
    }), input.Logins !== undefined && input.Logins !== null && {
        Logins: serializeAws_json1_1LoginsMap(input.Logins, context)
    }), input.LoginsToRemove !== undefined && input.LoginsToRemove !== null && {
        LoginsToRemove: serializeAws_json1_1LoginsList(input.LoginsToRemove, context)
    });
};
var serializeAws_json1_1UntagResourceInput = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)({}, input.ResourceArn !== undefined && input.ResourceArn !== null && {
        ResourceArn: input.ResourceArn
    }), input.TagKeys !== undefined && input.TagKeys !== null && {
        TagKeys: serializeAws_json1_1IdentityPoolTagsListType(input.TagKeys, context)
    });
};
var deserializeAws_json1_1CognitoIdentityProvider = function(output, context) {
    return {
        ClientId: output.ClientId !== undefined && output.ClientId !== null ? output.ClientId : undefined,
        ProviderName: output.ProviderName !== undefined && output.ProviderName !== null ? output.ProviderName : undefined,
        ServerSideTokenCheck: output.ServerSideTokenCheck !== undefined && output.ServerSideTokenCheck !== null ? output.ServerSideTokenCheck : undefined
    };
};
var deserializeAws_json1_1CognitoIdentityProviderList = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return deserializeAws_json1_1CognitoIdentityProvider(entry, context);
    });
};
var deserializeAws_json1_1ConcurrentModificationException = function(output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined
    };
};
var deserializeAws_json1_1Credentials = function(output, context) {
    return {
        AccessKeyId: output.AccessKeyId !== undefined && output.AccessKeyId !== null ? output.AccessKeyId : undefined,
        Expiration: output.Expiration !== undefined && output.Expiration !== null ? new Date(Math.round(output.Expiration * 1000)) : undefined,
        SecretKey: output.SecretKey !== undefined && output.SecretKey !== null ? output.SecretKey : undefined,
        SessionToken: output.SessionToken !== undefined && output.SessionToken !== null ? output.SessionToken : undefined
    };
};
var deserializeAws_json1_1DeleteIdentitiesResponse = function(output, context) {
    return {
        UnprocessedIdentityIds: output.UnprocessedIdentityIds !== undefined && output.UnprocessedIdentityIds !== null ? deserializeAws_json1_1UnprocessedIdentityIdList(output.UnprocessedIdentityIds, context) : undefined
    };
};
var deserializeAws_json1_1DeveloperUserAlreadyRegisteredException = function(output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined
    };
};
var deserializeAws_json1_1DeveloperUserIdentifierList = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return entry;
    });
};
var deserializeAws_json1_1ExternalServiceException = function(output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined
    };
};
var deserializeAws_json1_1GetCredentialsForIdentityResponse = function(output, context) {
    return {
        Credentials: output.Credentials !== undefined && output.Credentials !== null ? deserializeAws_json1_1Credentials(output.Credentials, context) : undefined,
        IdentityId: output.IdentityId !== undefined && output.IdentityId !== null ? output.IdentityId : undefined
    };
};
var deserializeAws_json1_1GetIdentityPoolRolesResponse = function(output, context) {
    return {
        IdentityPoolId: output.IdentityPoolId !== undefined && output.IdentityPoolId !== null ? output.IdentityPoolId : undefined,
        RoleMappings: output.RoleMappings !== undefined && output.RoleMappings !== null ? deserializeAws_json1_1RoleMappingMap(output.RoleMappings, context) : undefined,
        Roles: output.Roles !== undefined && output.Roles !== null ? deserializeAws_json1_1RolesMap(output.Roles, context) : undefined
    };
};
var deserializeAws_json1_1GetIdResponse = function(output, context) {
    return {
        IdentityId: output.IdentityId !== undefined && output.IdentityId !== null ? output.IdentityId : undefined
    };
};
var deserializeAws_json1_1GetOpenIdTokenForDeveloperIdentityResponse = function(output, context) {
    return {
        IdentityId: output.IdentityId !== undefined && output.IdentityId !== null ? output.IdentityId : undefined,
        Token: output.Token !== undefined && output.Token !== null ? output.Token : undefined
    };
};
var deserializeAws_json1_1GetOpenIdTokenResponse = function(output, context) {
    return {
        IdentityId: output.IdentityId !== undefined && output.IdentityId !== null ? output.IdentityId : undefined,
        Token: output.Token !== undefined && output.Token !== null ? output.Token : undefined
    };
};
var deserializeAws_json1_1IdentitiesList = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return deserializeAws_json1_1IdentityDescription(entry, context);
    });
};
var deserializeAws_json1_1IdentityDescription = function(output, context) {
    return {
        CreationDate: output.CreationDate !== undefined && output.CreationDate !== null ? new Date(Math.round(output.CreationDate * 1000)) : undefined,
        IdentityId: output.IdentityId !== undefined && output.IdentityId !== null ? output.IdentityId : undefined,
        LastModifiedDate: output.LastModifiedDate !== undefined && output.LastModifiedDate !== null ? new Date(Math.round(output.LastModifiedDate * 1000)) : undefined,
        Logins: output.Logins !== undefined && output.Logins !== null ? deserializeAws_json1_1LoginsList(output.Logins, context) : undefined
    };
};
var deserializeAws_json1_1IdentityPool = function(output, context) {
    return {
        AllowClassicFlow: output.AllowClassicFlow !== undefined && output.AllowClassicFlow !== null ? output.AllowClassicFlow : undefined,
        AllowUnauthenticatedIdentities: output.AllowUnauthenticatedIdentities !== undefined && output.AllowUnauthenticatedIdentities !== null ? output.AllowUnauthenticatedIdentities : undefined,
        CognitoIdentityProviders: output.CognitoIdentityProviders !== undefined && output.CognitoIdentityProviders !== null ? deserializeAws_json1_1CognitoIdentityProviderList(output.CognitoIdentityProviders, context) : undefined,
        DeveloperProviderName: output.DeveloperProviderName !== undefined && output.DeveloperProviderName !== null ? output.DeveloperProviderName : undefined,
        IdentityPoolId: output.IdentityPoolId !== undefined && output.IdentityPoolId !== null ? output.IdentityPoolId : undefined,
        IdentityPoolName: output.IdentityPoolName !== undefined && output.IdentityPoolName !== null ? output.IdentityPoolName : undefined,
        IdentityPoolTags: output.IdentityPoolTags !== undefined && output.IdentityPoolTags !== null ? deserializeAws_json1_1IdentityPoolTagsType(output.IdentityPoolTags, context) : undefined,
        OpenIdConnectProviderARNs: output.OpenIdConnectProviderARNs !== undefined && output.OpenIdConnectProviderARNs !== null ? deserializeAws_json1_1OIDCProviderList(output.OpenIdConnectProviderARNs, context) : undefined,
        SamlProviderARNs: output.SamlProviderARNs !== undefined && output.SamlProviderARNs !== null ? deserializeAws_json1_1SAMLProviderList(output.SamlProviderARNs, context) : undefined,
        SupportedLoginProviders: output.SupportedLoginProviders !== undefined && output.SupportedLoginProviders !== null ? deserializeAws_json1_1IdentityProviders(output.SupportedLoginProviders, context) : undefined
    };
};
var deserializeAws_json1_1IdentityPoolShortDescription = function(output, context) {
    return {
        IdentityPoolId: output.IdentityPoolId !== undefined && output.IdentityPoolId !== null ? output.IdentityPoolId : undefined,
        IdentityPoolName: output.IdentityPoolName !== undefined && output.IdentityPoolName !== null ? output.IdentityPoolName : undefined
    };
};
var deserializeAws_json1_1IdentityPoolsList = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return deserializeAws_json1_1IdentityPoolShortDescription(entry, context);
    });
};
var deserializeAws_json1_1IdentityPoolTagsType = function(output, context) {
    return Object.entries(output).reduce(function(acc, _a) {
        var _b;
        var _c = (0, _tslib.__read)(_a, 2), key = _c[0], value = _c[1];
        if (value === null) return acc;
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, acc), (_b = {}, _b[key] = value, _b));
    }, {});
};
var deserializeAws_json1_1IdentityProviders = function(output, context) {
    return Object.entries(output).reduce(function(acc, _a) {
        var _b;
        var _c = (0, _tslib.__read)(_a, 2), key = _c[0], value = _c[1];
        if (value === null) return acc;
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, acc), (_b = {}, _b[key] = value, _b));
    }, {});
};
var deserializeAws_json1_1InternalErrorException = function(output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined
    };
};
var deserializeAws_json1_1InvalidIdentityPoolConfigurationException = function(output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined
    };
};
var deserializeAws_json1_1InvalidParameterException = function(output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined
    };
};
var deserializeAws_json1_1LimitExceededException = function(output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined
    };
};
var deserializeAws_json1_1ListIdentitiesResponse = function(output, context) {
    return {
        Identities: output.Identities !== undefined && output.Identities !== null ? deserializeAws_json1_1IdentitiesList(output.Identities, context) : undefined,
        IdentityPoolId: output.IdentityPoolId !== undefined && output.IdentityPoolId !== null ? output.IdentityPoolId : undefined,
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined
    };
};
var deserializeAws_json1_1ListIdentityPoolsResponse = function(output, context) {
    return {
        IdentityPools: output.IdentityPools !== undefined && output.IdentityPools !== null ? deserializeAws_json1_1IdentityPoolsList(output.IdentityPools, context) : undefined,
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined
    };
};
var deserializeAws_json1_1ListTagsForResourceResponse = function(output, context) {
    return {
        Tags: output.Tags !== undefined && output.Tags !== null ? deserializeAws_json1_1IdentityPoolTagsType(output.Tags, context) : undefined
    };
};
var deserializeAws_json1_1LoginsList = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return entry;
    });
};
var deserializeAws_json1_1LookupDeveloperIdentityResponse = function(output, context) {
    return {
        DeveloperUserIdentifierList: output.DeveloperUserIdentifierList !== undefined && output.DeveloperUserIdentifierList !== null ? deserializeAws_json1_1DeveloperUserIdentifierList(output.DeveloperUserIdentifierList, context) : undefined,
        IdentityId: output.IdentityId !== undefined && output.IdentityId !== null ? output.IdentityId : undefined,
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined
    };
};
var deserializeAws_json1_1MappingRule = function(output, context) {
    return {
        Claim: output.Claim !== undefined && output.Claim !== null ? output.Claim : undefined,
        MatchType: output.MatchType !== undefined && output.MatchType !== null ? output.MatchType : undefined,
        RoleARN: output.RoleARN !== undefined && output.RoleARN !== null ? output.RoleARN : undefined,
        Value: output.Value !== undefined && output.Value !== null ? output.Value : undefined
    };
};
var deserializeAws_json1_1MappingRulesList = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return deserializeAws_json1_1MappingRule(entry, context);
    });
};
var deserializeAws_json1_1MergeDeveloperIdentitiesResponse = function(output, context) {
    return {
        IdentityId: output.IdentityId !== undefined && output.IdentityId !== null ? output.IdentityId : undefined
    };
};
var deserializeAws_json1_1NotAuthorizedException = function(output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined
    };
};
var deserializeAws_json1_1OIDCProviderList = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return entry;
    });
};
var deserializeAws_json1_1ResourceConflictException = function(output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined
    };
};
var deserializeAws_json1_1ResourceNotFoundException = function(output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined
    };
};
var deserializeAws_json1_1RoleMapping = function(output, context) {
    return {
        AmbiguousRoleResolution: output.AmbiguousRoleResolution !== undefined && output.AmbiguousRoleResolution !== null ? output.AmbiguousRoleResolution : undefined,
        RulesConfiguration: output.RulesConfiguration !== undefined && output.RulesConfiguration !== null ? deserializeAws_json1_1RulesConfigurationType(output.RulesConfiguration, context) : undefined,
        Type: output.Type !== undefined && output.Type !== null ? output.Type : undefined
    };
};
var deserializeAws_json1_1RoleMappingMap = function(output, context) {
    return Object.entries(output).reduce(function(acc, _a) {
        var _b;
        var _c = (0, _tslib.__read)(_a, 2), key = _c[0], value = _c[1];
        if (value === null) return acc;
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, acc), (_b = {}, _b[key] = deserializeAws_json1_1RoleMapping(value, context), _b));
    }, {});
};
var deserializeAws_json1_1RolesMap = function(output, context) {
    return Object.entries(output).reduce(function(acc, _a) {
        var _b;
        var _c = (0, _tslib.__read)(_a, 2), key = _c[0], value = _c[1];
        if (value === null) return acc;
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, acc), (_b = {}, _b[key] = value, _b));
    }, {});
};
var deserializeAws_json1_1RulesConfigurationType = function(output, context) {
    return {
        Rules: output.Rules !== undefined && output.Rules !== null ? deserializeAws_json1_1MappingRulesList(output.Rules, context) : undefined
    };
};
var deserializeAws_json1_1SAMLProviderList = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return entry;
    });
};
var deserializeAws_json1_1TagResourceResponse = function(output, context) {
    return {};
};
var deserializeAws_json1_1TooManyRequestsException = function(output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined
    };
};
var deserializeAws_json1_1UnprocessedIdentityId = function(output, context) {
    return {
        ErrorCode: output.ErrorCode !== undefined && output.ErrorCode !== null ? output.ErrorCode : undefined,
        IdentityId: output.IdentityId !== undefined && output.IdentityId !== null ? output.IdentityId : undefined
    };
};
var deserializeAws_json1_1UnprocessedIdentityIdList = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return deserializeAws_json1_1UnprocessedIdentityId(entry, context);
    });
};
var deserializeAws_json1_1UntagResourceResponse = function(output, context) {
    return {};
};
var deserializeMetadata = function(output) {
    var _a;
    return {
        httpStatusCode: output.statusCode,
        requestId: (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"]
    };
};
// Collect low-level response body stream to Uint8Array.
var collectBody = function(streamBody, context) {
    if (streamBody === void 0) streamBody = new Uint8Array();
    if (streamBody instanceof Uint8Array) return Promise.resolve(streamBody);
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
// Encode Uint8Array data into string with utf-8.
var collectBodyString = function(streamBody, context) {
    return collectBody(streamBody, context).then(function(body) {
        return context.utf8Encoder(body);
    });
};
var buildHttpRpcRequest = function(context, headers, path, resolvedHostname, body) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var _a, hostname, _b, protocol, port, contents;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    contents = {
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        path: path,
                        headers: headers
                    };
                    if (resolvedHostname !== undefined) contents.hostname = resolvedHostname;
                    if (body !== undefined) contents.body = body;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)(contents)
                    ];
            }
        });
    });
};
var parseBody = function(streamBody, context) {
    return collectBodyString(streamBody, context).then(function(encoded) {
        if (encoded.length) return JSON.parse(encoded);
        return {};
    });
};
/**
 * Load an error code for the aws.rest-json-1.1 protocol.
 */ var loadRestJsonErrorCode = function(output, data) {
    var findKey = function(object, key) {
        return Object.keys(object).find(function(k) {
            return k.toLowerCase() === key.toLowerCase();
        });
    };
    var sanitizeErrorCode = function(rawValue) {
        var cleanValue = rawValue;
        if (cleanValue.indexOf(":") >= 0) cleanValue = cleanValue.split(":")[0];
        if (cleanValue.indexOf("#") >= 0) cleanValue = cleanValue.split("#")[1];
        return cleanValue;
    };
    var headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) return sanitizeErrorCode(output.headers[headerKey]);
    if (data.code !== undefined) return sanitizeErrorCode(data.code);
    if (data["__type"] !== undefined) return sanitizeErrorCode(data["__type"]);
    return "";
};

},{"tslib":"lRdW5","@aws-sdk/protocol-http":"dbzKK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"feHXf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DeleteIdentitiesCommand", ()=>DeleteIdentitiesCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _middlewareSigning = require("@aws-sdk/middleware-signing");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Deletes identities from an identity pool. You can specify a list of 1-60 identities
 *          that you want to delete.</p>
 *          <p>You must use AWS Developer credentials to call this API.</p>
 */ var DeleteIdentitiesCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(DeleteIdentitiesCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function DeleteIdentitiesCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ DeleteIdentitiesCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareSigning.getAwsAuthPlugin)(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CognitoIdentityClient";
        var commandName = "DeleteIdentitiesCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.DeleteIdentitiesInput).filterSensitiveLog,
            outputFilterSensitiveLog: (0, _models0.DeleteIdentitiesResponse).filterSensitiveLog
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    DeleteIdentitiesCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1DeleteIdentitiesCommand)(input, context);
    };
    DeleteIdentitiesCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1DeleteIdentitiesCommand)(output, context);
    };
    return DeleteIdentitiesCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"k79k4","../protocols/Aws_json1_1":"3sr6F","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/middleware-signing":"7xrR2","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2BSd5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DeleteIdentityPoolCommand", ()=>DeleteIdentityPoolCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _middlewareSigning = require("@aws-sdk/middleware-signing");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Deletes an identity pool. Once a pool is deleted, users will not be able to
 *          authenticate with the pool.</p>
 *          <p>You must use AWS Developer credentials to call this API.</p>
 */ var DeleteIdentityPoolCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(DeleteIdentityPoolCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function DeleteIdentityPoolCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ DeleteIdentityPoolCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareSigning.getAwsAuthPlugin)(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CognitoIdentityClient";
        var commandName = "DeleteIdentityPoolCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.DeleteIdentityPoolInput).filterSensitiveLog,
            outputFilterSensitiveLog: function(output) {
                return output;
            }
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    DeleteIdentityPoolCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1DeleteIdentityPoolCommand)(input, context);
    };
    DeleteIdentityPoolCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1DeleteIdentityPoolCommand)(output, context);
    };
    return DeleteIdentityPoolCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"k79k4","../protocols/Aws_json1_1":"3sr6F","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/middleware-signing":"7xrR2","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bvdzi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DescribeIdentityCommand", ()=>DescribeIdentityCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _middlewareSigning = require("@aws-sdk/middleware-signing");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Returns metadata related to the given identity, including when the identity was
 *          created and any associated linked logins.</p>
 *          <p>You must use AWS Developer credentials to call this API.</p>
 */ var DescribeIdentityCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(DescribeIdentityCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function DescribeIdentityCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ DescribeIdentityCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareSigning.getAwsAuthPlugin)(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CognitoIdentityClient";
        var commandName = "DescribeIdentityCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.DescribeIdentityInput).filterSensitiveLog,
            outputFilterSensitiveLog: (0, _models0.IdentityDescription).filterSensitiveLog
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    DescribeIdentityCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1DescribeIdentityCommand)(input, context);
    };
    DescribeIdentityCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1DescribeIdentityCommand)(output, context);
    };
    return DescribeIdentityCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"k79k4","../protocols/Aws_json1_1":"3sr6F","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/middleware-signing":"7xrR2","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fH5Li":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DescribeIdentityPoolCommand", ()=>DescribeIdentityPoolCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _middlewareSigning = require("@aws-sdk/middleware-signing");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Gets details about a particular identity pool, including the pool name, ID
 *          description, creation date, and current number of users.</p>
 *          <p>You must use AWS Developer credentials to call this API.</p>
 */ var DescribeIdentityPoolCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(DescribeIdentityPoolCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function DescribeIdentityPoolCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ DescribeIdentityPoolCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareSigning.getAwsAuthPlugin)(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CognitoIdentityClient";
        var commandName = "DescribeIdentityPoolCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.DescribeIdentityPoolInput).filterSensitiveLog,
            outputFilterSensitiveLog: (0, _models0.IdentityPool).filterSensitiveLog
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    DescribeIdentityPoolCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1DescribeIdentityPoolCommand)(input, context);
    };
    DescribeIdentityPoolCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1DescribeIdentityPoolCommand)(output, context);
    };
    return DescribeIdentityPoolCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"k79k4","../protocols/Aws_json1_1":"3sr6F","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/middleware-signing":"7xrR2","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hQK33":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GetCredentialsForIdentityCommand", ()=>GetCredentialsForIdentityCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Returns credentials for the provided identity ID. Any provided logins will be
 *          validated against supported login providers. If the token is for
 *          cognito-identity.amazonaws.com, it will be passed through to AWS Security Token Service
 *          with the appropriate role for the token.</p>
 *          <p>This is a public API. You do not need any credentials to call this API.</p>
 */ var GetCredentialsForIdentityCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(GetCredentialsForIdentityCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function GetCredentialsForIdentityCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ GetCredentialsForIdentityCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CognitoIdentityClient";
        var commandName = "GetCredentialsForIdentityCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.GetCredentialsForIdentityInput).filterSensitiveLog,
            outputFilterSensitiveLog: (0, _models0.GetCredentialsForIdentityResponse).filterSensitiveLog
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    GetCredentialsForIdentityCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1GetCredentialsForIdentityCommand)(input, context);
    };
    GetCredentialsForIdentityCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1GetCredentialsForIdentityCommand)(output, context);
    };
    return GetCredentialsForIdentityCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"k79k4","../protocols/Aws_json1_1":"3sr6F","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4yuUU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GetIdCommand", ()=>GetIdCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Generates (or retrieves) a Cognito ID. Supplying multiple logins will create an
 *          implicit linked account.</p>
 *          <p>This is a public API. You do not need any credentials to call this API.</p>
 */ var GetIdCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(GetIdCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function GetIdCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ GetIdCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CognitoIdentityClient";
        var commandName = "GetIdCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.GetIdInput).filterSensitiveLog,
            outputFilterSensitiveLog: (0, _models0.GetIdResponse).filterSensitiveLog
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    GetIdCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1GetIdCommand)(input, context);
    };
    GetIdCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1GetIdCommand)(output, context);
    };
    return GetIdCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"k79k4","../protocols/Aws_json1_1":"3sr6F","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4JFs7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GetIdentityPoolRolesCommand", ()=>GetIdentityPoolRolesCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _middlewareSigning = require("@aws-sdk/middleware-signing");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Gets the roles for an identity pool.</p>
 *          <p>You must use AWS Developer credentials to call this API.</p>
 */ var GetIdentityPoolRolesCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(GetIdentityPoolRolesCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function GetIdentityPoolRolesCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ GetIdentityPoolRolesCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareSigning.getAwsAuthPlugin)(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CognitoIdentityClient";
        var commandName = "GetIdentityPoolRolesCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.GetIdentityPoolRolesInput).filterSensitiveLog,
            outputFilterSensitiveLog: (0, _models0.GetIdentityPoolRolesResponse).filterSensitiveLog
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    GetIdentityPoolRolesCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1GetIdentityPoolRolesCommand)(input, context);
    };
    GetIdentityPoolRolesCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1GetIdentityPoolRolesCommand)(output, context);
    };
    return GetIdentityPoolRolesCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"k79k4","../protocols/Aws_json1_1":"3sr6F","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/middleware-signing":"7xrR2","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hSuZN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GetOpenIdTokenCommand", ()=>GetOpenIdTokenCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Gets an OpenID token, using a known Cognito ID. This known Cognito ID is returned by
 *             <a>GetId</a>. You can optionally add additional logins for the identity.
 *          Supplying multiple logins creates an implicit link.</p>
 *          <p>The OpenId token is valid for 10 minutes.</p>
 *          <p>This is a public API. You do not need any credentials to call this API.</p>
 */ var GetOpenIdTokenCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(GetOpenIdTokenCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function GetOpenIdTokenCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ GetOpenIdTokenCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CognitoIdentityClient";
        var commandName = "GetOpenIdTokenCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.GetOpenIdTokenInput).filterSensitiveLog,
            outputFilterSensitiveLog: (0, _models0.GetOpenIdTokenResponse).filterSensitiveLog
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    GetOpenIdTokenCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1GetOpenIdTokenCommand)(input, context);
    };
    GetOpenIdTokenCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1GetOpenIdTokenCommand)(output, context);
    };
    return GetOpenIdTokenCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"k79k4","../protocols/Aws_json1_1":"3sr6F","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4EA8n":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GetOpenIdTokenForDeveloperIdentityCommand", ()=>GetOpenIdTokenForDeveloperIdentityCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _middlewareSigning = require("@aws-sdk/middleware-signing");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Registers (or retrieves) a Cognito <code>IdentityId</code> and an OpenID Connect
 *          token for a user authenticated by your backend authentication process. Supplying multiple
 *          logins will create an implicit linked account. You can only specify one developer provider
 *          as part of the <code>Logins</code> map, which is linked to the identity pool. The developer
 *          provider is the "domain" by which Cognito will refer to your users.</p>
 *          <p>You can use <code>GetOpenIdTokenForDeveloperIdentity</code> to create a new identity
 *          and to link new logins (that is, user credentials issued by a public provider or developer
 *          provider) to an existing identity. When you want to create a new identity, the
 *             <code>IdentityId</code> should be null. When you want to associate a new login with an
 *          existing authenticated/unauthenticated identity, you can do so by providing the existing
 *             <code>IdentityId</code>. This API will create the identity in the specified
 *             <code>IdentityPoolId</code>.</p>
 *          <p>You must use AWS Developer credentials to call this API.</p>
 */ var GetOpenIdTokenForDeveloperIdentityCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(GetOpenIdTokenForDeveloperIdentityCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function GetOpenIdTokenForDeveloperIdentityCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ GetOpenIdTokenForDeveloperIdentityCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareSigning.getAwsAuthPlugin)(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CognitoIdentityClient";
        var commandName = "GetOpenIdTokenForDeveloperIdentityCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.GetOpenIdTokenForDeveloperIdentityInput).filterSensitiveLog,
            outputFilterSensitiveLog: (0, _models0.GetOpenIdTokenForDeveloperIdentityResponse).filterSensitiveLog
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    GetOpenIdTokenForDeveloperIdentityCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand)(input, context);
    };
    GetOpenIdTokenForDeveloperIdentityCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand)(output, context);
    };
    return GetOpenIdTokenForDeveloperIdentityCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"k79k4","../protocols/Aws_json1_1":"3sr6F","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/middleware-signing":"7xrR2","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"X0a7D":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ListIdentitiesCommand", ()=>ListIdentitiesCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _middlewareSigning = require("@aws-sdk/middleware-signing");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Lists the identities in an identity pool.</p>
 *          <p>You must use AWS Developer credentials to call this API.</p>
 */ var ListIdentitiesCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(ListIdentitiesCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function ListIdentitiesCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ ListIdentitiesCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareSigning.getAwsAuthPlugin)(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CognitoIdentityClient";
        var commandName = "ListIdentitiesCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.ListIdentitiesInput).filterSensitiveLog,
            outputFilterSensitiveLog: (0, _models0.ListIdentitiesResponse).filterSensitiveLog
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    ListIdentitiesCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1ListIdentitiesCommand)(input, context);
    };
    ListIdentitiesCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1ListIdentitiesCommand)(output, context);
    };
    return ListIdentitiesCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"k79k4","../protocols/Aws_json1_1":"3sr6F","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/middleware-signing":"7xrR2","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"67GkQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ListIdentityPoolsCommand", ()=>ListIdentityPoolsCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _middlewareSigning = require("@aws-sdk/middleware-signing");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Lists all of the Cognito identity pools registered for your account.</p>
 *          <p>You must use AWS Developer credentials to call this API.</p>
 */ var ListIdentityPoolsCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(ListIdentityPoolsCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function ListIdentityPoolsCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ ListIdentityPoolsCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareSigning.getAwsAuthPlugin)(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CognitoIdentityClient";
        var commandName = "ListIdentityPoolsCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.ListIdentityPoolsInput).filterSensitiveLog,
            outputFilterSensitiveLog: (0, _models0.ListIdentityPoolsResponse).filterSensitiveLog
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    ListIdentityPoolsCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1ListIdentityPoolsCommand)(input, context);
    };
    ListIdentityPoolsCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1ListIdentityPoolsCommand)(output, context);
    };
    return ListIdentityPoolsCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"k79k4","../protocols/Aws_json1_1":"3sr6F","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/middleware-signing":"7xrR2","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"72e2u":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ListTagsForResourceCommand", ()=>ListTagsForResourceCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _middlewareSigning = require("@aws-sdk/middleware-signing");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Lists the tags that are assigned to an Amazon Cognito identity pool.</p>
 *          <p>A tag is a label that you can apply to identity pools to categorize and manage them in
 *          different ways, such as by purpose, owner, environment, or other criteria.</p>
 *          <p>You can use this action up to 10 times per second, per account.</p>
 */ var ListTagsForResourceCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(ListTagsForResourceCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function ListTagsForResourceCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ ListTagsForResourceCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareSigning.getAwsAuthPlugin)(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CognitoIdentityClient";
        var commandName = "ListTagsForResourceCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.ListTagsForResourceInput).filterSensitiveLog,
            outputFilterSensitiveLog: (0, _models0.ListTagsForResourceResponse).filterSensitiveLog
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    ListTagsForResourceCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1ListTagsForResourceCommand)(input, context);
    };
    ListTagsForResourceCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1ListTagsForResourceCommand)(output, context);
    };
    return ListTagsForResourceCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"k79k4","../protocols/Aws_json1_1":"3sr6F","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/middleware-signing":"7xrR2","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4QUGD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LookupDeveloperIdentityCommand", ()=>LookupDeveloperIdentityCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _middlewareSigning = require("@aws-sdk/middleware-signing");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Retrieves the <code>IdentityID</code> associated with a
 *             <code>DeveloperUserIdentifier</code> or the list of <code>DeveloperUserIdentifier</code>
 *          values associated with an <code>IdentityId</code> for an existing identity. Either
 *             <code>IdentityID</code> or <code>DeveloperUserIdentifier</code> must not be null. If you
 *          supply only one of these values, the other value will be searched in the database and
 *          returned as a part of the response. If you supply both,
 *             <code>DeveloperUserIdentifier</code> will be matched against <code>IdentityID</code>. If
 *          the values are verified against the database, the response returns both values and is the
 *          same as the request. Otherwise a <code>ResourceConflictException</code> is
 *          thrown.</p>
 *          <p>
 *             <code>LookupDeveloperIdentity</code> is intended for low-throughput control plane
 *          operations: for example, to enable customer service to locate an identity ID by username.
 *          If you are using it for higher-volume operations such as user authentication, your requests
 *          are likely to be throttled. <a>GetOpenIdTokenForDeveloperIdentity</a> is a
 *          better option for higher-volume operations for user authentication.</p>
 *          <p>You must use AWS Developer credentials to call this API.</p>
 */ var LookupDeveloperIdentityCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(LookupDeveloperIdentityCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function LookupDeveloperIdentityCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ LookupDeveloperIdentityCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareSigning.getAwsAuthPlugin)(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CognitoIdentityClient";
        var commandName = "LookupDeveloperIdentityCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.LookupDeveloperIdentityInput).filterSensitiveLog,
            outputFilterSensitiveLog: (0, _models0.LookupDeveloperIdentityResponse).filterSensitiveLog
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    LookupDeveloperIdentityCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1LookupDeveloperIdentityCommand)(input, context);
    };
    LookupDeveloperIdentityCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1LookupDeveloperIdentityCommand)(output, context);
    };
    return LookupDeveloperIdentityCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"k79k4","../protocols/Aws_json1_1":"3sr6F","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/middleware-signing":"7xrR2","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1a82C":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MergeDeveloperIdentitiesCommand", ()=>MergeDeveloperIdentitiesCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _middlewareSigning = require("@aws-sdk/middleware-signing");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Merges two users having different <code>IdentityId</code>s, existing in the same
 *          identity pool, and identified by the same developer provider. You can use this action to
 *          request that discrete users be merged and identified as a single user in the Cognito
 *          environment. Cognito associates the given source user (<code>SourceUserIdentifier</code>)
 *          with the <code>IdentityId</code> of the <code>DestinationUserIdentifier</code>. Only
 *          developer-authenticated users can be merged. If the users to be merged are associated with
 *          the same public provider, but as two different users, an exception will be
 *          thrown.</p>
 *          <p>The number of linked logins is limited to 20. So, the number of linked logins for the
 *          source user, <code>SourceUserIdentifier</code>, and the destination user,
 *          <code>DestinationUserIdentifier</code>, together should not be larger than 20.
 *          Otherwise, an exception will be thrown.</p>
 *          <p>You must use AWS Developer credentials to call this API.</p>
 */ var MergeDeveloperIdentitiesCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(MergeDeveloperIdentitiesCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function MergeDeveloperIdentitiesCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ MergeDeveloperIdentitiesCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareSigning.getAwsAuthPlugin)(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CognitoIdentityClient";
        var commandName = "MergeDeveloperIdentitiesCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.MergeDeveloperIdentitiesInput).filterSensitiveLog,
            outputFilterSensitiveLog: (0, _models0.MergeDeveloperIdentitiesResponse).filterSensitiveLog
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    MergeDeveloperIdentitiesCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1MergeDeveloperIdentitiesCommand)(input, context);
    };
    MergeDeveloperIdentitiesCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1MergeDeveloperIdentitiesCommand)(output, context);
    };
    return MergeDeveloperIdentitiesCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"k79k4","../protocols/Aws_json1_1":"3sr6F","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/middleware-signing":"7xrR2","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5AF9n":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SetIdentityPoolRolesCommand", ()=>SetIdentityPoolRolesCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _middlewareSigning = require("@aws-sdk/middleware-signing");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Sets the roles for an identity pool. These roles are used when making calls to <a>GetCredentialsForIdentity</a> action.</p>
 *          <p>You must use AWS Developer credentials to call this API.</p>
 */ var SetIdentityPoolRolesCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(SetIdentityPoolRolesCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function SetIdentityPoolRolesCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ SetIdentityPoolRolesCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareSigning.getAwsAuthPlugin)(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CognitoIdentityClient";
        var commandName = "SetIdentityPoolRolesCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.SetIdentityPoolRolesInput).filterSensitiveLog,
            outputFilterSensitiveLog: function(output) {
                return output;
            }
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    SetIdentityPoolRolesCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1SetIdentityPoolRolesCommand)(input, context);
    };
    SetIdentityPoolRolesCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1SetIdentityPoolRolesCommand)(output, context);
    };
    return SetIdentityPoolRolesCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"k79k4","../protocols/Aws_json1_1":"3sr6F","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/middleware-signing":"7xrR2","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dTzMp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TagResourceCommand", ()=>TagResourceCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _middlewareSigning = require("@aws-sdk/middleware-signing");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Assigns a set of tags to an Amazon Cognito identity pool. A tag is a label that you can
 *          use to categorize and manage identity pools in different ways, such as by purpose, owner,
 *          environment, or other criteria.</p>
 *          <p>Each tag consists of a key and value, both of which you define. A key is a general
 *          category for more specific values. For example, if you have two versions of an identity
 *          pool, one for testing and another for production, you might assign an
 *             <code>Environment</code> tag key to both identity pools. The value of this key might be
 *             <code>Test</code> for one identity pool and <code>Production</code> for the
 *          other.</p>
 *          <p>Tags are useful for cost tracking and access control. You can activate your tags so that
 *          they appear on the Billing and Cost Management console, where you can track the costs
 *          associated with your identity pools. In an IAM policy, you can constrain permissions for
 *          identity pools based on specific tags or tag values.</p>
 *          <p>You can use this action up to 5 times per second, per account. An identity pool can have
 *          as many as 50 tags.</p>
 */ var TagResourceCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(TagResourceCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function TagResourceCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ TagResourceCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareSigning.getAwsAuthPlugin)(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CognitoIdentityClient";
        var commandName = "TagResourceCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.TagResourceInput).filterSensitiveLog,
            outputFilterSensitiveLog: (0, _models0.TagResourceResponse).filterSensitiveLog
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    TagResourceCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1TagResourceCommand)(input, context);
    };
    TagResourceCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1TagResourceCommand)(output, context);
    };
    return TagResourceCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"k79k4","../protocols/Aws_json1_1":"3sr6F","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/middleware-signing":"7xrR2","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cps4w":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "UnlinkDeveloperIdentityCommand", ()=>UnlinkDeveloperIdentityCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _middlewareSigning = require("@aws-sdk/middleware-signing");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Unlinks a <code>DeveloperUserIdentifier</code> from an existing identity. Unlinked
 *          developer users will be considered new identities next time they are seen. If, for a given
 *          Cognito identity, you remove all federated identities as well as the developer user
 *          identifier, the Cognito identity becomes inaccessible.</p>
 *          <p>You must use AWS Developer credentials to call this API.</p>
 */ var UnlinkDeveloperIdentityCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(UnlinkDeveloperIdentityCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function UnlinkDeveloperIdentityCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ UnlinkDeveloperIdentityCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareSigning.getAwsAuthPlugin)(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CognitoIdentityClient";
        var commandName = "UnlinkDeveloperIdentityCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.UnlinkDeveloperIdentityInput).filterSensitiveLog,
            outputFilterSensitiveLog: function(output) {
                return output;
            }
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    UnlinkDeveloperIdentityCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1UnlinkDeveloperIdentityCommand)(input, context);
    };
    UnlinkDeveloperIdentityCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1UnlinkDeveloperIdentityCommand)(output, context);
    };
    return UnlinkDeveloperIdentityCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"k79k4","../protocols/Aws_json1_1":"3sr6F","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/middleware-signing":"7xrR2","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7bFwt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "UnlinkIdentityCommand", ()=>UnlinkIdentityCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Unlinks a federated identity from an existing account. Unlinked logins will be
 *          considered new identities next time they are seen. Removing the last linked login will make
 *          this identity inaccessible.</p>
 *          <p>This is a public API. You do not need any credentials to call this API.</p>
 */ var UnlinkIdentityCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(UnlinkIdentityCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function UnlinkIdentityCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ UnlinkIdentityCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CognitoIdentityClient";
        var commandName = "UnlinkIdentityCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.UnlinkIdentityInput).filterSensitiveLog,
            outputFilterSensitiveLog: function(output) {
                return output;
            }
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    UnlinkIdentityCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1UnlinkIdentityCommand)(input, context);
    };
    UnlinkIdentityCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1UnlinkIdentityCommand)(output, context);
    };
    return UnlinkIdentityCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"k79k4","../protocols/Aws_json1_1":"3sr6F","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dqfrd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "UntagResourceCommand", ()=>UntagResourceCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _middlewareSigning = require("@aws-sdk/middleware-signing");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Removes the specified tags from an Amazon Cognito identity pool. You can use this action
 *          up to 5 times per second, per account</p>
 */ var UntagResourceCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(UntagResourceCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function UntagResourceCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ UntagResourceCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareSigning.getAwsAuthPlugin)(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CognitoIdentityClient";
        var commandName = "UntagResourceCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.UntagResourceInput).filterSensitiveLog,
            outputFilterSensitiveLog: (0, _models0.UntagResourceResponse).filterSensitiveLog
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    UntagResourceCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1UntagResourceCommand)(input, context);
    };
    UntagResourceCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1UntagResourceCommand)(output, context);
    };
    return UntagResourceCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"k79k4","../protocols/Aws_json1_1":"3sr6F","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/middleware-signing":"7xrR2","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"khfzc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "UpdateIdentityPoolCommand", ()=>UpdateIdentityPoolCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _middlewareSigning = require("@aws-sdk/middleware-signing");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Updates an identity pool.</p>
 *          <p>You must use AWS Developer credentials to call this API.</p>
 */ var UpdateIdentityPoolCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(UpdateIdentityPoolCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function UpdateIdentityPoolCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ UpdateIdentityPoolCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareSigning.getAwsAuthPlugin)(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CognitoIdentityClient";
        var commandName = "UpdateIdentityPoolCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.IdentityPool).filterSensitiveLog,
            outputFilterSensitiveLog: (0, _models0.IdentityPool).filterSensitiveLog
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    UpdateIdentityPoolCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1UpdateIdentityPoolCommand)(input, context);
    };
    UpdateIdentityPoolCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1UpdateIdentityPoolCommand)(output, context);
    };
    return UpdateIdentityPoolCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"k79k4","../protocols/Aws_json1_1":"3sr6F","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/middleware-signing":"7xrR2","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4vhX5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "paginateListIdentityPools", ()=>paginateListIdentityPools);
var _tslib = require("tslib");
var _cognitoIdentity = require("../CognitoIdentity");
var _cognitoIdentityClient = require("../CognitoIdentityClient");
var _listIdentityPoolsCommand = require("../commands/ListIdentityPoolsCommand");
/**
 * @private
 */ var makePagedClientRequest = function(client, input) {
    var args = [];
    for(var _i = 2; _i < arguments.length; _i++)args[_i - 2] = arguments[_i];
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    return [
                        4 /*yield*/ ,
                        client.send.apply(client, (0, _tslib.__spread)([
                            new (0, _listIdentityPoolsCommand.ListIdentityPoolsCommand)(input)
                        ], args))
                    ];
                case 1:
                    // @ts-ignore
                    return [
                        2 /*return*/ ,
                        _a.sent()
                    ];
            }
        });
    });
};
/**
 * @private
 */ var makePagedRequest = function(client, input) {
    var args = [];
    for(var _i = 2; _i < arguments.length; _i++)args[_i - 2] = arguments[_i];
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    return [
                        4 /*yield*/ ,
                        client.listIdentityPools.apply(client, (0, _tslib.__spread)([
                            input
                        ], args))
                    ];
                case 1:
                    // @ts-ignore
                    return [
                        2 /*return*/ ,
                        _a.sent()
                    ];
            }
        });
    });
};
function paginateListIdentityPools(config, input) {
    var additionalArguments = [];
    for(var _i = 2; _i < arguments.length; _i++)additionalArguments[_i - 2] = arguments[_i];
    return (0, _tslib.__asyncGenerator)(this, arguments, function paginateListIdentityPools_1() {
        var token, hasNext, page;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    token = config.startingToken || undefined;
                    hasNext = true;
                    _a.label = 1;
                case 1:
                    if (!hasNext) return [
                        3 /*break*/ ,
                        9
                    ];
                    input.NextToken = token;
                    input["MaxResults"] = config.pageSize;
                    if (!(config.client instanceof (0, _cognitoIdentity.CognitoIdentity))) return [
                        3 /*break*/ ,
                        3
                    ];
                    return [
                        4 /*yield*/ ,
                        (0, _tslib.__await)(makePagedRequest.apply(void 0, (0, _tslib.__spread)([
                            config.client,
                            input
                        ], additionalArguments)))
                    ];
                case 2:
                    page = _a.sent();
                    return [
                        3 /*break*/ ,
                        6
                    ];
                case 3:
                    if (!(config.client instanceof (0, _cognitoIdentityClient.CognitoIdentityClient))) return [
                        3 /*break*/ ,
                        5
                    ];
                    return [
                        4 /*yield*/ ,
                        (0, _tslib.__await)(makePagedClientRequest.apply(void 0, (0, _tslib.__spread)([
                            config.client,
                            input
                        ], additionalArguments)))
                    ];
                case 4:
                    page = _a.sent();
                    return [
                        3 /*break*/ ,
                        6
                    ];
                case 5:
                    throw new Error("Invalid client, expected CognitoIdentity | CognitoIdentityClient");
                case 6:
                    return [
                        4 /*yield*/ ,
                        (0, _tslib.__await)(page)
                    ];
                case 7:
                    return [
                        4 /*yield*/ ,
                        _a.sent()
                    ];
                case 8:
                    _a.sent();
                    token = page.NextToken;
                    hasNext = !!token;
                    return [
                        3 /*break*/ ,
                        1
                    ];
                case 9:
                    return [
                        4 /*yield*/ ,
                        (0, _tslib.__await)(undefined)
                    ];
                case 10:
                    // @ts-ignore
                    return [
                        2 /*return*/ ,
                        _a.sent()
                    ];
            }
        });
    });
}

},{"tslib":"lRdW5","../CognitoIdentity":"7p0Bm","../CognitoIdentityClient":"1Nf7t","../commands/ListIdentityPoolsCommand":"67GkQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jXKli":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8ftZ2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _models0 = require("./models_0");
parcelHelpers.exportAll(_models0, exports);

},{"./models_0":"k79k4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hAZuM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _chain = require("./chain");
parcelHelpers.exportAll(_chain, exports);
var _fromStatic = require("./fromStatic");
parcelHelpers.exportAll(_fromStatic, exports);
var _memoize = require("./memoize");
parcelHelpers.exportAll(_memoize, exports);
var _providerError = require("./ProviderError");
parcelHelpers.exportAll(_providerError, exports);

},{"./chain":"7LYIf","./fromStatic":"h2oyb","./memoize":"1fSWB","./ProviderError":"lwOKl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7LYIf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Compose a single credential provider function from multiple credential
 * providers. The first provider in the argument list will always be invoked;
 * subsequent providers in the list will be invoked in the order in which the
 * were received if the preceding provider did not successfully resolve.
 *
 * If no providers were received or no provider resolves successfully, the
 * returned promise will be rejected.
 */ parcelHelpers.export(exports, "chain", ()=>chain);
var _tslib = require("tslib");
var _providerError = require("./ProviderError");
function chain() {
    var providers = [];
    for(var _i = 0; _i < arguments.length; _i++)providers[_i] = arguments[_i];
    return function() {
        var e_1, _a;
        var promise = Promise.reject(new (0, _providerError.ProviderError)("No providers in chain"));
        var _loop_1 = function(provider) {
            promise = promise.catch(function(err) {
                if (err === null || err === void 0 ? void 0 : err.tryNextLink) return provider();
                throw err;
            });
        };
        try {
            for(var providers_1 = (0, _tslib.__values)(providers), providers_1_1 = providers_1.next(); !providers_1_1.done; providers_1_1 = providers_1.next()){
                var provider = providers_1_1.value;
                _loop_1(provider);
            }
        } catch (e_1_1) {
            e_1 = {
                error: e_1_1
            };
        } finally{
            try {
                if (providers_1_1 && !providers_1_1.done && (_a = providers_1.return)) _a.call(providers_1);
            } finally{
                if (e_1) throw e_1.error;
            }
        }
        return promise;
    };
}

},{"tslib":"kfqt5","./ProviderError":"lwOKl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kfqt5":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lwOKl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ProviderError", ()=>ProviderError);
var _tslib = require("tslib");
/**
 * An error representing a failure of an individual credential provider.
 *
 * This error class has special meaning to the {@link chain} method. If a
 * provider in the chain is rejected with an error, the chain will only proceed
 * to the next provider if the value of the `tryNextLink` property on the error
 * is truthy. This allows individual providers to halt the chain and also
 * ensures the chain will stop if an entirely unexpected error is encountered.
 */ var ProviderError = /** @class */ function(_super) {
    (0, _tslib.__extends)(ProviderError, _super);
    function ProviderError(message, tryNextLink) {
        if (tryNextLink === void 0) tryNextLink = true;
        var _this = _super.call(this, message) || this;
        _this.tryNextLink = tryNextLink;
        return _this;
    }
    return ProviderError;
}(Error);

},{"tslib":"kfqt5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h2oyb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fromStatic", ()=>fromStatic);
var fromStatic = function(staticValue) {
    return function() {
        return Promise.resolve(staticValue);
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1fSWB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "memoize", ()=>memoize);
var _tslib = require("tslib");
var memoize = function(provider, isExpired, requiresRefresh) {
    var result;
    var hasResult;
    if (isExpired === undefined) // This is a static memoization; no need to incorporate refreshing
    return function() {
        if (!hasResult) {
            result = provider();
            hasResult = true;
        }
        return result;
    };
    var isConstant = false;
    return function() {
        return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
            var resolved;
            return (0, _tslib.__generator)(this, function(_a) {
                switch(_a.label){
                    case 0:
                        if (!hasResult) {
                            result = provider();
                            hasResult = true;
                        }
                        if (isConstant) return [
                            2 /*return*/ ,
                            result
                        ];
                        return [
                            4 /*yield*/ ,
                            result
                        ];
                    case 1:
                        resolved = _a.sent();
                        if (requiresRefresh && !requiresRefresh(resolved)) {
                            isConstant = true;
                            return [
                                2 /*return*/ ,
                                resolved
                            ];
                        }
                        if (isExpired(resolved)) return [
                            2 /*return*/ ,
                            result = provider()
                        ];
                        return [
                            2 /*return*/ ,
                            resolved
                        ];
                }
            });
        });
    };
};

},{"tslib":"kfqt5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lCi3C":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @internal
 */ parcelHelpers.export(exports, "resolveLogins", ()=>resolveLogins);
var _tslib = require("tslib");
function resolveLogins(logins) {
    return Promise.all(Object.keys(logins).reduce(function(arr, name) {
        var tokenOrProvider = logins[name];
        if (typeof tokenOrProvider === "string") arr.push([
            name,
            tokenOrProvider
        ]);
        else arr.push(tokenOrProvider().then(function(token) {
            return [
                name,
                token
            ];
        }));
        return arr;
    }, [])).then(function(resolvedPairs) {
        return resolvedPairs.reduce(function(logins, _a) {
            var _b = (0, _tslib.__read)(_a, 2), key = _b[0], value = _b[1];
            logins[key] = value;
            return logins;
        }, {});
    });
}

},{"tslib":"fvjju","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4UQMg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Retrieves or generates a unique identifier using Amazon Cognito's `GetId`
 * operation, then generates temporary AWS credentials using Amazon Cognito's
 * `GetCredentialsForIdentity` operation.
 *
 * Results from `GetId` are cached internally, but results from
 * `GetCredentialsForIdentity` are not.
 */ parcelHelpers.export(exports, "fromCognitoIdentityPool", ()=>fromCognitoIdentityPool);
var _tslib = require("tslib");
var _clientCognitoIdentity = require("@aws-sdk/client-cognito-identity");
var _propertyProvider = require("@aws-sdk/property-provider");
var _fromCognitoIdentity = require("./fromCognitoIdentity");
var _localStorage = require("./localStorage");
var _resolveLogins = require("./resolveLogins");
function fromCognitoIdentityPool(_a) {
    var _this = this;
    var accountId = _a.accountId, _b = _a.cache, cache = _b === void 0 ? (0, _localStorage.localStorage)() : _b, client = _a.client, customRoleArn = _a.customRoleArn, identityPoolId = _a.identityPoolId, logins = _a.logins, _c = _a.userIdentifier, userIdentifier = _c === void 0 ? !logins || Object.keys(logins).length === 0 ? "ANONYMOUS" : undefined : _c;
    var cacheKey = userIdentifier ? "aws:cognito-identity-credentials:" + identityPoolId + ":" + userIdentifier : undefined;
    var provider = function() {
        return (0, _tslib.__awaiter)(_this, void 0, void 0, function() {
            var identityId, _a, _b, IdentityId, _c, _d, _e, _f;
            var _g;
            return (0, _tslib.__generator)(this, function(_h) {
                switch(_h.label){
                    case 0:
                        _a = cacheKey;
                        if (!_a) return [
                            3 /*break*/ ,
                            2
                        ];
                        return [
                            4 /*yield*/ ,
                            cache.getItem(cacheKey)
                        ];
                    case 1:
                        _a = _h.sent();
                        _h.label = 2;
                    case 2:
                        identityId = _a;
                        if (!!identityId) return [
                            3 /*break*/ ,
                            7
                        ];
                        _d = (_c = client).send;
                        _e = (0, _clientCognitoIdentity.GetIdCommand).bind;
                        _g = {
                            AccountId: accountId,
                            IdentityPoolId: identityPoolId
                        };
                        if (!logins) return [
                            3 /*break*/ ,
                            4
                        ];
                        return [
                            4 /*yield*/ ,
                            (0, _resolveLogins.resolveLogins)(logins)
                        ];
                    case 3:
                        _f = _h.sent();
                        return [
                            3 /*break*/ ,
                            5
                        ];
                    case 4:
                        _f = undefined;
                        _h.label = 5;
                    case 5:
                        return [
                            4 /*yield*/ ,
                            _d.apply(_c, [
                                new (_e.apply((0, _clientCognitoIdentity.GetIdCommand), [
                                    void 0,
                                    (_g.Logins = _f, _g)
                                ]))()
                            ])
                        ];
                    case 6:
                        _b = _h.sent().IdentityId, IdentityId = _b === void 0 ? throwOnMissingId() : _b;
                        identityId = IdentityId;
                        if (cacheKey) Promise.resolve(cache.setItem(cacheKey, identityId)).catch(function() {});
                        _h.label = 7;
                    case 7:
                        provider = (0, _fromCognitoIdentity.fromCognitoIdentity)({
                            client: client,
                            customRoleArn: customRoleArn,
                            logins: logins,
                            identityId: identityId
                        });
                        return [
                            2 /*return*/ ,
                            provider()
                        ];
                }
            });
        });
    };
    return function() {
        return provider().catch(function(err) {
            return (0, _tslib.__awaiter)(_this, void 0, void 0, function() {
                return (0, _tslib.__generator)(this, function(_a) {
                    if (cacheKey) Promise.resolve(cache.removeItem(cacheKey)).catch(function() {});
                    throw err;
                });
            });
        });
    };
}
function throwOnMissingId() {
    throw new (0, _propertyProvider.ProviderError)("Response from Amazon Cognito contained no identity ID");
}

},{"tslib":"fvjju","@aws-sdk/client-cognito-identity":"6STYA","@aws-sdk/property-provider":"hAZuM","./fromCognitoIdentity":"d8ZgH","./localStorage":"kwUkb","./resolveLogins":"lCi3C","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kwUkb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "localStorage", ()=>localStorage);
var _indexedDbStorage = require("./IndexedDbStorage");
var _inMemoryStorage = require("./InMemoryStorage");
var inMemoryStorage = new (0, _inMemoryStorage.InMemoryStorage)();
function localStorage() {
    if (typeof self === "object" && self.indexedDB) return new (0, _indexedDbStorage.IndexedDbStorage)();
    if (typeof window === "object" && window.localStorage) return window.localStorage;
    return inMemoryStorage;
}

},{"./IndexedDbStorage":"hHWv9","./InMemoryStorage":"ahA5s","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hHWv9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "IndexedDbStorage", ()=>IndexedDbStorage);
var STORE_NAME = "IdentityIds";
var IndexedDbStorage = /** @class */ function() {
    function IndexedDbStorage(dbName) {
        if (dbName === void 0) dbName = "aws:cognito-identity-ids";
        this.dbName = dbName;
    }
    IndexedDbStorage.prototype.getItem = function(key) {
        return this.withObjectStore("readonly", function(store) {
            var req = store.get(key);
            return new Promise(function(resolve) {
                req.onerror = function() {
                    return resolve(null);
                };
                req.onsuccess = function() {
                    return resolve(req.result ? req.result.value : null);
                };
            });
        }).catch(function() {
            return null;
        });
    };
    IndexedDbStorage.prototype.removeItem = function(key) {
        return this.withObjectStore("readwrite", function(store) {
            var req = store.delete(key);
            return new Promise(function(resolve, reject) {
                req.onerror = function() {
                    return reject(req.error);
                };
                req.onsuccess = function() {
                    return resolve();
                };
            });
        });
    };
    IndexedDbStorage.prototype.setItem = function(id, value) {
        return this.withObjectStore("readwrite", function(store) {
            var req = store.put({
                id: id,
                value: value
            });
            return new Promise(function(resolve, reject) {
                req.onerror = function() {
                    return reject(req.error);
                };
                req.onsuccess = function() {
                    return resolve();
                };
            });
        });
    };
    IndexedDbStorage.prototype.getDb = function() {
        var openDbRequest = self.indexedDB.open(this.dbName, 1);
        return new Promise(function(resolve, reject) {
            openDbRequest.onsuccess = function() {
                resolve(openDbRequest.result);
            };
            openDbRequest.onerror = function() {
                reject(openDbRequest.error);
            };
            openDbRequest.onblocked = function() {
                reject(new Error("Unable to access DB"));
            };
            openDbRequest.onupgradeneeded = function() {
                var db = openDbRequest.result;
                db.onerror = function() {
                    reject(new Error("Failed to create object store"));
                };
                db.createObjectStore(STORE_NAME, {
                    keyPath: "id"
                });
            };
        });
    };
    IndexedDbStorage.prototype.withObjectStore = function(mode, action) {
        return this.getDb().then(function(db) {
            var tx = db.transaction(STORE_NAME, mode);
            tx.oncomplete = function() {
                return db.close();
            };
            return new Promise(function(resolve, reject) {
                tx.onerror = function() {
                    return reject(tx.error);
                };
                resolve(action(tx.objectStore(STORE_NAME)));
            }).catch(function(err) {
                db.close();
                throw err;
            });
        });
    };
    return IndexedDbStorage;
}();

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ahA5s":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "InMemoryStorage", ()=>InMemoryStorage);
var InMemoryStorage = /** @class */ function() {
    function InMemoryStorage(store) {
        if (store === void 0) store = {};
        this.store = store;
    }
    InMemoryStorage.prototype.getItem = function(key) {
        if (key in this.store) return this.store[key];
        return null;
    };
    InMemoryStorage.prototype.removeItem = function(key) {
        delete this.store[key];
    };
    InMemoryStorage.prototype.setItem = function(key, value) {
        this.store[key] = value;
    };
    return InMemoryStorage;
}();

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4jsuG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2jcFA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lb266":[function(require,module,exports) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Returns a CognitoIdentityClient with middleware
 * @param {CognitoIdentityClientConfig} config
 * @return {CognitoIdentityClient}
 */ parcelHelpers.export(exports, "createCognitoIdentityClient", ()=>createCognitoIdentityClient);
parcelHelpers.export(exports, "middlewareArgs", ()=>middlewareArgs);
var _tslib = require("tslib");
var _clientCognitoIdentity = require("@aws-sdk/client-cognito-identity");
var _platform = require("../Platform");
function createCognitoIdentityClient(config) {
    var client = new (0, _clientCognitoIdentity.CognitoIdentityClient)({
        region: config.region,
        customUserAgent: (0, _platform.getAmplifyUserAgent)()
    });
    client.middlewareStack.add(function(next, _) {
        return function(args) {
            return next(middlewareArgs(args));
        };
    }, {
        step: "build",
        name: "cacheControlMiddleWare"
    });
    return client;
}
function middlewareArgs(args) {
    return (0, _tslib.__assign)((0, _tslib.__assign)({}, args), {
        request: (0, _tslib.__assign)((0, _tslib.__assign)({}, args.request), {
            headers: (0, _tslib.__assign)((0, _tslib.__assign)({}, args.request.headers), {
                "cache-control": "no-store"
            })
        })
    });
}

},{"tslib":"iyInc","@aws-sdk/client-cognito-identity":"6STYA","../Platform":"2ZOrj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kIufi":[function(require,module,exports) {
/**
 * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ServiceWorker", ()=>(0, _serviceWorker.ServiceWorkerClass));
var _serviceWorker = require("./ServiceWorker");

},{"./ServiceWorker":"lmjvH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lmjvH":[function(require,module,exports) {
/**
 * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ServiceWorkerClass", ()=>ServiceWorkerClass);
var _logger = require("../Logger");
var _js = require("../JS");
var _amplify = require("../Amplify");
/**
 * Provides a means to registering a service worker in the browser
 * and communicating with it via postMessage events.
 * https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/
 *
 * postMessage events are currently not supported in all browsers. See:
 * https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API
 *
 * At the minmum this class will register the service worker and listen
 * and attempt to dispatch messages on state change and record analytics
 * events based on the service worker lifecycle.
 */ var ServiceWorkerClass = /** @class */ function() {
    function ServiceWorkerClass() {
        // The AWS Amplify logger
        this._logger = new (0, _logger.ConsoleLogger)("ServiceWorker");
    }
    Object.defineProperty(ServiceWorkerClass.prototype, "serviceWorker", {
        /**
         * Get the currently active service worker
         */ get: function() {
            return this._serviceWorker;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Register the service-worker.js file in the browser
     * Make sure the service-worker.js is part of the build
     * for example with Angular, modify the angular-cli.json file
     * and add to "assets" array "service-worker.js"
     * @param {string} - (optional) Service worker file. Defaults to "/service-worker.js"
     * @param {string} - (optional) The service worker scope. Defaults to "/"
     *  - API Doc: https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/register
     * @returns {Promise}
     *	- resolve(ServiceWorkerRegistration)
     *	- reject(Error)
     **/ ServiceWorkerClass.prototype.register = function(filePath, scope) {
        var _this = this;
        if (filePath === void 0) filePath = "/service-worker.js";
        if (scope === void 0) scope = "/";
        this._logger.debug("registering " + filePath);
        this._logger.debug("registering service worker with scope " + scope);
        return new Promise(function(resolve, reject) {
            if (navigator && "serviceWorker" in navigator) navigator.serviceWorker.register(filePath, {
                scope: scope
            }).then(function(registration) {
                if (registration.installing) _this._serviceWorker = registration.installing;
                else if (registration.waiting) _this._serviceWorker = registration.waiting;
                else if (registration.active) _this._serviceWorker = registration.active;
                _this._registration = registration;
                _this._setupListeners();
                _this._logger.debug("Service Worker Registration Success: " + registration);
                return resolve(registration);
            }).catch(function(error) {
                _this._logger.debug("Service Worker Registration Failed " + error);
                return reject(error);
            });
            else return reject(new Error("Service Worker not available"));
        });
    };
    /**
     * Enable web push notifications. If not subscribed, a new subscription will
     * be created and registered.
     * 	Test Push Server: https://web-push-codelab.glitch.me/
     * 	Push Server Libraries: https://github.com/web-push-libs/
     * 	API Doc: https://developers.google.com/web/fundamentals/codelabs/push-notifications/
     * @param publicKey
     * @returns {Promise}
     * 	- resolve(PushSubscription)
     *  - reject(Error)
     */ ServiceWorkerClass.prototype.enablePush = function(publicKey) {
        var _this = this;
        if (!this._registration) throw new Error("Service Worker not registered");
        this._publicKey = publicKey;
        return new Promise(function(resolve, reject) {
            if ((0, _js.browserOrNode)().isBrowser) _this._registration.pushManager.getSubscription().then(function(subscription) {
                if (subscription) {
                    _this._subscription = subscription;
                    _this._logger.debug("User is subscribed to push: " + JSON.stringify(subscription));
                    resolve(subscription);
                } else {
                    _this._logger.debug("User is NOT subscribed to push");
                    return _this._registration.pushManager.subscribe({
                        userVisibleOnly: true,
                        applicationServerKey: _this._urlB64ToUint8Array(publicKey)
                    }).then(function(subscription) {
                        _this._subscription = subscription;
                        _this._logger.debug("User subscribed: " + JSON.stringify(subscription));
                        resolve(subscription);
                    }).catch(function(error) {
                        _this._logger.error(error);
                    });
                }
            });
            else return reject(new Error("Service Worker not available"));
        });
    };
    /**
     * Convert a base64 encoded string to a Uint8 array for the push server key
     * @param base64String
     */ ServiceWorkerClass.prototype._urlB64ToUint8Array = function(base64String) {
        var padding = "=".repeat((4 - base64String.length % 4) % 4);
        var base64 = (base64String + padding).replace(/\-/g, "+").replace(/_/g, "/");
        var rawData = window.atob(base64);
        var outputArray = new Uint8Array(rawData.length);
        for(var i = 0; i < rawData.length; ++i)outputArray[i] = rawData.charCodeAt(i);
        return outputArray;
    };
    /**
     * Send a message to the service worker. The service worker needs
     * to implement `self.addEventListener('message') to handle the
     * message. This ***currently*** does not work in Safari or IE.
     * @param {object | string} - An arbitrary JSON object or string message to send to the service worker
     *	- see: https://developer.mozilla.org/en-US/docs/Web/API/Transferable
     * @returns {Promise}
     **/ ServiceWorkerClass.prototype.send = function(message) {
        if (this._serviceWorker) this._serviceWorker.postMessage(typeof message === "object" ? JSON.stringify(message) : message);
    };
    /**
     * Listen for service worker state change and message events
     * https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/state
     **/ ServiceWorkerClass.prototype._setupListeners = function() {
        var _this = this;
        this._serviceWorker.addEventListener("statechange", function(event) {
            var currentState = _this._serviceWorker.state;
            _this._logger.debug("ServiceWorker statechange: " + currentState);
            if ((0, _amplify.Amplify).Analytics && typeof (0, _amplify.Amplify).Analytics.record === "function") (0, _amplify.Amplify).Analytics.record({
                name: "ServiceWorker",
                attributes: {
                    state: currentState
                }
            });
        });
        this._serviceWorker.addEventListener("message", function(event) {
            _this._logger.debug("ServiceWorker message event: " + event);
        });
    };
    return ServiceWorkerClass;
}();

},{"../Logger":"aOIPE","../JS":"fFubg","../Amplify":"4gP56","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iBN8A":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "UniversalStorage", ()=>UniversalStorage);
var _tslib = require("tslib");
var _universalCookie = require("universal-cookie");
var _universalCookieDefault = parcelHelpers.interopDefault(_universalCookie);
var _js = require("../JS");
var isBrowser = (0, _js.browserOrNode)().isBrowser;
var ONE_YEAR_IN_MS = 31536000000;
var UniversalStorage = /** @class */ function() {
    function UniversalStorage(context) {
        if (context === void 0) context = {};
        this.cookies = new (0, _universalCookieDefault.default)();
        this.store = isBrowser ? window.localStorage : Object.create(null);
        this.cookies = context.req ? new (0, _universalCookieDefault.default)(context.req.headers.cookie) : new (0, _universalCookieDefault.default)();
        Object.assign(this.store, this.cookies.getAll());
    }
    Object.defineProperty(UniversalStorage.prototype, "length", {
        get: function() {
            return Object.entries(this.store).length;
        },
        enumerable: true,
        configurable: true
    });
    UniversalStorage.prototype.clear = function() {
        var _this = this;
        Array.from(new Array(this.length)).map(function(_, i) {
            return _this.key(i);
        }).forEach(function(key) {
            return _this.removeItem(key);
        });
    };
    UniversalStorage.prototype.getItem = function(key) {
        return this.getLocalItem(key);
    };
    UniversalStorage.prototype.getLocalItem = function(key) {
        return Object.prototype.hasOwnProperty.call(this.store, key) ? this.store[key] : null;
    };
    UniversalStorage.prototype.getUniversalItem = function(key) {
        return this.cookies.get(key);
    };
    UniversalStorage.prototype.key = function(index) {
        return Object.keys(this.store)[index];
    };
    UniversalStorage.prototype.removeItem = function(key) {
        this.removeLocalItem(key);
        this.removeUniversalItem(key);
    };
    UniversalStorage.prototype.removeLocalItem = function(key) {
        delete this.store[key];
    };
    UniversalStorage.prototype.removeUniversalItem = function(key) {
        this.cookies.remove(key, {
            path: "/"
        });
    };
    UniversalStorage.prototype.setItem = function(key, value) {
        this.setLocalItem(key, value);
        // keys take the shape:
        //  1. `${ProviderPrefix}.${userPoolClientId}.${username}.${tokenType}
        //  2. `${ProviderPrefix}.${userPoolClientId}.LastAuthUser
        var tokenType = key.split(".").pop();
        var sessionTokenTypes = [
            "LastAuthUser",
            "accessToken",
            // refreshToken originates on the client, but SSR pages won't fail when this expires
            // Note: the new `accessToken` will also be refreshed on the client (since Amplify doesn't set server-side cookies)
            "refreshToken",
            // Required for CognitoUserSession
            "idToken"
        ];
        if (sessionTokenTypes.includes(tokenType !== null && tokenType !== void 0 ? tokenType : "")) this.setUniversalItem(key, value, {
            expires: new Date(Date.now() + ONE_YEAR_IN_MS)
        });
    };
    UniversalStorage.prototype.setLocalItem = function(key, value) {
        this.store[key] = value;
    };
    UniversalStorage.prototype.setUniversalItem = function(key, value, options) {
        if (options === void 0) options = {};
        this.cookies.set(key, value, (0, _tslib.__assign)((0, _tslib.__assign)({}, options), {
            path: "/",
            // `httpOnly` cannot be set via JavaScript: https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#JavaScript_access_using_Document.cookie
            sameSite: true,
            // Allow unsecure requests to http://localhost:3000/ when in development.
            secure: isBrowser && window.location.hostname === "localhost" ? false : true
        }));
    };
    return UniversalStorage;
}();

},{"tslib":"iyInc","universal-cookie":"7mx41","../JS":"fFubg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7mx41":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _cookies = require("./Cookies");
var _cookiesDefault = parcelHelpers.interopDefault(_cookies);
exports.default = (0, _cookiesDefault.default);

},{"./Cookies":"dLGVH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dLGVH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _cookie = require("cookie");
var _utils = require("./utils");
var __assign = undefined && undefined.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var Cookies = /** @class */ function() {
    function Cookies(cookies, options) {
        var _this = this;
        this.changeListeners = [];
        this.HAS_DOCUMENT_COOKIE = false;
        this.cookies = (0, _utils.parseCookies)(cookies, options);
        new Promise(function() {
            _this.HAS_DOCUMENT_COOKIE = (0, _utils.hasDocumentCookie)();
        }).catch(function() {});
    }
    Cookies.prototype._updateBrowserValues = function(parseOptions) {
        if (!this.HAS_DOCUMENT_COOKIE) return;
        this.cookies = _cookie.parse(document.cookie, parseOptions);
    };
    Cookies.prototype._emitChange = function(params) {
        for(var i = 0; i < this.changeListeners.length; ++i)this.changeListeners[i](params);
    };
    Cookies.prototype.get = function(name, options, parseOptions) {
        if (options === void 0) options = {};
        this._updateBrowserValues(parseOptions);
        return (0, _utils.readCookie)(this.cookies[name], options);
    };
    Cookies.prototype.getAll = function(options, parseOptions) {
        if (options === void 0) options = {};
        this._updateBrowserValues(parseOptions);
        var result = {};
        for(var name_1 in this.cookies)result[name_1] = (0, _utils.readCookie)(this.cookies[name_1], options);
        return result;
    };
    Cookies.prototype.set = function(name, value, options) {
        var _a;
        if (typeof value === "object") value = JSON.stringify(value);
        this.cookies = __assign(__assign({}, this.cookies), (_a = {}, _a[name] = value, _a));
        if (this.HAS_DOCUMENT_COOKIE) document.cookie = _cookie.serialize(name, value, options);
        this._emitChange({
            name: name,
            value: value,
            options: options
        });
    };
    Cookies.prototype.remove = function(name, options) {
        var finalOptions = options = __assign(__assign({}, options), {
            expires: new Date(1970, 1, 1, 0, 0, 1),
            maxAge: 0
        });
        this.cookies = __assign({}, this.cookies);
        delete this.cookies[name];
        if (this.HAS_DOCUMENT_COOKIE) document.cookie = _cookie.serialize(name, "", finalOptions);
        this._emitChange({
            name: name,
            value: undefined,
            options: options
        });
    };
    Cookies.prototype.addChangeListener = function(callback) {
        this.changeListeners.push(callback);
    };
    Cookies.prototype.removeChangeListener = function(callback) {
        var idx = this.changeListeners.indexOf(callback);
        if (idx >= 0) this.changeListeners.splice(idx, 1);
    };
    return Cookies;
}();
exports.default = Cookies;

},{"cookie":"luAip","./utils":"1oWCi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"luAip":[function(require,module,exports) {
/*!
 * cookie
 * Copyright(c) 2012-2014 Roman Shtylman
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */ "use strict";
/**
 * Module exports.
 * @public
 */ exports.parse = parse;
exports.serialize = serialize;
/**
 * Module variables.
 * @private
 */ var decode = decodeURIComponent;
var encode = encodeURIComponent;
/**
 * RegExp to match field-content in RFC 7230 sec 3.2
 *
 * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]
 * field-vchar   = VCHAR / obs-text
 * obs-text      = %x80-FF
 */ var fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;
/**
 * Parse a cookie header.
 *
 * Parse the given cookie header string into an object
 * The object has the various cookies as keys(names) => values
 *
 * @param {string} str
 * @param {object} [options]
 * @return {object}
 * @public
 */ function parse(str, options) {
    if (typeof str !== "string") throw new TypeError("argument str must be a string");
    var obj = {};
    var opt = options || {};
    var pairs = str.split(";");
    var dec = opt.decode || decode;
    for(var i = 0; i < pairs.length; i++){
        var pair = pairs[i];
        var index = pair.indexOf("=");
        // skip things that don't look like key=value
        if (index < 0) continue;
        var key = pair.substring(0, index).trim();
        // only assign once
        if (undefined == obj[key]) {
            var val = pair.substring(index + 1, pair.length).trim();
            // quoted values
            if (val[0] === '"') val = val.slice(1, -1);
            obj[key] = tryDecode(val, dec);
        }
    }
    return obj;
}
/**
 * Serialize data into a cookie header.
 *
 * Serialize the a name value pair into a cookie string suitable for
 * http headers. An optional options object specified cookie parameters.
 *
 * serialize('foo', 'bar', { httpOnly: true })
 *   => "foo=bar; httpOnly"
 *
 * @param {string} name
 * @param {string} val
 * @param {object} [options]
 * @return {string}
 * @public
 */ function serialize(name, val, options) {
    var opt = options || {};
    var enc = opt.encode || encode;
    if (typeof enc !== "function") throw new TypeError("option encode is invalid");
    if (!fieldContentRegExp.test(name)) throw new TypeError("argument name is invalid");
    var value = enc(val);
    if (value && !fieldContentRegExp.test(value)) throw new TypeError("argument val is invalid");
    var str = name + "=" + value;
    if (null != opt.maxAge) {
        var maxAge = opt.maxAge - 0;
        if (isNaN(maxAge) || !isFinite(maxAge)) throw new TypeError("option maxAge is invalid");
        str += "; Max-Age=" + Math.floor(maxAge);
    }
    if (opt.domain) {
        if (!fieldContentRegExp.test(opt.domain)) throw new TypeError("option domain is invalid");
        str += "; Domain=" + opt.domain;
    }
    if (opt.path) {
        if (!fieldContentRegExp.test(opt.path)) throw new TypeError("option path is invalid");
        str += "; Path=" + opt.path;
    }
    if (opt.expires) {
        if (typeof opt.expires.toUTCString !== "function") throw new TypeError("option expires is invalid");
        str += "; Expires=" + opt.expires.toUTCString();
    }
    if (opt.httpOnly) str += "; HttpOnly";
    if (opt.secure) str += "; Secure";
    if (opt.sameSite) {
        var sameSite = typeof opt.sameSite === "string" ? opt.sameSite.toLowerCase() : opt.sameSite;
        switch(sameSite){
            case true:
                str += "; SameSite=Strict";
                break;
            case "lax":
                str += "; SameSite=Lax";
                break;
            case "strict":
                str += "; SameSite=Strict";
                break;
            case "none":
                str += "; SameSite=None";
                break;
            default:
                throw new TypeError("option sameSite is invalid");
        }
    }
    return str;
}
/**
 * Try decoding a string using a decoding function.
 *
 * @param {string} str
 * @param {function} decode
 * @private
 */ function tryDecode(str, decode) {
    try {
        return decode(str);
    } catch (e) {
        return str;
    }
}

},{}],"1oWCi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "hasDocumentCookie", ()=>hasDocumentCookie);
parcelHelpers.export(exports, "cleanCookies", ()=>cleanCookies);
parcelHelpers.export(exports, "parseCookies", ()=>parseCookies);
parcelHelpers.export(exports, "isParsingCookie", ()=>isParsingCookie);
parcelHelpers.export(exports, "readCookie", ()=>readCookie);
var _cookie = require("cookie");
function hasDocumentCookie() {
    // Can we get/set cookies on document.cookie?
    return typeof document === "object" && typeof document.cookie === "string";
}
function cleanCookies() {
    document.cookie.split(";").forEach(function(c) {
        document.cookie = c.replace(/^ +/, "").replace(/=.*/, "=;expires=" + new Date().toUTCString() + ";path=/");
    });
}
function parseCookies(cookies, options) {
    if (typeof cookies === "string") return _cookie.parse(cookies, options);
    else if (typeof cookies === "object" && cookies !== null) return cookies;
    else return {};
}
function isParsingCookie(value, doNotParse) {
    if (typeof doNotParse === "undefined") // We guess if the cookie start with { or [, it has been serialized
    doNotParse = !value || value[0] !== "{" && value[0] !== "[" && value[0] !== '"';
    return !doNotParse;
}
function readCookie(value, options) {
    if (options === void 0) options = {};
    var cleanValue = cleanupCookieValue(value);
    if (isParsingCookie(cleanValue, options.doNotParse)) try {
        return JSON.parse(cleanValue);
    } catch (e) {
    // At least we tried
    }
    // Ignore clean value if we failed the deserialization
    // It is not relevant anymore to trim those values
    return value;
}
function cleanupCookieValue(value) {
    // express prepend j: before serializing a cookie
    if (value && value[0] === "j" && value[1] === ":") return value.substr(2);
    return value;
}

},{"cookie":"luAip","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"51piL":[function(require,module,exports) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Auth", ()=>(0, _auth.Auth));
parcelHelpers.export(exports, "CognitoUser", ()=>(0, _amazonCognitoIdentityJs.CognitoUser));
parcelHelpers.export(exports, "CookieStorage", ()=>(0, _amazonCognitoIdentityJs.CookieStorage));
parcelHelpers.export(exports, "CognitoHostedUIIdentityProvider", ()=>(0, _auth1.CognitoHostedUIIdentityProvider));
parcelHelpers.export(exports, "appendToCognitoUserAgent", ()=>(0, _amazonCognitoIdentityJs.appendToCognitoUserAgent));
parcelHelpers.export(exports, "AuthErrorStrings", ()=>(0, _authErrorStrings.AuthErrorStrings));
parcelHelpers.export(exports, "GRAPHQL_AUTH_MODE", ()=>(0, _auth1.GRAPHQL_AUTH_MODE));
var _auth = require("./Auth");
var _auth1 = require("./types/Auth");
var _amazonCognitoIdentityJs = require("amazon-cognito-identity-js");
var _authErrorStrings = require("./common/AuthErrorStrings");
/**
 * @deprecated use named import
 */ exports.default = (0, _auth.Auth);

},{"./Auth":"6E7Qm","./types/Auth":"2MR8p","amazon-cognito-identity-js":"i9HVr","./common/AuthErrorStrings":"foZC5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6E7Qm":[function(require,module,exports) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AuthClass", ()=>AuthClass);
parcelHelpers.export(exports, "Auth", ()=>Auth);
var _tslib = require("tslib");
var _types = require("./types");
var _core = require("@aws-amplify/core");
var _amazonCognitoIdentityJs = require("amazon-cognito-identity-js");
var _url = require("url");
var _oauth = require("./OAuth/OAuth");
var _oauthDefault = parcelHelpers.interopDefault(_oauth);
var _urlListener = require("./urlListener");
var _urlListenerDefault = parcelHelpers.interopDefault(_urlListener);
var _errors = require("./Errors");
var _auth = require("./types/Auth");
var logger = new (0, _core.ConsoleLogger)("AuthClass");
var USER_ADMIN_SCOPE = "aws.cognito.signin.user.admin";
// 10 sec, following this guide https://www.nngroup.com/articles/response-times-3-important-limits/
var OAUTH_FLOW_MS_TIMEOUT = 10000;
var AMPLIFY_SYMBOL = typeof Symbol !== "undefined" && typeof Symbol.for === "function" ? Symbol.for("amplify_default") : "@@amplify_default";
var dispatchAuthEvent = function(event, data, message) {
    (0, _core.Hub).dispatch("auth", {
        event: event,
        data: data,
        message: message
    }, "Auth", AMPLIFY_SYMBOL);
};
// Cognito Documentation for max device
// tslint:disable-next-line:max-line-length
// https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_ListDevices.html#API_ListDevices_RequestSyntax
var MAX_DEVICES = 60;
var MAX_AUTOSIGNIN_POLLING_MS = 180000;
/**
 * Provide authentication steps
 */ var AuthClass = /** @class */ function() {
    /**
     * Initialize Auth with AWS configurations
     * @param {Object} config - Configuration of the Auth
     */ function AuthClass(config) {
        var _this = this;
        this.userPool = null;
        this.user = null;
        this.oAuthFlowInProgress = false;
        this.autoSignInInitiated = false;
        this.inflightSessionPromise = null;
        this.inflightSessionPromiseCounter = 0;
        this.Credentials = (0, _core.Credentials);
        this.wrapRefreshSessionCallback = function(callback) {
            var wrapped = function(error, data) {
                if (data) dispatchAuthEvent("tokenRefresh", undefined, "New token retrieved");
                else dispatchAuthEvent("tokenRefresh_failure", error, "Failed to retrieve new token");
                return callback(error, data);
            };
            return wrapped;
        }; // prettier-ignore
        this.configure(config);
        this.currentCredentials = this.currentCredentials.bind(this);
        this.currentUserCredentials = this.currentUserCredentials.bind(this);
        (0, _core.Hub).listen("auth", function(_a) {
            var payload = _a.payload;
            var event = payload.event;
            switch(event){
                case "verify":
                case "signIn":
                    _this._storage.setItem("amplify-signin-with-hostedUI", "false");
                    break;
                case "signOut":
                    _this._storage.removeItem("amplify-signin-with-hostedUI");
                    break;
                case "cognitoHostedUI":
                    _this._storage.setItem("amplify-signin-with-hostedUI", "true");
                    break;
            }
        });
    }
    AuthClass.prototype.getModuleName = function() {
        return "Auth";
    };
    AuthClass.prototype.configure = function(config) {
        var _this = this;
        if (!config) return this._config || {};
        logger.debug("configure Auth");
        var conf = Object.assign({}, this._config, (0, _core.parseAWSExports)(config).Auth, config);
        this._config = conf;
        var _a = this._config, userPoolId = _a.userPoolId, userPoolWebClientId = _a.userPoolWebClientId, cookieStorage = _a.cookieStorage, oauth = _a.oauth, region = _a.region, identityPoolId = _a.identityPoolId, mandatorySignIn = _a.mandatorySignIn, refreshHandlers = _a.refreshHandlers, identityPoolRegion = _a.identityPoolRegion, clientMetadata = _a.clientMetadata, endpoint = _a.endpoint, storage = _a.storage;
        if (!storage) {
            // backward compatability
            if (cookieStorage) this._storage = new (0, _amazonCognitoIdentityJs.CookieStorage)(cookieStorage);
            else this._storage = config.ssr ? new (0, _core.UniversalStorage)() : new (0, _core.StorageHelper)().getStorage();
        } else {
            if (!this._isValidAuthStorage(storage)) {
                logger.error("The storage in the Auth config is not valid!");
                throw new Error("Empty storage object");
            }
            this._storage = storage;
        }
        this._storageSync = Promise.resolve();
        if (typeof this._storage["sync"] === "function") this._storageSync = this._storage["sync"]();
        if (userPoolId) {
            var userPoolData = {
                UserPoolId: userPoolId,
                ClientId: userPoolWebClientId,
                endpoint: endpoint
            };
            userPoolData.Storage = this._storage;
            this.userPool = new (0, _amazonCognitoIdentityJs.CognitoUserPool)(userPoolData, this.wrapRefreshSessionCallback);
        }
        this.Credentials.configure({
            mandatorySignIn: mandatorySignIn,
            region: region,
            userPoolId: userPoolId,
            identityPoolId: identityPoolId,
            refreshHandlers: refreshHandlers,
            storage: this._storage,
            identityPoolRegion: identityPoolRegion
        });
        // initialize cognitoauth client if hosted ui options provided
        // to keep backward compatibility:
        var cognitoHostedUIConfig = oauth ? (0, _types.isCognitoHostedOpts)(this._config.oauth) ? oauth : oauth.awsCognito : undefined;
        if (cognitoHostedUIConfig) {
            var cognitoAuthParams = Object.assign({
                cognitoClientId: userPoolWebClientId,
                UserPoolId: userPoolId,
                domain: cognitoHostedUIConfig["domain"],
                scopes: cognitoHostedUIConfig["scope"],
                redirectSignIn: cognitoHostedUIConfig["redirectSignIn"],
                redirectSignOut: cognitoHostedUIConfig["redirectSignOut"],
                responseType: cognitoHostedUIConfig["responseType"],
                Storage: this._storage,
                urlOpener: cognitoHostedUIConfig["urlOpener"],
                clientMetadata: clientMetadata
            }, cognitoHostedUIConfig["options"]);
            this._oAuthHandler = new (0, _oauthDefault.default)({
                scopes: cognitoAuthParams.scopes,
                config: cognitoAuthParams,
                cognitoClientId: cognitoAuthParams.cognitoClientId
            });
            // **NOTE** - Remove this in a future major release as it is a breaking change
            // Prevents _handleAuthResponse from being called multiple times in Expo
            // See https://github.com/aws-amplify/amplify-js/issues/4388
            var usedResponseUrls_1 = {};
            (0, _urlListenerDefault.default)(function(_a) {
                var url = _a.url;
                if (usedResponseUrls_1[url]) return;
                usedResponseUrls_1[url] = true;
                _this._handleAuthResponse(url);
            });
        }
        dispatchAuthEvent("configured", null, "The Auth category has been configured successfully");
        if (!this.autoSignInInitiated && typeof this._storage["getItem"] === "function") {
            var pollingInitiated = this.isTrueStorageValue("amplify-polling-started");
            if (pollingInitiated) {
                dispatchAuthEvent("autoSignIn_failure", null, (0, _auth.AuthErrorTypes).AutoSignInError);
                this._storage.removeItem("amplify-auto-sign-in");
            }
            this._storage.removeItem("amplify-polling-started");
        }
        return this._config;
    };
    /**
     * Sign up with username, password and other attributes like phone, email
     * @param {String | object} params - The user attributes used for signin
     * @param {String[]} restOfAttrs - for the backward compatability
     * @return - A promise resolves callback data if success
     */ AuthClass.prototype.signUp = function(params) {
        var _this = this;
        var restOfAttrs = [];
        for(var _i = 1; _i < arguments.length; _i++)restOfAttrs[_i - 1] = arguments[_i];
        var _a, _b, _c;
        if (!this.userPool) return this.rejectNoUserPool();
        var username = null;
        var password = null;
        var attributes = [];
        var validationData = null;
        var clientMetadata;
        var autoSignIn = {
            enabled: false
        };
        var autoSignInValidationData = {};
        var autoSignInClientMetaData = {};
        if (params && typeof params === "string") {
            username = params;
            password = restOfAttrs ? restOfAttrs[0] : null;
            var email = restOfAttrs ? restOfAttrs[1] : null;
            var phone_number = restOfAttrs ? restOfAttrs[2] : null;
            if (email) attributes.push(new (0, _amazonCognitoIdentityJs.CognitoUserAttribute)({
                Name: "email",
                Value: email
            }));
            if (phone_number) attributes.push(new (0, _amazonCognitoIdentityJs.CognitoUserAttribute)({
                Name: "phone_number",
                Value: phone_number
            }));
        } else if (params && typeof params === "object") {
            username = params["username"];
            password = params["password"];
            if (params && params.clientMetadata) clientMetadata = params.clientMetadata;
            else if (this._config.clientMetadata) clientMetadata = this._config.clientMetadata;
            var attrs_1 = params["attributes"];
            if (attrs_1) Object.keys(attrs_1).map(function(key) {
                attributes.push(new (0, _amazonCognitoIdentityJs.CognitoUserAttribute)({
                    Name: key,
                    Value: attrs_1[key]
                }));
            });
            var validationDataObject_1 = params["validationData"];
            if (validationDataObject_1) {
                validationData = [];
                Object.keys(validationDataObject_1).map(function(key) {
                    validationData.push(new (0, _amazonCognitoIdentityJs.CognitoUserAttribute)({
                        Name: key,
                        Value: validationDataObject_1[key]
                    }));
                });
            }
            autoSignIn = (_a = params.autoSignIn) !== null && _a !== void 0 ? _a : {
                enabled: false
            };
            if (autoSignIn.enabled) {
                this._storage.setItem("amplify-auto-sign-in", "true");
                autoSignInValidationData = (_b = autoSignIn.validationData) !== null && _b !== void 0 ? _b : {};
                autoSignInClientMetaData = (_c = autoSignIn.clientMetaData) !== null && _c !== void 0 ? _c : {};
            }
        } else return this.rejectAuthError((0, _auth.AuthErrorTypes).SignUpError);
        if (!username) return this.rejectAuthError((0, _auth.AuthErrorTypes).EmptyUsername);
        if (!password) return this.rejectAuthError((0, _auth.AuthErrorTypes).EmptyPassword);
        logger.debug("signUp attrs:", attributes);
        logger.debug("signUp validation data:", validationData);
        return new Promise(function(resolve, reject) {
            _this.userPool.signUp(username, password, attributes, validationData, function(err, data) {
                if (err) {
                    dispatchAuthEvent("signUp_failure", err, username + " failed to signup");
                    reject(err);
                } else {
                    dispatchAuthEvent("signUp", data, username + " has signed up successfully");
                    if (autoSignIn.enabled) _this.handleAutoSignIn(username, password, autoSignInValidationData, autoSignInClientMetaData, data);
                    resolve(data);
                }
            }, clientMetadata);
        });
    };
    AuthClass.prototype.handleAutoSignIn = function(username, password, validationData, clientMetadata, data) {
        this.autoSignInInitiated = true;
        var authDetails = new (0, _amazonCognitoIdentityJs.AuthenticationDetails)({
            Username: username,
            Password: password,
            ValidationData: validationData,
            ClientMetadata: clientMetadata
        });
        if (data.userConfirmed) this.signInAfterUserConfirmed(authDetails);
        else if (this._config.signUpVerificationMethod === "link") this.handleLinkAutoSignIn(authDetails);
        else this.handleCodeAutoSignIn(authDetails);
    };
    AuthClass.prototype.handleCodeAutoSignIn = function(authDetails) {
        var _this = this;
        var listenEvent = function(_a) {
            var payload = _a.payload;
            if (payload.event === "confirmSignUp") _this.signInAfterUserConfirmed(authDetails, listenEvent);
        };
        (0, _core.Hub).listen("auth", listenEvent);
    };
    AuthClass.prototype.handleLinkAutoSignIn = function(authDetails) {
        var _this = this;
        this._storage.setItem("amplify-polling-started", "true");
        var start = Date.now();
        var autoSignInPollingIntervalId = setInterval(function() {
            if (Date.now() - start > MAX_AUTOSIGNIN_POLLING_MS) {
                clearInterval(autoSignInPollingIntervalId);
                dispatchAuthEvent("autoSignIn_failure", null, "Please confirm your account and use your credentials to sign in.");
                _this._storage.removeItem("amplify-auto-sign-in");
            } else _this.signInAfterUserConfirmed(authDetails, null, autoSignInPollingIntervalId);
        }, 5000);
    };
    AuthClass.prototype.signInAfterUserConfirmed = function(authDetails, listenEvent, autoSignInPollingIntervalId) {
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            var user, error_1;
            var _this = this;
            return (0, _tslib.__generator)(this, function(_a) {
                switch(_a.label){
                    case 0:
                        user = this.createCognitoUser(authDetails.getUsername());
                        _a.label = 1;
                    case 1:
                        _a.trys.push([
                            1,
                            3,
                            ,
                            4
                        ]);
                        return [
                            4 /*yield*/ ,
                            user.authenticateUser(authDetails, this.authCallbacks(user, function(value) {
                                dispatchAuthEvent("autoSignIn", value, authDetails.getUsername() + " has signed in successfully");
                                if (listenEvent) (0, _core.Hub).remove("auth", listenEvent);
                                if (autoSignInPollingIntervalId) {
                                    clearInterval(autoSignInPollingIntervalId);
                                    _this._storage.removeItem("amplify-polling-started");
                                }
                                _this._storage.removeItem("amplify-auto-sign-in");
                            }, function(error) {
                                logger.error(error);
                                _this._storage.removeItem("amplify-auto-sign-in");
                            }))
                        ];
                    case 2:
                        _a.sent();
                        return [
                            3 /*break*/ ,
                            4
                        ];
                    case 3:
                        error_1 = _a.sent();
                        logger.error(error_1);
                        return [
                            3 /*break*/ ,
                            4
                        ];
                    case 4:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    /**
     * Send the verification code to confirm sign up
     * @param {String} username - The username to be confirmed
     * @param {String} code - The verification code
     * @param {ConfirmSignUpOptions} options - other options for confirm signup
     * @return - A promise resolves callback data if success
     */ AuthClass.prototype.confirmSignUp = function(username, code, options) {
        var _this = this;
        if (!this.userPool) return this.rejectNoUserPool();
        if (!username) return this.rejectAuthError((0, _auth.AuthErrorTypes).EmptyUsername);
        if (!code) return this.rejectAuthError((0, _auth.AuthErrorTypes).EmptyCode);
        var user = this.createCognitoUser(username);
        var forceAliasCreation = options && typeof options.forceAliasCreation === "boolean" ? options.forceAliasCreation : true;
        var clientMetadata;
        if (options && options.clientMetadata) clientMetadata = options.clientMetadata;
        else if (this._config.clientMetadata) clientMetadata = this._config.clientMetadata;
        return new Promise(function(resolve, reject) {
            user.confirmRegistration(code, forceAliasCreation, function(err, data) {
                if (err) reject(err);
                else {
                    dispatchAuthEvent("confirmSignUp", data, username + " has been confirmed successfully");
                    var autoSignIn = _this.isTrueStorageValue("amplify-auto-sign-in");
                    if (autoSignIn && !_this.autoSignInInitiated) {
                        dispatchAuthEvent("autoSignIn_failure", null, (0, _auth.AuthErrorTypes).AutoSignInError);
                        _this._storage.removeItem("amplify-auto-sign-in");
                    }
                    resolve(data);
                }
            }, clientMetadata);
        });
    };
    AuthClass.prototype.isTrueStorageValue = function(value) {
        var item = this._storage.getItem(value);
        return item ? item === "true" : false;
    };
    /**
     * Resend the verification code
     * @param {String} username - The username to be confirmed
     * @param {ClientMetadata} clientMetadata - Metadata to be passed to Cognito Lambda triggers
     * @return - A promise resolves code delivery details if successful
     */ AuthClass.prototype.resendSignUp = function(username, clientMetadata) {
        if (clientMetadata === void 0) clientMetadata = this._config.clientMetadata;
        if (!this.userPool) return this.rejectNoUserPool();
        if (!username) return this.rejectAuthError((0, _auth.AuthErrorTypes).EmptyUsername);
        var user = this.createCognitoUser(username);
        return new Promise(function(resolve, reject) {
            user.resendConfirmationCode(function(err, data) {
                if (err) reject(err);
                else resolve(data);
            }, clientMetadata);
        });
    };
    /**
     * Sign in
     * @param {String | SignInOpts} usernameOrSignInOpts - The username to be signed in or the sign in options
     * @param {String} pw - The password of the username
     * @param {ClientMetaData} clientMetadata - Client metadata for custom workflows
     * @return - A promise resolves the CognitoUser
     */ AuthClass.prototype.signIn = function(usernameOrSignInOpts, pw, clientMetadata) {
        if (clientMetadata === void 0) clientMetadata = this._config.clientMetadata;
        if (!this.userPool) return this.rejectNoUserPool();
        var username = null;
        var password = null;
        var validationData = {};
        // for backward compatibility
        if (typeof usernameOrSignInOpts === "string") {
            username = usernameOrSignInOpts;
            password = pw;
        } else if ((0, _types.isUsernamePasswordOpts)(usernameOrSignInOpts)) {
            if (typeof pw !== "undefined") logger.warn("The password should be defined under the first parameter object!");
            username = usernameOrSignInOpts.username;
            password = usernameOrSignInOpts.password;
            validationData = usernameOrSignInOpts.validationData;
        } else return this.rejectAuthError((0, _auth.AuthErrorTypes).InvalidUsername);
        if (!username) return this.rejectAuthError((0, _auth.AuthErrorTypes).EmptyUsername);
        var authDetails = new (0, _amazonCognitoIdentityJs.AuthenticationDetails)({
            Username: username,
            Password: password,
            ValidationData: validationData,
            ClientMetadata: clientMetadata
        });
        if (password) return this.signInWithPassword(authDetails);
        else return this.signInWithoutPassword(authDetails);
    };
    /**
     * Return an object with the authentication callbacks
     * @param {CognitoUser} user - the cognito user object
     * @param {} resolve - function called when resolving the current step
     * @param {} reject - function called when rejecting the current step
     * @return - an object with the callback methods for user authentication
     */ AuthClass.prototype.authCallbacks = function(user, resolve, reject) {
        var _this = this;
        var that = this;
        return {
            onSuccess: function(session) {
                return (0, _tslib.__awaiter)(_this, void 0, void 0, function() {
                    var cred, e_1, currentUser, e_2;
                    return (0, _tslib.__generator)(this, function(_a) {
                        switch(_a.label){
                            case 0:
                                logger.debug(session);
                                delete user["challengeName"];
                                delete user["challengeParam"];
                                _a.label = 1;
                            case 1:
                                _a.trys.push([
                                    1,
                                    4,
                                    5,
                                    9
                                ]);
                                return [
                                    4 /*yield*/ ,
                                    this.Credentials.clear()
                                ];
                            case 2:
                                _a.sent();
                                return [
                                    4 /*yield*/ ,
                                    this.Credentials.set(session, "session")
                                ];
                            case 3:
                                cred = _a.sent();
                                logger.debug("succeed to get cognito credentials", cred);
                                return [
                                    3 /*break*/ ,
                                    9
                                ];
                            case 4:
                                e_1 = _a.sent();
                                logger.debug("cannot get cognito credentials", e_1);
                                return [
                                    3 /*break*/ ,
                                    9
                                ];
                            case 5:
                                _a.trys.push([
                                    5,
                                    7,
                                    ,
                                    8
                                ]);
                                return [
                                    4 /*yield*/ ,
                                    this.currentUserPoolUser()
                                ];
                            case 6:
                                currentUser = _a.sent();
                                that.user = currentUser;
                                dispatchAuthEvent("signIn", currentUser, "A user " + user.getUsername() + " has been signed in");
                                resolve(currentUser);
                                return [
                                    3 /*break*/ ,
                                    8
                                ];
                            case 7:
                                e_2 = _a.sent();
                                logger.error("Failed to get the signed in user", e_2);
                                reject(e_2);
                                return [
                                    3 /*break*/ ,
                                    8
                                ];
                            case 8:
                                return [
                                    7 /*endfinally*/ 
                                ];
                            case 9:
                                return [
                                    2 /*return*/ 
                                ];
                        }
                    });
                });
            },
            onFailure: function(err) {
                logger.debug("signIn failure", err);
                dispatchAuthEvent("signIn_failure", err, user.getUsername() + " failed to signin");
                reject(err);
            },
            customChallenge: function(challengeParam) {
                logger.debug("signIn custom challenge answer required");
                user["challengeName"] = "CUSTOM_CHALLENGE";
                user["challengeParam"] = challengeParam;
                resolve(user);
            },
            mfaRequired: function(challengeName, challengeParam) {
                logger.debug("signIn MFA required");
                user["challengeName"] = challengeName;
                user["challengeParam"] = challengeParam;
                resolve(user);
            },
            mfaSetup: function(challengeName, challengeParam) {
                logger.debug("signIn mfa setup", challengeName);
                user["challengeName"] = challengeName;
                user["challengeParam"] = challengeParam;
                resolve(user);
            },
            newPasswordRequired: function(userAttributes, requiredAttributes) {
                logger.debug("signIn new password");
                user["challengeName"] = "NEW_PASSWORD_REQUIRED";
                user["challengeParam"] = {
                    userAttributes: userAttributes,
                    requiredAttributes: requiredAttributes
                };
                resolve(user);
            },
            totpRequired: function(challengeName, challengeParam) {
                logger.debug("signIn totpRequired");
                user["challengeName"] = challengeName;
                user["challengeParam"] = challengeParam;
                resolve(user);
            },
            selectMFAType: function(challengeName, challengeParam) {
                logger.debug("signIn selectMFAType", challengeName);
                user["challengeName"] = challengeName;
                user["challengeParam"] = challengeParam;
                resolve(user);
            }
        };
    };
    /**
     * Sign in with a password
     * @private
     * @param {AuthenticationDetails} authDetails - the user sign in data
     * @return - A promise resolves the CognitoUser object if success or mfa required
     */ AuthClass.prototype.signInWithPassword = function(authDetails) {
        var _this = this;
        if (this.pendingSignIn) throw new Error("Pending sign-in attempt already in progress");
        var user = this.createCognitoUser(authDetails.getUsername());
        this.pendingSignIn = new Promise(function(resolve, reject) {
            user.authenticateUser(authDetails, _this.authCallbacks(user, function(value) {
                _this.pendingSignIn = null;
                resolve(value);
            }, function(error) {
                _this.pendingSignIn = null;
                reject(error);
            }));
        });
        return this.pendingSignIn;
    };
    /**
     * Sign in without a password
     * @private
     * @param {AuthenticationDetails} authDetails - the user sign in data
     * @return - A promise resolves the CognitoUser object if success or mfa required
     */ AuthClass.prototype.signInWithoutPassword = function(authDetails) {
        var _this = this;
        var user = this.createCognitoUser(authDetails.getUsername());
        user.setAuthenticationFlowType("CUSTOM_AUTH");
        return new Promise(function(resolve, reject) {
            user.initiateAuth(authDetails, _this.authCallbacks(user, resolve, reject));
        });
    };
    /**
     * This was previously used by an authenticated user to get MFAOptions,
     * but no longer returns a meaningful response. Refer to the documentation for
     * how to setup and use MFA: https://docs.amplify.aws/lib/auth/mfa/q/platform/js
     * @deprecated
     * @param {CognitoUser} user - the current user
     * @return - A promise resolves the current preferred mfa option if success
     */ AuthClass.prototype.getMFAOptions = function(user) {
        return new Promise(function(res, rej) {
            user.getMFAOptions(function(err, mfaOptions) {
                if (err) {
                    logger.debug("get MFA Options failed", err);
                    rej(err);
                    return;
                }
                logger.debug("get MFA options success", mfaOptions);
                res(mfaOptions);
                return;
            });
        });
    };
    /**
     * get preferred mfa method
     * @param {CognitoUser} user - the current cognito user
     * @param {GetPreferredMFAOpts} params - options for getting the current user preferred MFA
     */ AuthClass.prototype.getPreferredMFA = function(user, params) {
        var _this = this;
        var that = this;
        return new Promise(function(res, rej) {
            var clientMetadata = _this._config.clientMetadata; // TODO: verify behavior if this is override during signIn
            var bypassCache = params ? params.bypassCache : false;
            user.getUserData(function(err, data) {
                return (0, _tslib.__awaiter)(_this, void 0, void 0, function() {
                    var cleanUpError_1, mfaType;
                    return (0, _tslib.__generator)(this, function(_a) {
                        switch(_a.label){
                            case 0:
                                if (!err) return [
                                    3 /*break*/ ,
                                    5
                                ];
                                logger.debug("getting preferred mfa failed", err);
                                if (!this.isSessionInvalid(err)) return [
                                    3 /*break*/ ,
                                    4
                                ];
                                _a.label = 1;
                            case 1:
                                _a.trys.push([
                                    1,
                                    3,
                                    ,
                                    4
                                ]);
                                return [
                                    4 /*yield*/ ,
                                    this.cleanUpInvalidSession(user)
                                ];
                            case 2:
                                _a.sent();
                                return [
                                    3 /*break*/ ,
                                    4
                                ];
                            case 3:
                                cleanUpError_1 = _a.sent();
                                rej(new Error("Session is invalid due to: " + err.message + " and failed to clean up invalid session: " + cleanUpError_1.message));
                                return [
                                    2 /*return*/ 
                                ];
                            case 4:
                                rej(err);
                                return [
                                    2 /*return*/ 
                                ];
                            case 5:
                                mfaType = that._getMfaTypeFromUserData(data);
                                if (!mfaType) {
                                    rej("invalid MFA Type");
                                    return [
                                        2 /*return*/ 
                                    ];
                                } else {
                                    res(mfaType);
                                    return [
                                        2 /*return*/ 
                                    ];
                                }
                                return [
                                    2 /*return*/ 
                                ];
                        }
                    });
                });
            }, {
                bypassCache: bypassCache,
                clientMetadata: clientMetadata
            });
        });
    };
    AuthClass.prototype._getMfaTypeFromUserData = function(data) {
        var ret = null;
        var preferredMFA = data.PreferredMfaSetting;
        // if the user has used Auth.setPreferredMFA() to setup the mfa type
        // then the "PreferredMfaSetting" would exist in the response
        if (preferredMFA) ret = preferredMFA;
        else {
            // if mfaList exists but empty, then its noMFA
            var mfaList = data.UserMFASettingList;
            if (!mfaList) {
                // if SMS was enabled by using Auth.enableSMS(),
                // the response would contain MFAOptions
                // as for now Cognito only supports for SMS, so we will say it is 'SMS_MFA'
                // if it does not exist, then it should be NOMFA
                var MFAOptions = data.MFAOptions;
                if (MFAOptions) ret = "SMS_MFA";
                else ret = "NOMFA";
            } else if (mfaList.length === 0) ret = "NOMFA";
            else logger.debug("invalid case for getPreferredMFA", data);
        }
        return ret;
    };
    AuthClass.prototype._getUserData = function(user, params) {
        var _this = this;
        return new Promise(function(res, rej) {
            user.getUserData(function(err, data) {
                return (0, _tslib.__awaiter)(_this, void 0, void 0, function() {
                    var cleanUpError_2;
                    return (0, _tslib.__generator)(this, function(_a) {
                        switch(_a.label){
                            case 0:
                                if (!err) return [
                                    3 /*break*/ ,
                                    5
                                ];
                                logger.debug("getting user data failed", err);
                                if (!this.isSessionInvalid(err)) return [
                                    3 /*break*/ ,
                                    4
                                ];
                                _a.label = 1;
                            case 1:
                                _a.trys.push([
                                    1,
                                    3,
                                    ,
                                    4
                                ]);
                                return [
                                    4 /*yield*/ ,
                                    this.cleanUpInvalidSession(user)
                                ];
                            case 2:
                                _a.sent();
                                return [
                                    3 /*break*/ ,
                                    4
                                ];
                            case 3:
                                cleanUpError_2 = _a.sent();
                                rej(new Error("Session is invalid due to: " + err.message + " and failed to clean up invalid session: " + cleanUpError_2.message));
                                return [
                                    2 /*return*/ 
                                ];
                            case 4:
                                rej(err);
                                return [
                                    2 /*return*/ 
                                ];
                            case 5:
                                res(data);
                                _a.label = 6;
                            case 6:
                                return [
                                    2 /*return*/ 
                                ];
                        }
                    });
                });
            }, params);
        });
    };
    /**
     * set preferred MFA method
     * @param {CognitoUser} user - the current Cognito user
     * @param {string} mfaMethod - preferred mfa method
     * @return - A promise resolve if success
     */ AuthClass.prototype.setPreferredMFA = function(user, mfaMethod) {
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            var clientMetadata, userData, smsMfaSettings, totpMfaSettings, _a, mfaList, currentMFAType, that;
            var _this = this;
            return (0, _tslib.__generator)(this, function(_b) {
                switch(_b.label){
                    case 0:
                        clientMetadata = this._config.clientMetadata;
                        return [
                            4 /*yield*/ ,
                            this._getUserData(user, {
                                bypassCache: true,
                                clientMetadata: clientMetadata
                            })
                        ];
                    case 1:
                        userData = _b.sent();
                        smsMfaSettings = null;
                        totpMfaSettings = null;
                        _a = mfaMethod;
                        switch(_a){
                            case "TOTP":
                                return [
                                    3 /*break*/ ,
                                    2
                                ];
                            case "SOFTWARE_TOKEN_MFA":
                                return [
                                    3 /*break*/ ,
                                    2
                                ];
                            case "SMS":
                                return [
                                    3 /*break*/ ,
                                    3
                                ];
                            case "SMS_MFA":
                                return [
                                    3 /*break*/ ,
                                    3
                                ];
                            case "NOMFA":
                                return [
                                    3 /*break*/ ,
                                    4
                                ];
                        }
                        return [
                            3 /*break*/ ,
                            6
                        ];
                    case 2:
                        totpMfaSettings = {
                            PreferredMfa: true,
                            Enabled: true
                        };
                        return [
                            3 /*break*/ ,
                            7
                        ];
                    case 3:
                        smsMfaSettings = {
                            PreferredMfa: true,
                            Enabled: true
                        };
                        return [
                            3 /*break*/ ,
                            7
                        ];
                    case 4:
                        mfaList = userData["UserMFASettingList"];
                        return [
                            4 /*yield*/ ,
                            this._getMfaTypeFromUserData(userData)
                        ];
                    case 5:
                        currentMFAType = _b.sent();
                        if (currentMFAType === "NOMFA") return [
                            2 /*return*/ ,
                            Promise.resolve("No change for mfa type")
                        ];
                        else if (currentMFAType === "SMS_MFA") smsMfaSettings = {
                            PreferredMfa: false,
                            Enabled: false
                        };
                        else if (currentMFAType === "SOFTWARE_TOKEN_MFA") totpMfaSettings = {
                            PreferredMfa: false,
                            Enabled: false
                        };
                        else return [
                            2 /*return*/ ,
                            this.rejectAuthError((0, _auth.AuthErrorTypes).InvalidMFA)
                        ];
                        // if there is a UserMFASettingList in the response
                        // we need to disable every mfa type in that list
                        if (mfaList && mfaList.length !== 0) // to disable SMS or TOTP if exists in that list
                        mfaList.forEach(function(mfaType) {
                            if (mfaType === "SMS_MFA") smsMfaSettings = {
                                PreferredMfa: false,
                                Enabled: false
                            };
                            else if (mfaType === "SOFTWARE_TOKEN_MFA") totpMfaSettings = {
                                PreferredMfa: false,
                                Enabled: false
                            };
                        });
                        return [
                            3 /*break*/ ,
                            7
                        ];
                    case 6:
                        logger.debug("no validmfa method provided");
                        return [
                            2 /*return*/ ,
                            this.rejectAuthError((0, _auth.AuthErrorTypes).NoMFA)
                        ];
                    case 7:
                        that = this;
                        return [
                            2 /*return*/ ,
                            new Promise(function(res, rej) {
                                user.setUserMfaPreference(smsMfaSettings, totpMfaSettings, function(err, result) {
                                    if (err) {
                                        logger.debug("Set user mfa preference error", err);
                                        return rej(err);
                                    }
                                    logger.debug("Set user mfa success", result);
                                    logger.debug("Caching the latest user data into local");
                                    // cache the latest result into user data
                                    user.getUserData(function(err, data) {
                                        return (0, _tslib.__awaiter)(_this, void 0, void 0, function() {
                                            var cleanUpError_3;
                                            return (0, _tslib.__generator)(this, function(_a) {
                                                switch(_a.label){
                                                    case 0:
                                                        if (!err) return [
                                                            3 /*break*/ ,
                                                            5
                                                        ];
                                                        logger.debug("getting user data failed", err);
                                                        if (!this.isSessionInvalid(err)) return [
                                                            3 /*break*/ ,
                                                            4
                                                        ];
                                                        _a.label = 1;
                                                    case 1:
                                                        _a.trys.push([
                                                            1,
                                                            3,
                                                            ,
                                                            4
                                                        ]);
                                                        return [
                                                            4 /*yield*/ ,
                                                            this.cleanUpInvalidSession(user)
                                                        ];
                                                    case 2:
                                                        _a.sent();
                                                        return [
                                                            3 /*break*/ ,
                                                            4
                                                        ];
                                                    case 3:
                                                        cleanUpError_3 = _a.sent();
                                                        rej(new Error("Session is invalid due to: " + err.message + " and failed to clean up invalid session: " + cleanUpError_3.message));
                                                        return [
                                                            2 /*return*/ 
                                                        ];
                                                    case 4:
                                                        return [
                                                            2 /*return*/ ,
                                                            rej(err)
                                                        ];
                                                    case 5:
                                                        return [
                                                            2 /*return*/ ,
                                                            res(result)
                                                        ];
                                                }
                                            });
                                        });
                                    }, {
                                        bypassCache: true,
                                        clientMetadata: clientMetadata
                                    });
                                });
                            })
                        ];
                }
            });
        });
    };
    /**
     * disable SMS
     * @deprecated
     * @param {CognitoUser} user - the current user
     * @return - A promise resolves is success
     */ AuthClass.prototype.disableSMS = function(user) {
        return new Promise(function(res, rej) {
            user.disableMFA(function(err, data) {
                if (err) {
                    logger.debug("disable mfa failed", err);
                    rej(err);
                    return;
                }
                logger.debug("disable mfa succeed", data);
                res(data);
                return;
            });
        });
    };
    /**
     * enable SMS
     * @deprecated
     * @param {CognitoUser} user - the current user
     * @return - A promise resolves is success
     */ AuthClass.prototype.enableSMS = function(user) {
        return new Promise(function(res, rej) {
            user.enableMFA(function(err, data) {
                if (err) {
                    logger.debug("enable mfa failed", err);
                    rej(err);
                    return;
                }
                logger.debug("enable mfa succeed", data);
                res(data);
                return;
            });
        });
    };
    /**
     * Setup TOTP
     * @param {CognitoUser} user - the current user
     * @return - A promise resolves with the secret code if success
     */ AuthClass.prototype.setupTOTP = function(user) {
        return new Promise(function(res, rej) {
            user.associateSoftwareToken({
                onFailure: function(err) {
                    logger.debug("associateSoftwareToken failed", err);
                    rej(err);
                    return;
                },
                associateSecretCode: function(secretCode) {
                    logger.debug("associateSoftwareToken success", secretCode);
                    res(secretCode);
                    return;
                }
            });
        });
    };
    /**
     * verify TOTP setup
     * @param {CognitoUser} user - the current user
     * @param {string} challengeAnswer - challenge answer
     * @return - A promise resolves is success
     */ AuthClass.prototype.verifyTotpToken = function(user, challengeAnswer) {
        logger.debug("verification totp token", user, challengeAnswer);
        var signInUserSession;
        if (user && typeof user.getSignInUserSession === "function") signInUserSession = user.getSignInUserSession();
        var isLoggedIn = signInUserSession === null || signInUserSession === void 0 ? void 0 : signInUserSession.isValid();
        return new Promise(function(res, rej) {
            user.verifySoftwareToken(challengeAnswer, "My TOTP device", {
                onFailure: function(err) {
                    logger.debug("verifyTotpToken failed", err);
                    rej(err);
                    return;
                },
                onSuccess: function(data) {
                    if (!isLoggedIn) dispatchAuthEvent("signIn", user, "A user " + user.getUsername() + " has been signed in");
                    dispatchAuthEvent("verify", user, "A user " + user.getUsername() + " has been verified");
                    logger.debug("verifyTotpToken success", data);
                    res(data);
                    return;
                }
            });
        });
    };
    /**
     * Send MFA code to confirm sign in
     * @param {Object} user - The CognitoUser object
     * @param {String} code - The confirmation code
     */ AuthClass.prototype.confirmSignIn = function(user, code, mfaType, clientMetadata) {
        var _this = this;
        if (clientMetadata === void 0) clientMetadata = this._config.clientMetadata;
        if (!code) return this.rejectAuthError((0, _auth.AuthErrorTypes).EmptyCode);
        var that = this;
        return new Promise(function(resolve, reject) {
            user.sendMFACode(code, {
                onSuccess: function(session) {
                    return (0, _tslib.__awaiter)(_this, void 0, void 0, function() {
                        var cred, e_3, currentUser, e_4;
                        return (0, _tslib.__generator)(this, function(_a) {
                            switch(_a.label){
                                case 0:
                                    logger.debug(session);
                                    _a.label = 1;
                                case 1:
                                    _a.trys.push([
                                        1,
                                        4,
                                        5,
                                        10
                                    ]);
                                    return [
                                        4 /*yield*/ ,
                                        this.Credentials.clear()
                                    ];
                                case 2:
                                    _a.sent();
                                    return [
                                        4 /*yield*/ ,
                                        this.Credentials.set(session, "session")
                                    ];
                                case 3:
                                    cred = _a.sent();
                                    logger.debug("succeed to get cognito credentials", cred);
                                    return [
                                        3 /*break*/ ,
                                        10
                                    ];
                                case 4:
                                    e_3 = _a.sent();
                                    logger.debug("cannot get cognito credentials", e_3);
                                    return [
                                        3 /*break*/ ,
                                        10
                                    ];
                                case 5:
                                    that.user = user;
                                    _a.label = 6;
                                case 6:
                                    _a.trys.push([
                                        6,
                                        8,
                                        ,
                                        9
                                    ]);
                                    return [
                                        4 /*yield*/ ,
                                        this.currentUserPoolUser()
                                    ];
                                case 7:
                                    currentUser = _a.sent();
                                    user.attributes = currentUser.attributes;
                                    return [
                                        3 /*break*/ ,
                                        9
                                    ];
                                case 8:
                                    e_4 = _a.sent();
                                    logger.debug("cannot get updated Cognito User", e_4);
                                    return [
                                        3 /*break*/ ,
                                        9
                                    ];
                                case 9:
                                    dispatchAuthEvent("signIn", user, "A user " + user.getUsername() + " has been signed in");
                                    resolve(user);
                                    return [
                                        7 /*endfinally*/ 
                                    ];
                                case 10:
                                    return [
                                        2 /*return*/ 
                                    ];
                            }
                        });
                    });
                },
                onFailure: function(err) {
                    logger.debug("confirm signIn failure", err);
                    reject(err);
                }
            }, mfaType, clientMetadata);
        });
    };
    AuthClass.prototype.completeNewPassword = function(user, password, requiredAttributes, clientMetadata) {
        var _this = this;
        if (requiredAttributes === void 0) requiredAttributes = {};
        if (clientMetadata === void 0) clientMetadata = this._config.clientMetadata;
        if (!password) return this.rejectAuthError((0, _auth.AuthErrorTypes).EmptyPassword);
        var that = this;
        return new Promise(function(resolve, reject) {
            user.completeNewPasswordChallenge(password, requiredAttributes, {
                onSuccess: function(session) {
                    return (0, _tslib.__awaiter)(_this, void 0, void 0, function() {
                        var cred, e_5;
                        return (0, _tslib.__generator)(this, function(_a) {
                            switch(_a.label){
                                case 0:
                                    logger.debug(session);
                                    _a.label = 1;
                                case 1:
                                    _a.trys.push([
                                        1,
                                        4,
                                        5,
                                        6
                                    ]);
                                    return [
                                        4 /*yield*/ ,
                                        this.Credentials.clear()
                                    ];
                                case 2:
                                    _a.sent();
                                    return [
                                        4 /*yield*/ ,
                                        this.Credentials.set(session, "session")
                                    ];
                                case 3:
                                    cred = _a.sent();
                                    logger.debug("succeed to get cognito credentials", cred);
                                    return [
                                        3 /*break*/ ,
                                        6
                                    ];
                                case 4:
                                    e_5 = _a.sent();
                                    logger.debug("cannot get cognito credentials", e_5);
                                    return [
                                        3 /*break*/ ,
                                        6
                                    ];
                                case 5:
                                    that.user = user;
                                    dispatchAuthEvent("signIn", user, "A user " + user.getUsername() + " has been signed in");
                                    resolve(user);
                                    return [
                                        7 /*endfinally*/ 
                                    ];
                                case 6:
                                    return [
                                        2 /*return*/ 
                                    ];
                            }
                        });
                    });
                },
                onFailure: function(err) {
                    logger.debug("completeNewPassword failure", err);
                    dispatchAuthEvent("completeNewPassword_failure", err, _this.user + " failed to complete the new password flow");
                    reject(err);
                },
                mfaRequired: function(challengeName, challengeParam) {
                    logger.debug("signIn MFA required");
                    user["challengeName"] = challengeName;
                    user["challengeParam"] = challengeParam;
                    resolve(user);
                },
                mfaSetup: function(challengeName, challengeParam) {
                    logger.debug("signIn mfa setup", challengeName);
                    user["challengeName"] = challengeName;
                    user["challengeParam"] = challengeParam;
                    resolve(user);
                },
                totpRequired: function(challengeName, challengeParam) {
                    logger.debug("signIn mfa setup", challengeName);
                    user["challengeName"] = challengeName;
                    user["challengeParam"] = challengeParam;
                    resolve(user);
                }
            }, clientMetadata);
        });
    };
    /**
     * Send the answer to a custom challenge
     * @param {CognitoUser} user - The CognitoUser object
     * @param {String} challengeResponses - The confirmation code
     */ AuthClass.prototype.sendCustomChallengeAnswer = function(user, challengeResponses, clientMetadata) {
        var _this = this;
        if (clientMetadata === void 0) clientMetadata = this._config.clientMetadata;
        if (!this.userPool) return this.rejectNoUserPool();
        if (!challengeResponses) return this.rejectAuthError((0, _auth.AuthErrorTypes).EmptyChallengeResponse);
        var that = this;
        return new Promise(function(resolve, reject) {
            user.sendCustomChallengeAnswer(challengeResponses, _this.authCallbacks(user, resolve, reject), clientMetadata);
        });
    };
    /**
     * Delete an authenticated users' attributes
     * @param {CognitoUser} - The currently logged in user object
     * @return {Promise}
     **/ AuthClass.prototype.deleteUserAttributes = function(user, attributeNames) {
        var that = this;
        return new Promise(function(resolve, reject) {
            that.userSession(user).then(function(session) {
                user.deleteAttributes(attributeNames, function(err, result) {
                    if (err) return reject(err);
                    else return resolve(result);
                });
            });
        });
    };
    /**
     * Delete the current authenticated user
     * @return {Promise}
     **/ // TODO: Check return type void
    AuthClass.prototype.deleteUser = function() {
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            var e_6, isSignedInHostedUI;
            var _this = this;
            return (0, _tslib.__generator)(this, function(_a) {
                switch(_a.label){
                    case 0:
                        _a.trys.push([
                            0,
                            2,
                            ,
                            3
                        ]);
                        return [
                            4 /*yield*/ ,
                            this._storageSync
                        ];
                    case 1:
                        _a.sent();
                        return [
                            3 /*break*/ ,
                            3
                        ];
                    case 2:
                        e_6 = _a.sent();
                        logger.debug("Failed to sync cache info into memory", e_6);
                        throw new Error(e_6);
                    case 3:
                        isSignedInHostedUI = this._oAuthHandler && this._storage.getItem("amplify-signin-with-hostedUI") === "true";
                        return [
                            2 /*return*/ ,
                            new Promise(function(res, rej) {
                                return (0, _tslib.__awaiter)(_this, void 0, void 0, function() {
                                    var user_1;
                                    var _this = this;
                                    return (0, _tslib.__generator)(this, function(_a) {
                                        if (this.userPool) {
                                            user_1 = this.userPool.getCurrentUser();
                                            if (!user_1) {
                                                logger.debug("Failed to get user from user pool");
                                                return [
                                                    2 /*return*/ ,
                                                    rej(new Error("No current user."))
                                                ];
                                            } else user_1.getSession(function(err, session) {
                                                return (0, _tslib.__awaiter)(_this, void 0, void 0, function() {
                                                    var cleanUpError_4;
                                                    var _this = this;
                                                    return (0, _tslib.__generator)(this, function(_a) {
                                                        switch(_a.label){
                                                            case 0:
                                                                if (!err) return [
                                                                    3 /*break*/ ,
                                                                    5
                                                                ];
                                                                logger.debug("Failed to get the user session", err);
                                                                if (!this.isSessionInvalid(err)) return [
                                                                    3 /*break*/ ,
                                                                    4
                                                                ];
                                                                _a.label = 1;
                                                            case 1:
                                                                _a.trys.push([
                                                                    1,
                                                                    3,
                                                                    ,
                                                                    4
                                                                ]);
                                                                return [
                                                                    4 /*yield*/ ,
                                                                    this.cleanUpInvalidSession(user_1)
                                                                ];
                                                            case 2:
                                                                _a.sent();
                                                                return [
                                                                    3 /*break*/ ,
                                                                    4
                                                                ];
                                                            case 3:
                                                                cleanUpError_4 = _a.sent();
                                                                rej(new Error("Session is invalid due to: " + err.message + " and failed to clean up invalid session: " + cleanUpError_4.message));
                                                                return [
                                                                    2 /*return*/ 
                                                                ];
                                                            case 4:
                                                                return [
                                                                    2 /*return*/ ,
                                                                    rej(err)
                                                                ];
                                                            case 5:
                                                                user_1.deleteUser(function(err, result) {
                                                                    if (err) rej(err);
                                                                    else {
                                                                        dispatchAuthEvent("userDeleted", result, "The authenticated user has been deleted.");
                                                                        user_1.signOut();
                                                                        _this.user = null;
                                                                        try {
                                                                            _this.cleanCachedItems(); // clean aws credentials
                                                                        } catch (e) {
                                                                            // TODO: change to rejects in refactor
                                                                            logger.debug("failed to clear cached items");
                                                                        }
                                                                        if (isSignedInHostedUI) _this.oAuthSignOutRedirect(res, rej);
                                                                        else {
                                                                            dispatchAuthEvent("signOut", _this.user, "A user has been signed out");
                                                                            res(result);
                                                                        }
                                                                    }
                                                                });
                                                                _a.label = 6;
                                                            case 6:
                                                                return [
                                                                    2 /*return*/ 
                                                                ];
                                                        }
                                                    });
                                                });
                                            });
                                        } else {
                                            logger.debug("no Congito User pool");
                                            rej(new Error("Cognito User pool does not exist"));
                                        }
                                        return [
                                            2 /*return*/ 
                                        ];
                                    });
                                });
                            })
                        ];
                }
            });
        });
    };
    /**
     * Update an authenticated users' attributes
     * @param {CognitoUser} - The currently logged in user object
     * @return {Promise}
     **/ AuthClass.prototype.updateUserAttributes = function(user, attributes, clientMetadata) {
        var _this = this;
        if (clientMetadata === void 0) clientMetadata = this._config.clientMetadata;
        var attributeList = [];
        var that = this;
        return new Promise(function(resolve, reject) {
            that.userSession(user).then(function(session) {
                for(var key in attributes)if (key !== "sub" && key.indexOf("_verified") < 0) {
                    var attr = {
                        Name: key,
                        Value: attributes[key]
                    };
                    attributeList.push(attr);
                }
                user.updateAttributes(attributeList, function(err, result, details) {
                    if (err) {
                        dispatchAuthEvent("updateUserAttributes_failure", err, "Failed to update attributes");
                        return reject(err);
                    } else {
                        var attrs = _this.createUpdateAttributesResultList(attributes, details === null || details === void 0 ? void 0 : details.CodeDeliveryDetailsList);
                        dispatchAuthEvent("updateUserAttributes", attrs, "Attributes successfully updated");
                        return resolve(result);
                    }
                }, clientMetadata);
            });
        });
    };
    AuthClass.prototype.createUpdateAttributesResultList = function(attributes, codeDeliveryDetailsList) {
        var attrs = {};
        Object.keys(attributes).forEach(function(key) {
            attrs[key] = {
                isUpdated: true
            };
            var codeDeliveryDetails = codeDeliveryDetailsList === null || codeDeliveryDetailsList === void 0 ? void 0 : codeDeliveryDetailsList.find(function(value) {
                return value.AttributeName === key;
            });
            if (codeDeliveryDetails) {
                attrs[key].isUpdated = false;
                attrs[key].codeDeliveryDetails = codeDeliveryDetails;
            }
        });
        return attrs;
    };
    /**
     * Return user attributes
     * @param {Object} user - The CognitoUser object
     * @return - A promise resolves to user attributes if success
     */ AuthClass.prototype.userAttributes = function(user) {
        var _this = this;
        return new Promise(function(resolve, reject) {
            _this.userSession(user).then(function(session) {
                user.getUserAttributes(function(err, attributes) {
                    if (err) reject(err);
                    else resolve(attributes);
                });
            });
        });
    };
    AuthClass.prototype.verifiedContact = function(user) {
        var that = this;
        return this.userAttributes(user).then(function(attributes) {
            var attrs = that.attributesToObject(attributes);
            var unverified = {};
            var verified = {};
            if (attrs["email"]) {
                if (attrs["email_verified"]) verified["email"] = attrs["email"];
                else unverified["email"] = attrs["email"];
            }
            if (attrs["phone_number"]) {
                if (attrs["phone_number_verified"]) verified["phone_number"] = attrs["phone_number"];
                else unverified["phone_number"] = attrs["phone_number"];
            }
            return {
                verified: verified,
                unverified: unverified
            };
        });
    };
    AuthClass.prototype.isErrorWithMessage = function(err) {
        return typeof err === "object" && Object.prototype.hasOwnProperty.call(err, "message");
    };
    // Session revoked by another app
    AuthClass.prototype.isTokenRevokedError = function(err) {
        return this.isErrorWithMessage(err) && err.message === "Access Token has been revoked";
    };
    AuthClass.prototype.isRefreshTokenRevokedError = function(err) {
        return this.isErrorWithMessage(err) && err.message === "Refresh Token has been revoked";
    };
    AuthClass.prototype.isUserDisabledError = function(err) {
        return this.isErrorWithMessage(err) && err.message === "User is disabled.";
    };
    AuthClass.prototype.isUserDoesNotExistError = function(err) {
        return this.isErrorWithMessage(err) && err.message === "User does not exist.";
    };
    AuthClass.prototype.isRefreshTokenExpiredError = function(err) {
        return this.isErrorWithMessage(err) && err.message === "Refresh Token has expired";
    };
    AuthClass.prototype.isSignedInHostedUI = function() {
        return this._oAuthHandler && this._storage.getItem("amplify-signin-with-hostedUI") === "true";
    };
    AuthClass.prototype.isSessionInvalid = function(err) {
        return this.isUserDisabledError(err) || this.isUserDoesNotExistError(err) || this.isTokenRevokedError(err) || this.isRefreshTokenRevokedError(err) || this.isRefreshTokenExpiredError(err);
    };
    AuthClass.prototype.cleanUpInvalidSession = function(user) {
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            var e_7;
            var _this = this;
            return (0, _tslib.__generator)(this, function(_a) {
                switch(_a.label){
                    case 0:
                        user.signOut();
                        this.user = null;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([
                            1,
                            3,
                            ,
                            4
                        ]);
                        return [
                            4 /*yield*/ ,
                            this.cleanCachedItems()
                        ];
                    case 2:
                        _a.sent(); // clean aws credentials
                        return [
                            3 /*break*/ ,
                            4
                        ];
                    case 3:
                        e_7 = _a.sent();
                        logger.debug("failed to clear cached items");
                        return [
                            3 /*break*/ ,
                            4
                        ];
                    case 4:
                        if (this.isSignedInHostedUI()) return [
                            2 /*return*/ ,
                            new Promise(function(res, rej) {
                                _this.oAuthSignOutRedirect(res, rej);
                            })
                        ];
                        else dispatchAuthEvent("signOut", this.user, "A user has been signed out");
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    /**
     * Get current authenticated user
     * @return - A promise resolves to current authenticated CognitoUser if success
     */ AuthClass.prototype.currentUserPoolUser = function(params) {
        var _this = this;
        if (!this.userPool) return this.rejectNoUserPool();
        return new Promise(function(res, rej) {
            _this._storageSync.then(function() {
                return (0, _tslib.__awaiter)(_this, void 0, void 0, function() {
                    var user, session, bypassCache, clientMetadata, _a, scope, err_1;
                    var _this = this;
                    return (0, _tslib.__generator)(this, function(_b) {
                        switch(_b.label){
                            case 0:
                                if (!this.isOAuthInProgress()) return [
                                    3 /*break*/ ,
                                    2
                                ];
                                logger.debug("OAuth signIn in progress, waiting for resolution...");
                                return [
                                    4 /*yield*/ ,
                                    new Promise(function(res) {
                                        var timeoutId = setTimeout(function() {
                                            logger.debug("OAuth signIn in progress timeout");
                                            (0, _core.Hub).remove("auth", hostedUISignCallback);
                                            res();
                                        }, OAUTH_FLOW_MS_TIMEOUT);
                                        (0, _core.Hub).listen("auth", hostedUISignCallback);
                                        function hostedUISignCallback(_a) {
                                            var payload = _a.payload;
                                            var event = payload.event;
                                            if (event === "cognitoHostedUI" || event === "cognitoHostedUI_failure") {
                                                logger.debug("OAuth signIn resolved: " + event);
                                                clearTimeout(timeoutId);
                                                (0, _core.Hub).remove("auth", hostedUISignCallback);
                                                res();
                                            }
                                        }
                                    })
                                ];
                            case 1:
                                _b.sent();
                                _b.label = 2;
                            case 2:
                                user = this.userPool.getCurrentUser();
                                if (!user) {
                                    logger.debug("Failed to get user from user pool");
                                    rej("No current user");
                                    return [
                                        2 /*return*/ 
                                    ];
                                }
                                _b.label = 3;
                            case 3:
                                _b.trys.push([
                                    3,
                                    7,
                                    ,
                                    8
                                ]);
                                return [
                                    4 /*yield*/ ,
                                    this._userSession(user)
                                ];
                            case 4:
                                session = _b.sent();
                                bypassCache = params ? params.bypassCache : false;
                                if (!bypassCache) return [
                                    3 /*break*/ ,
                                    6
                                ];
                                return [
                                    4 /*yield*/ ,
                                    this.Credentials.clear()
                                ];
                            case 5:
                                _b.sent();
                                _b.label = 6;
                            case 6:
                                clientMetadata = this._config.clientMetadata;
                                _a = session.getAccessToken().decodePayload().scope, scope = _a === void 0 ? "" : _a;
                                if (scope.split(" ").includes(USER_ADMIN_SCOPE)) user.getUserData(function(err, data) {
                                    return (0, _tslib.__awaiter)(_this, void 0, void 0, function() {
                                        var cleanUpError_5, preferredMFA, attributeList, i, attribute, userAttribute, attributes;
                                        return (0, _tslib.__generator)(this, function(_a) {
                                            switch(_a.label){
                                                case 0:
                                                    if (!err) return [
                                                        3 /*break*/ ,
                                                        7
                                                    ];
                                                    logger.debug("getting user data failed", err);
                                                    if (!this.isSessionInvalid(err)) return [
                                                        3 /*break*/ ,
                                                        5
                                                    ];
                                                    _a.label = 1;
                                                case 1:
                                                    _a.trys.push([
                                                        1,
                                                        3,
                                                        ,
                                                        4
                                                    ]);
                                                    return [
                                                        4 /*yield*/ ,
                                                        this.cleanUpInvalidSession(user)
                                                    ];
                                                case 2:
                                                    _a.sent();
                                                    return [
                                                        3 /*break*/ ,
                                                        4
                                                    ];
                                                case 3:
                                                    cleanUpError_5 = _a.sent();
                                                    rej(new Error("Session is invalid due to: " + err.message + " and failed to clean up invalid session: " + cleanUpError_5.message));
                                                    return [
                                                        2 /*return*/ 
                                                    ];
                                                case 4:
                                                    rej(err);
                                                    return [
                                                        3 /*break*/ ,
                                                        6
                                                    ];
                                                case 5:
                                                    res(user);
                                                    _a.label = 6;
                                                case 6:
                                                    return [
                                                        2 /*return*/ 
                                                    ];
                                                case 7:
                                                    preferredMFA = data.PreferredMfaSetting || "NOMFA";
                                                    attributeList = [];
                                                    for(i = 0; i < data.UserAttributes.length; i++){
                                                        attribute = {
                                                            Name: data.UserAttributes[i].Name,
                                                            Value: data.UserAttributes[i].Value
                                                        };
                                                        userAttribute = new (0, _amazonCognitoIdentityJs.CognitoUserAttribute)(attribute);
                                                        attributeList.push(userAttribute);
                                                    }
                                                    attributes = this.attributesToObject(attributeList);
                                                    Object.assign(user, {
                                                        attributes: attributes,
                                                        preferredMFA: preferredMFA
                                                    });
                                                    return [
                                                        2 /*return*/ ,
                                                        res(user)
                                                    ];
                                            }
                                        });
                                    });
                                }, {
                                    bypassCache: bypassCache,
                                    clientMetadata: clientMetadata
                                });
                                else {
                                    logger.debug("Unable to get the user data because the " + USER_ADMIN_SCOPE + " " + "is not in the scopes of the access token");
                                    return [
                                        2 /*return*/ ,
                                        res(user)
                                    ];
                                }
                                return [
                                    3 /*break*/ ,
                                    8
                                ];
                            case 7:
                                err_1 = _b.sent();
                                rej(err_1);
                                return [
                                    3 /*break*/ ,
                                    8
                                ];
                            case 8:
                                return [
                                    2 /*return*/ 
                                ];
                        }
                    });
                });
            }).catch(function(e) {
                logger.debug("Failed to sync cache info into memory", e);
                return rej(e);
            });
        });
    };
    AuthClass.prototype.isOAuthInProgress = function() {
        return this.oAuthFlowInProgress;
    };
    /**
     * Get current authenticated user
     * @param {CurrentUserOpts} - options for getting the current user
     * @return - A promise resolves to current authenticated CognitoUser if success
     */ AuthClass.prototype.currentAuthenticatedUser = function(params) {
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            var federatedUser, e_8, federatedInfo, user, e_9;
            return (0, _tslib.__generator)(this, function(_a) {
                switch(_a.label){
                    case 0:
                        logger.debug("getting current authenticated user");
                        federatedUser = null;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([
                            1,
                            3,
                            ,
                            4
                        ]);
                        return [
                            4 /*yield*/ ,
                            this._storageSync
                        ];
                    case 2:
                        _a.sent();
                        return [
                            3 /*break*/ ,
                            4
                        ];
                    case 3:
                        e_8 = _a.sent();
                        logger.debug("Failed to sync cache info into memory", e_8);
                        throw e_8;
                    case 4:
                        try {
                            federatedInfo = JSON.parse(this._storage.getItem("aws-amplify-federatedInfo"));
                            if (federatedInfo) federatedUser = (0, _tslib.__assign)((0, _tslib.__assign)({}, federatedInfo.user), {
                                token: federatedInfo.token
                            });
                        } catch (e) {
                            logger.debug("cannot load federated user from auth storage");
                        }
                        if (!federatedUser) return [
                            3 /*break*/ ,
                            5
                        ];
                        this.user = federatedUser;
                        logger.debug("get current authenticated federated user", this.user);
                        return [
                            2 /*return*/ ,
                            this.user
                        ];
                    case 5:
                        logger.debug("get current authenticated userpool user");
                        user = null;
                        _a.label = 6;
                    case 6:
                        _a.trys.push([
                            6,
                            8,
                            ,
                            9
                        ]);
                        return [
                            4 /*yield*/ ,
                            this.currentUserPoolUser(params)
                        ];
                    case 7:
                        user = _a.sent();
                        return [
                            3 /*break*/ ,
                            9
                        ];
                    case 8:
                        e_9 = _a.sent();
                        if (e_9 === "No userPool") logger.error("Cannot get the current user because the user pool is missing. Please make sure the Auth module is configured with a valid Cognito User Pool ID");
                        logger.debug("The user is not authenticated by the error", e_9);
                        return [
                            2 /*return*/ ,
                            Promise.reject("The user is not authenticated")
                        ];
                    case 9:
                        this.user = user;
                        return [
                            2 /*return*/ ,
                            this.user
                        ];
                }
            });
        });
    };
    /**
     * Get current user's session
     * @return - A promise resolves to session object if success
     */ AuthClass.prototype.currentSession = function() {
        var that = this;
        logger.debug("Getting current session");
        // Purposely not calling the reject method here because we don't need a console error
        if (!this.userPool) return Promise.reject(new Error("No User Pool in the configuration."));
        return new Promise(function(res, rej) {
            that.currentUserPoolUser().then(function(user) {
                that.userSession(user).then(function(session) {
                    res(session);
                    return;
                }).catch(function(e) {
                    logger.debug("Failed to get the current session", e);
                    rej(e);
                    return;
                });
            }).catch(function(e) {
                logger.debug("Failed to get the current user", e);
                rej(e);
                return;
            });
        });
    };
    AuthClass.prototype._userSession = function(user) {
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            var clientMetadata, userSession;
            var _this = this;
            return (0, _tslib.__generator)(this, function(_a) {
                switch(_a.label){
                    case 0:
                        if (!user) {
                            logger.debug("the user is null");
                            return [
                                2 /*return*/ ,
                                this.rejectAuthError((0, _auth.AuthErrorTypes).NoUserSession)
                            ];
                        }
                        clientMetadata = this._config.clientMetadata;
                        // Debouncing the concurrent userSession calls by caching the promise.
                        // This solution assumes users will always call this function with the same CognitoUser instance.
                        if (this.inflightSessionPromiseCounter === 0) this.inflightSessionPromise = new Promise(function(res, rej) {
                            user.getSession(function(err, session) {
                                return (0, _tslib.__awaiter)(_this, void 0, void 0, function() {
                                    var cleanUpError_6;
                                    return (0, _tslib.__generator)(this, function(_a) {
                                        switch(_a.label){
                                            case 0:
                                                if (!err) return [
                                                    3 /*break*/ ,
                                                    5
                                                ];
                                                logger.debug("Failed to get the session from user", user);
                                                if (!this.isSessionInvalid(err)) return [
                                                    3 /*break*/ ,
                                                    4
                                                ];
                                                _a.label = 1;
                                            case 1:
                                                _a.trys.push([
                                                    1,
                                                    3,
                                                    ,
                                                    4
                                                ]);
                                                return [
                                                    4 /*yield*/ ,
                                                    this.cleanUpInvalidSession(user)
                                                ];
                                            case 2:
                                                _a.sent();
                                                return [
                                                    3 /*break*/ ,
                                                    4
                                                ];
                                            case 3:
                                                cleanUpError_6 = _a.sent();
                                                rej(new Error("Session is invalid due to: " + err.message + " and failed to clean up invalid session: " + cleanUpError_6.message));
                                                return [
                                                    2 /*return*/ 
                                                ];
                                            case 4:
                                                rej(err);
                                                return [
                                                    2 /*return*/ 
                                                ];
                                            case 5:
                                                logger.debug("Succeed to get the user session", session);
                                                res(session);
                                                return [
                                                    2 /*return*/ 
                                                ];
                                        }
                                    });
                                });
                            }, {
                                clientMetadata: clientMetadata
                            });
                        });
                        this.inflightSessionPromiseCounter++;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([
                            1,
                            ,
                            3,
                            4
                        ]);
                        return [
                            4 /*yield*/ ,
                            this.inflightSessionPromise
                        ];
                    case 2:
                        userSession = _a.sent();
                        // Set private member. Avoid user.setSignInUserSession() to prevent excessive localstorage refresh.
                        // @ts-ignore
                        user.signInUserSession = userSession;
                        return [
                            2 /*return*/ ,
                            userSession
                        ];
                    case 3:
                        this.inflightSessionPromiseCounter--;
                        return [
                            7 /*endfinally*/ 
                        ];
                    case 4:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    /**
     * Get the corresponding user session
     * @param {Object} user - The CognitoUser object
     * @return - A promise resolves to the session
     */ AuthClass.prototype.userSession = function(user) {
        return this._userSession(user);
    };
    /**
     * Get authenticated credentials of current user.
     * @return - A promise resolves to be current user's credentials
     */ AuthClass.prototype.currentUserCredentials = function() {
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            var e_10, federatedInfo;
            var _this = this;
            return (0, _tslib.__generator)(this, function(_a) {
                switch(_a.label){
                    case 0:
                        logger.debug("Getting current user credentials");
                        _a.label = 1;
                    case 1:
                        _a.trys.push([
                            1,
                            3,
                            ,
                            4
                        ]);
                        return [
                            4 /*yield*/ ,
                            this._storageSync
                        ];
                    case 2:
                        _a.sent();
                        return [
                            3 /*break*/ ,
                            4
                        ];
                    case 3:
                        e_10 = _a.sent();
                        logger.debug("Failed to sync cache info into memory", e_10);
                        throw e_10;
                    case 4:
                        federatedInfo = null;
                        try {
                            federatedInfo = JSON.parse(this._storage.getItem("aws-amplify-federatedInfo"));
                        } catch (e) {
                            logger.debug("failed to get or parse item aws-amplify-federatedInfo", e);
                        }
                        if (federatedInfo) // refresh the jwt token here if necessary
                        return [
                            2 /*return*/ ,
                            this.Credentials.refreshFederatedToken(federatedInfo)
                        ];
                        else return [
                            2 /*return*/ ,
                            this.currentSession().then(function(session) {
                                logger.debug("getting session success", session);
                                return _this.Credentials.set(session, "session");
                            }).catch(function() {
                                logger.debug("getting guest credentials");
                                return _this.Credentials.set(null, "guest");
                            })
                        ];
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    AuthClass.prototype.currentCredentials = function() {
        logger.debug("getting current credentials");
        return this.Credentials.get();
    };
    /**
     * Initiate an attribute confirmation request
     * @param {Object} user - The CognitoUser
     * @param {Object} attr - The attributes to be verified
     * @return - A promise resolves to callback data if success
     */ AuthClass.prototype.verifyUserAttribute = function(user, attr, clientMetadata) {
        if (clientMetadata === void 0) clientMetadata = this._config.clientMetadata;
        return new Promise(function(resolve, reject) {
            user.getAttributeVerificationCode(attr, {
                onSuccess: function(success) {
                    return resolve(success);
                },
                onFailure: function(err) {
                    return reject(err);
                }
            }, clientMetadata);
        });
    };
    /**
     * Confirm an attribute using a confirmation code
     * @param {Object} user - The CognitoUser
     * @param {Object} attr - The attribute to be verified
     * @param {String} code - The confirmation code
     * @return - A promise resolves to callback data if success
     */ AuthClass.prototype.verifyUserAttributeSubmit = function(user, attr, code) {
        if (!code) return this.rejectAuthError((0, _auth.AuthErrorTypes).EmptyCode);
        return new Promise(function(resolve, reject) {
            user.verifyAttribute(attr, code, {
                onSuccess: function(data) {
                    resolve(data);
                    return;
                },
                onFailure: function(err) {
                    reject(err);
                    return;
                }
            });
        });
    };
    AuthClass.prototype.verifyCurrentUserAttribute = function(attr) {
        var that = this;
        return that.currentUserPoolUser().then(function(user) {
            return that.verifyUserAttribute(user, attr);
        });
    };
    /**
     * Confirm current user's attribute using a confirmation code
     * @param {Object} attr - The attribute to be verified
     * @param {String} code - The confirmation code
     * @return - A promise resolves to callback data if success
     */ AuthClass.prototype.verifyCurrentUserAttributeSubmit = function(attr, code) {
        var that = this;
        return that.currentUserPoolUser().then(function(user) {
            return that.verifyUserAttributeSubmit(user, attr, code);
        });
    };
    AuthClass.prototype.cognitoIdentitySignOut = function(opts, user) {
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            var e_11, isSignedInHostedUI;
            var _this = this;
            return (0, _tslib.__generator)(this, function(_a) {
                switch(_a.label){
                    case 0:
                        _a.trys.push([
                            0,
                            2,
                            ,
                            3
                        ]);
                        return [
                            4 /*yield*/ ,
                            this._storageSync
                        ];
                    case 1:
                        _a.sent();
                        return [
                            3 /*break*/ ,
                            3
                        ];
                    case 2:
                        e_11 = _a.sent();
                        logger.debug("Failed to sync cache info into memory", e_11);
                        throw e_11;
                    case 3:
                        isSignedInHostedUI = this._oAuthHandler && this._storage.getItem("amplify-signin-with-hostedUI") === "true";
                        return [
                            2 /*return*/ ,
                            new Promise(function(res, rej) {
                                if (opts && opts.global) {
                                    logger.debug("user global sign out", user);
                                    // in order to use global signout
                                    // we must validate the user as an authenticated user by using getSession
                                    var clientMetadata = _this._config.clientMetadata; // TODO: verify behavior if this is override during signIn
                                    user.getSession(function(err, result) {
                                        return (0, _tslib.__awaiter)(_this, void 0, void 0, function() {
                                            var cleanUpError_7;
                                            var _this = this;
                                            return (0, _tslib.__generator)(this, function(_a) {
                                                switch(_a.label){
                                                    case 0:
                                                        if (!err) return [
                                                            3 /*break*/ ,
                                                            5
                                                        ];
                                                        logger.debug("failed to get the user session", err);
                                                        if (!this.isSessionInvalid(err)) return [
                                                            3 /*break*/ ,
                                                            4
                                                        ];
                                                        _a.label = 1;
                                                    case 1:
                                                        _a.trys.push([
                                                            1,
                                                            3,
                                                            ,
                                                            4
                                                        ]);
                                                        return [
                                                            4 /*yield*/ ,
                                                            this.cleanUpInvalidSession(user)
                                                        ];
                                                    case 2:
                                                        _a.sent();
                                                        return [
                                                            3 /*break*/ ,
                                                            4
                                                        ];
                                                    case 3:
                                                        cleanUpError_7 = _a.sent();
                                                        rej(new Error("Session is invalid due to: " + err.message + " and failed to clean up invalid session: " + cleanUpError_7.message));
                                                        return [
                                                            2 /*return*/ 
                                                        ];
                                                    case 4:
                                                        return [
                                                            2 /*return*/ ,
                                                            rej(err)
                                                        ];
                                                    case 5:
                                                        user.globalSignOut({
                                                            onSuccess: function(data) {
                                                                logger.debug("global sign out success");
                                                                if (isSignedInHostedUI) _this.oAuthSignOutRedirect(res, rej);
                                                                else return res();
                                                            },
                                                            onFailure: function(err) {
                                                                logger.debug("global sign out failed", err);
                                                                return rej(err);
                                                            }
                                                        });
                                                        return [
                                                            2 /*return*/ 
                                                        ];
                                                }
                                            });
                                        });
                                    }, {
                                        clientMetadata: clientMetadata
                                    });
                                } else {
                                    logger.debug("user sign out", user);
                                    user.signOut(function() {
                                        if (isSignedInHostedUI) _this.oAuthSignOutRedirect(res, rej);
                                        else return res();
                                    });
                                }
                            })
                        ];
                }
            });
        });
    };
    AuthClass.prototype.oAuthSignOutRedirect = function(resolve, reject) {
        var isBrowser = (0, _core.browserOrNode)().isBrowser;
        if (isBrowser) this.oAuthSignOutRedirectOrReject(reject);
        else this.oAuthSignOutAndResolve(resolve);
    };
    AuthClass.prototype.oAuthSignOutAndResolve = function(resolve) {
        this._oAuthHandler.signOut();
        resolve();
    };
    AuthClass.prototype.oAuthSignOutRedirectOrReject = function(reject) {
        this._oAuthHandler.signOut(); // this method redirects url
        // App should be redirected to another url otherwise it will reject
        setTimeout(function() {
            return reject(Error("Signout timeout fail"));
        }, 3000);
    };
    /**
     * Sign out method
     * @
     * @return - A promise resolved if success
     */ AuthClass.prototype.signOut = function(opts) {
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            var e_12, user;
            return (0, _tslib.__generator)(this, function(_a) {
                switch(_a.label){
                    case 0:
                        _a.trys.push([
                            0,
                            2,
                            ,
                            3
                        ]);
                        return [
                            4 /*yield*/ ,
                            this.cleanCachedItems()
                        ];
                    case 1:
                        _a.sent();
                        return [
                            3 /*break*/ ,
                            3
                        ];
                    case 2:
                        e_12 = _a.sent();
                        logger.debug("failed to clear cached items");
                        return [
                            3 /*break*/ ,
                            3
                        ];
                    case 3:
                        if (!this.userPool) return [
                            3 /*break*/ ,
                            7
                        ];
                        user = this.userPool.getCurrentUser();
                        if (!user) return [
                            3 /*break*/ ,
                            5
                        ];
                        return [
                            4 /*yield*/ ,
                            this.cognitoIdentitySignOut(opts, user)
                        ];
                    case 4:
                        _a.sent();
                        return [
                            3 /*break*/ ,
                            6
                        ];
                    case 5:
                        logger.debug("no current Cognito user");
                        _a.label = 6;
                    case 6:
                        return [
                            3 /*break*/ ,
                            8
                        ];
                    case 7:
                        logger.debug("no Cognito User pool");
                        _a.label = 8;
                    case 8:
                        /**
                         * Note for future refactor - no reliable way to get username with
                         * Cognito User Pools vs Identity when federating with Social Providers
                         * This is why we need a well structured session object that can be inspected
                         * and information passed back in the message below for Hub dispatch
                         */ dispatchAuthEvent("signOut", this.user, "A user has been signed out");
                        this.user = null;
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    AuthClass.prototype.cleanCachedItems = function() {
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            return (0, _tslib.__generator)(this, function(_a) {
                switch(_a.label){
                    case 0:
                        // clear cognito cached item
                        return [
                            4 /*yield*/ ,
                            this.Credentials.clear()
                        ];
                    case 1:
                        // clear cognito cached item
                        _a.sent();
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    /**
     * Change a password for an authenticated user
     * @param {Object} user - The CognitoUser object
     * @param {String} oldPassword - the current password
     * @param {String} newPassword - the requested new password
     * @return - A promise resolves if success
     */ AuthClass.prototype.changePassword = function(user, oldPassword, newPassword, clientMetadata) {
        var _this = this;
        if (clientMetadata === void 0) clientMetadata = this._config.clientMetadata;
        return new Promise(function(resolve, reject) {
            _this.userSession(user).then(function(session) {
                user.changePassword(oldPassword, newPassword, function(err, data) {
                    if (err) {
                        logger.debug("change password failure", err);
                        return reject(err);
                    } else return resolve(data);
                }, clientMetadata);
            });
        });
    };
    /**
     * Initiate a forgot password request
     * @param {String} username - the username to change password
     * @return - A promise resolves if success
     */ AuthClass.prototype.forgotPassword = function(username, clientMetadata) {
        if (clientMetadata === void 0) clientMetadata = this._config.clientMetadata;
        if (!this.userPool) return this.rejectNoUserPool();
        if (!username) return this.rejectAuthError((0, _auth.AuthErrorTypes).EmptyUsername);
        var user = this.createCognitoUser(username);
        return new Promise(function(resolve, reject) {
            user.forgotPassword({
                onSuccess: function() {
                    resolve();
                    return;
                },
                onFailure: function(err) {
                    logger.debug("forgot password failure", err);
                    dispatchAuthEvent("forgotPassword_failure", err, username + " forgotPassword failed");
                    reject(err);
                    return;
                },
                inputVerificationCode: function(data) {
                    dispatchAuthEvent("forgotPassword", user, username + " has initiated forgot password flow");
                    resolve(data);
                    return;
                }
            }, clientMetadata);
        });
    };
    /**
     * Confirm a new password using a confirmation Code
     * @param {String} username - The username
     * @param {String} code - The confirmation code
     * @param {String} password - The new password
     * @return - A promise that resolves if success
     */ AuthClass.prototype.forgotPasswordSubmit = function(username, code, password, clientMetadata) {
        if (clientMetadata === void 0) clientMetadata = this._config.clientMetadata;
        if (!this.userPool) return this.rejectNoUserPool();
        if (!username) return this.rejectAuthError((0, _auth.AuthErrorTypes).EmptyUsername);
        if (!code) return this.rejectAuthError((0, _auth.AuthErrorTypes).EmptyCode);
        if (!password) return this.rejectAuthError((0, _auth.AuthErrorTypes).EmptyPassword);
        var user = this.createCognitoUser(username);
        return new Promise(function(resolve, reject) {
            user.confirmPassword(code, password, {
                onSuccess: function(success) {
                    dispatchAuthEvent("forgotPasswordSubmit", user, username + " forgotPasswordSubmit successful");
                    resolve(success);
                    return;
                },
                onFailure: function(err) {
                    dispatchAuthEvent("forgotPasswordSubmit_failure", err, username + " forgotPasswordSubmit failed");
                    reject(err);
                    return;
                }
            }, clientMetadata);
        });
    };
    /**
     * Get user information
     * @async
     * @return {Object }- current User's information
     */ AuthClass.prototype.currentUserInfo = function() {
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            var source, user, attributes, userAttrs, credentials, e_13, info, err_2, user;
            return (0, _tslib.__generator)(this, function(_a) {
                switch(_a.label){
                    case 0:
                        source = this.Credentials.getCredSource();
                        if (!(!source || source === "aws" || source === "userPool")) return [
                            3 /*break*/ ,
                            9
                        ];
                        return [
                            4 /*yield*/ ,
                            this.currentUserPoolUser().catch(function(err) {
                                return logger.error(err);
                            })
                        ];
                    case 1:
                        user = _a.sent();
                        if (!user) return [
                            2 /*return*/ ,
                            null
                        ];
                        _a.label = 2;
                    case 2:
                        _a.trys.push([
                            2,
                            8,
                            ,
                            9
                        ]);
                        return [
                            4 /*yield*/ ,
                            this.userAttributes(user)
                        ];
                    case 3:
                        attributes = _a.sent();
                        userAttrs = this.attributesToObject(attributes);
                        credentials = null;
                        _a.label = 4;
                    case 4:
                        _a.trys.push([
                            4,
                            6,
                            ,
                            7
                        ]);
                        return [
                            4 /*yield*/ ,
                            this.currentCredentials()
                        ];
                    case 5:
                        credentials = _a.sent();
                        return [
                            3 /*break*/ ,
                            7
                        ];
                    case 6:
                        e_13 = _a.sent();
                        logger.debug("Failed to retrieve credentials while getting current user info", e_13);
                        return [
                            3 /*break*/ ,
                            7
                        ];
                    case 7:
                        info = {
                            id: credentials ? credentials.identityId : undefined,
                            username: user.getUsername(),
                            attributes: userAttrs
                        };
                        return [
                            2 /*return*/ ,
                            info
                        ];
                    case 8:
                        err_2 = _a.sent();
                        logger.error("currentUserInfo error", err_2);
                        return [
                            2 /*return*/ ,
                            {}
                        ];
                    case 9:
                        if (source === "federated") {
                            user = this.user;
                            return [
                                2 /*return*/ ,
                                user ? user : {}
                            ];
                        }
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    AuthClass.prototype.federatedSignIn = function(providerOrOptions, response, user) {
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            var options, provider, customState, client_id, redirect_uri, provider, loggedInUser, token, identity_id, expires_at, credentials, currentUser;
            return (0, _tslib.__generator)(this, function(_a) {
                switch(_a.label){
                    case 0:
                        if (!this._config.identityPoolId && !this._config.userPoolId) throw new Error("Federation requires either a User Pool or Identity Pool in config");
                        // Ensure backwards compatability
                        if (typeof providerOrOptions === "undefined") {
                            if (this._config.identityPoolId && !this._config.userPoolId) throw new Error("Federation with Identity Pools requires tokens passed as arguments");
                        }
                        if (!((0, _types.isFederatedSignInOptions)(providerOrOptions) || (0, _types.isFederatedSignInOptionsCustom)(providerOrOptions) || (0, _types.hasCustomState)(providerOrOptions) || typeof providerOrOptions === "undefined")) return [
                            3 /*break*/ ,
                            1
                        ];
                        options = providerOrOptions || {
                            provider: (0, _auth.CognitoHostedUIIdentityProvider).Cognito
                        };
                        provider = (0, _types.isFederatedSignInOptions)(options) ? options.provider : options.customProvider;
                        customState = (0, _types.isFederatedSignInOptions)(options) ? options.customState : options.customState;
                        if (this._config.userPoolId) {
                            client_id = (0, _types.isCognitoHostedOpts)(this._config.oauth) ? this._config.userPoolWebClientId : this._config.oauth.clientID;
                            redirect_uri = (0, _types.isCognitoHostedOpts)(this._config.oauth) ? this._config.oauth.redirectSignIn : this._config.oauth.redirectUri;
                            this._oAuthHandler.oauthSignIn(this._config.oauth.responseType, this._config.oauth.domain, redirect_uri, client_id, provider, customState);
                        }
                        return [
                            3 /*break*/ ,
                            4
                        ];
                    case 1:
                        provider = providerOrOptions;
                        // To check if the user is already logged in
                        try {
                            loggedInUser = JSON.stringify(JSON.parse(this._storage.getItem("aws-amplify-federatedInfo")).user);
                            if (loggedInUser) logger.warn("There is already a signed in user: " + loggedInUser + " in your app.\n																	You should not call Auth.federatedSignIn method again as it may cause unexpected behavior.");
                        } catch (e) {}
                        token = response.token, identity_id = response.identity_id, expires_at = response.expires_at;
                        return [
                            4 /*yield*/ ,
                            this.Credentials.set({
                                provider: provider,
                                token: token,
                                identity_id: identity_id,
                                user: user,
                                expires_at: expires_at
                            }, "federation")
                        ];
                    case 2:
                        credentials = _a.sent();
                        return [
                            4 /*yield*/ ,
                            this.currentAuthenticatedUser()
                        ];
                    case 3:
                        currentUser = _a.sent();
                        dispatchAuthEvent("signIn", currentUser, "A user " + currentUser.username + " has been signed in");
                        logger.debug("federated sign in credentials", credentials);
                        return [
                            2 /*return*/ ,
                            credentials
                        ];
                    case 4:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    /**
     * Used to complete the OAuth flow with or without the Cognito Hosted UI
     * @param {String} URL - optional parameter for customers to pass in the response URL
     */ AuthClass.prototype._handleAuthResponse = function(URL) {
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            var currentUrl, hasCodeOrError, hasTokenOrError, _a, accessToken, idToken, refreshToken, state, session, credentials, isCustomStateIncluded, currentUser, customState, err_3;
            return (0, _tslib.__generator)(this, function(_b) {
                switch(_b.label){
                    case 0:
                        if (this.oAuthFlowInProgress) {
                            logger.debug("Skipping URL " + URL + " current flow in progress");
                            return [
                                2 /*return*/ 
                            ];
                        }
                        _b.label = 1;
                    case 1:
                        _b.trys.push([
                            1,
                            ,
                            8,
                            9
                        ]);
                        this.oAuthFlowInProgress = true;
                        if (!this._config.userPoolId) throw new Error("OAuth responses require a User Pool defined in config");
                        dispatchAuthEvent("parsingCallbackUrl", {
                            url: URL
                        }, "The callback url is being parsed");
                        currentUrl = URL || ((0, _core.browserOrNode)().isBrowser ? window.location.href : "");
                        hasCodeOrError = !!((0, _url.parse)(currentUrl).query || "").split("&").map(function(entry) {
                            return entry.split("=");
                        }).find(function(_a) {
                            var _b = (0, _tslib.__read)(_a, 1), k = _b[0];
                            return k === "code" || k === "error";
                        });
                        hasTokenOrError = !!((0, _url.parse)(currentUrl).hash || "#").substr(1).split("&").map(function(entry) {
                            return entry.split("=");
                        }).find(function(_a) {
                            var _b = (0, _tslib.__read)(_a, 1), k = _b[0];
                            return k === "access_token" || k === "error";
                        });
                        if (!(hasCodeOrError || hasTokenOrError)) return [
                            3 /*break*/ ,
                            7
                        ];
                        this._storage.setItem("amplify-redirected-from-hosted-ui", "true");
                        _b.label = 2;
                    case 2:
                        _b.trys.push([
                            2,
                            6,
                            ,
                            7
                        ]);
                        return [
                            4 /*yield*/ ,
                            this._oAuthHandler.handleAuthResponse(currentUrl)
                        ];
                    case 3:
                        _a = _b.sent(), accessToken = _a.accessToken, idToken = _a.idToken, refreshToken = _a.refreshToken, state = _a.state;
                        session = new (0, _amazonCognitoIdentityJs.CognitoUserSession)({
                            IdToken: new (0, _amazonCognitoIdentityJs.CognitoIdToken)({
                                IdToken: idToken
                            }),
                            RefreshToken: new (0, _amazonCognitoIdentityJs.CognitoRefreshToken)({
                                RefreshToken: refreshToken
                            }),
                            AccessToken: new (0, _amazonCognitoIdentityJs.CognitoAccessToken)({
                                AccessToken: accessToken
                            })
                        });
                        credentials = void 0;
                        if (!this._config.identityPoolId) return [
                            3 /*break*/ ,
                            5
                        ];
                        return [
                            4 /*yield*/ ,
                            this.Credentials.set(session, "session")
                        ];
                    case 4:
                        credentials = _b.sent();
                        logger.debug("AWS credentials", credentials);
                        _b.label = 5;
                    case 5:
                        isCustomStateIncluded = /-/.test(state);
                        currentUser = this.createCognitoUser(session.getIdToken().decodePayload()["cognito:username"]);
                        // This calls cacheTokens() in Cognito SDK
                        currentUser.setSignInUserSession(session);
                        if (window && typeof window.history !== "undefined") window.history.replaceState({}, null, this._config.oauth.redirectSignIn);
                        dispatchAuthEvent("signIn", currentUser, "A user " + currentUser.getUsername() + " has been signed in");
                        dispatchAuthEvent("cognitoHostedUI", currentUser, "A user " + currentUser.getUsername() + " has been signed in via Cognito Hosted UI");
                        if (isCustomStateIncluded) {
                            customState = state.split("-").splice(1).join("-");
                            dispatchAuthEvent("customOAuthState", (0, _core.urlSafeDecode)(customState), "State for user " + currentUser.getUsername());
                        }
                        //#endregion
                        return [
                            2 /*return*/ ,
                            credentials
                        ];
                    case 6:
                        err_3 = _b.sent();
                        logger.debug("Error in cognito hosted auth response", err_3);
                        // Just like a successful handling of `?code`, replace the window history to "dispose" of the `code`.
                        // Otherwise, reloading the page will throw errors as the `code` has already been spent.
                        if (window && typeof window.history !== "undefined") window.history.replaceState({}, null, this._config.oauth.redirectSignIn);
                        dispatchAuthEvent("signIn_failure", err_3, "The OAuth response flow failed");
                        dispatchAuthEvent("cognitoHostedUI_failure", err_3, "A failure occurred when returning to the Cognito Hosted UI");
                        dispatchAuthEvent("customState_failure", err_3, "A failure occurred when returning state");
                        return [
                            3 /*break*/ ,
                            7
                        ];
                    case 7:
                        return [
                            3 /*break*/ ,
                            9
                        ];
                    case 8:
                        this.oAuthFlowInProgress = false;
                        return [
                            7 /*endfinally*/ 
                        ];
                    case 9:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    /**
     * Compact version of credentials
     * @param {Object} credentials
     * @return {Object} - Credentials
     */ AuthClass.prototype.essentialCredentials = function(credentials) {
        return {
            accessKeyId: credentials.accessKeyId,
            sessionToken: credentials.sessionToken,
            secretAccessKey: credentials.secretAccessKey,
            identityId: credentials.identityId,
            authenticated: credentials.authenticated
        };
    };
    AuthClass.prototype.attributesToObject = function(attributes) {
        var _this = this;
        var obj = {};
        if (attributes) attributes.map(function(attribute) {
            if (attribute.Name === "email_verified" || attribute.Name === "phone_number_verified") obj[attribute.Name] = _this.isTruthyString(attribute.Value) || attribute.Value === true;
            else obj[attribute.Name] = attribute.Value;
        });
        return obj;
    };
    AuthClass.prototype.isTruthyString = function(value) {
        return typeof value.toLowerCase === "function" && value.toLowerCase() === "true";
    };
    AuthClass.prototype.createCognitoUser = function(username) {
        var userData = {
            Username: username,
            Pool: this.userPool
        };
        userData.Storage = this._storage;
        var authenticationFlowType = this._config.authenticationFlowType;
        var user = new (0, _amazonCognitoIdentityJs.CognitoUser)(userData);
        if (authenticationFlowType) user.setAuthenticationFlowType(authenticationFlowType);
        return user;
    };
    AuthClass.prototype._isValidAuthStorage = function(obj) {
        // We need to check if the obj has the functions of Storage
        return !!obj && typeof obj.getItem === "function" && typeof obj.setItem === "function" && typeof obj.removeItem === "function" && typeof obj.clear === "function";
    };
    AuthClass.prototype.noUserPoolErrorHandler = function(config) {
        if (config) {
            if (!config.userPoolId || !config.identityPoolId) return (0, _auth.AuthErrorTypes).MissingAuthConfig;
        }
        return (0, _auth.AuthErrorTypes).NoConfig;
    };
    AuthClass.prototype.rejectAuthError = function(type) {
        return Promise.reject(new (0, _errors.AuthError)(type));
    };
    AuthClass.prototype.rejectNoUserPool = function() {
        var type = this.noUserPoolErrorHandler(this._config);
        return Promise.reject(new (0, _errors.NoUserPoolError)(type));
    };
    AuthClass.prototype.rememberDevice = function() {
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            var currUser, error_2;
            return (0, _tslib.__generator)(this, function(_a) {
                switch(_a.label){
                    case 0:
                        _a.trys.push([
                            0,
                            2,
                            ,
                            3
                        ]);
                        return [
                            4 /*yield*/ ,
                            this.currentUserPoolUser()
                        ];
                    case 1:
                        currUser = _a.sent();
                        return [
                            3 /*break*/ ,
                            3
                        ];
                    case 2:
                        error_2 = _a.sent();
                        logger.debug("The user is not authenticated by the error", error_2);
                        return [
                            2 /*return*/ ,
                            Promise.reject("The user is not authenticated")
                        ];
                    case 3:
                        currUser.getCachedDeviceKeyAndPassword();
                        return [
                            2 /*return*/ ,
                            new Promise(function(res, rej) {
                                currUser.setDeviceStatusRemembered({
                                    onSuccess: function(data) {
                                        res(data);
                                    },
                                    onFailure: function(err) {
                                        if (err.code === "InvalidParameterException") rej(new (0, _errors.AuthError)((0, _auth.AuthErrorTypes).DeviceConfig));
                                        else if (err.code === "NetworkError") rej(new (0, _errors.AuthError)((0, _auth.AuthErrorTypes).NetworkError));
                                        else rej(err);
                                    }
                                });
                            })
                        ];
                }
            });
        });
    };
    AuthClass.prototype.forgetDevice = function() {
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            var currUser, error_3;
            return (0, _tslib.__generator)(this, function(_a) {
                switch(_a.label){
                    case 0:
                        _a.trys.push([
                            0,
                            2,
                            ,
                            3
                        ]);
                        return [
                            4 /*yield*/ ,
                            this.currentUserPoolUser()
                        ];
                    case 1:
                        currUser = _a.sent();
                        return [
                            3 /*break*/ ,
                            3
                        ];
                    case 2:
                        error_3 = _a.sent();
                        logger.debug("The user is not authenticated by the error", error_3);
                        return [
                            2 /*return*/ ,
                            Promise.reject("The user is not authenticated")
                        ];
                    case 3:
                        currUser.getCachedDeviceKeyAndPassword();
                        return [
                            2 /*return*/ ,
                            new Promise(function(res, rej) {
                                currUser.forgetDevice({
                                    onSuccess: function(data) {
                                        res(data);
                                    },
                                    onFailure: function(err) {
                                        if (err.code === "InvalidParameterException") rej(new (0, _errors.AuthError)((0, _auth.AuthErrorTypes).DeviceConfig));
                                        else if (err.code === "NetworkError") rej(new (0, _errors.AuthError)((0, _auth.AuthErrorTypes).NetworkError));
                                        else rej(err);
                                    }
                                });
                            })
                        ];
                }
            });
        });
    };
    AuthClass.prototype.fetchDevices = function() {
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            var currUser, error_4;
            return (0, _tslib.__generator)(this, function(_a) {
                switch(_a.label){
                    case 0:
                        _a.trys.push([
                            0,
                            2,
                            ,
                            3
                        ]);
                        return [
                            4 /*yield*/ ,
                            this.currentUserPoolUser()
                        ];
                    case 1:
                        currUser = _a.sent();
                        return [
                            3 /*break*/ ,
                            3
                        ];
                    case 2:
                        error_4 = _a.sent();
                        logger.debug("The user is not authenticated by the error", error_4);
                        throw new Error("The user is not authenticated");
                    case 3:
                        currUser.getCachedDeviceKeyAndPassword();
                        return [
                            2 /*return*/ ,
                            new Promise(function(res, rej) {
                                var cb = {
                                    onSuccess: function(data) {
                                        var deviceList = data.Devices.map(function(device) {
                                            var deviceName = device.DeviceAttributes.find(function(_a) {
                                                var Name = _a.Name;
                                                return Name === "device_name";
                                            }) || {};
                                            var deviceInfo = {
                                                id: device.DeviceKey,
                                                name: deviceName.Value
                                            };
                                            return deviceInfo;
                                        });
                                        res(deviceList);
                                    },
                                    onFailure: function(err) {
                                        if (err.code === "InvalidParameterException") rej(new (0, _errors.AuthError)((0, _auth.AuthErrorTypes).DeviceConfig));
                                        else if (err.code === "NetworkError") rej(new (0, _errors.AuthError)((0, _auth.AuthErrorTypes).NetworkError));
                                        else rej(err);
                                    }
                                };
                                currUser.listDevices(MAX_DEVICES, null, cb);
                            })
                        ];
                }
            });
        });
    };
    return AuthClass;
}();
var Auth = new AuthClass(null);
(0, _core.Amplify).register(Auth);

},{"tslib":"dQtvr","./types":"2YabP","@aws-amplify/core":"hZcAF","amazon-cognito-identity-js":"i9HVr","url":"7qjc7","./OAuth/OAuth":"6m7rL","./urlListener":"9a84K","./Errors":"QNLY3","./types/Auth":"2MR8p","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dQtvr":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2YabP":[function(require,module,exports) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _auth = require("./Auth");
parcelHelpers.exportAll(_auth, exports);

},{"./Auth":"2MR8p","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2MR8p":[function(require,module,exports) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CognitoHostedUIIdentityProvider", ()=>CognitoHostedUIIdentityProvider);
parcelHelpers.export(exports, "isFederatedSignInOptions", ()=>isFederatedSignInOptions);
parcelHelpers.export(exports, "isFederatedSignInOptionsCustom", ()=>isFederatedSignInOptionsCustom);
parcelHelpers.export(exports, "hasCustomState", ()=>hasCustomState);
parcelHelpers.export(exports, "isCognitoHostedOpts", ()=>isCognitoHostedOpts);
parcelHelpers.export(exports, "AuthErrorTypes", ()=>AuthErrorTypes);
parcelHelpers.export(exports, "isUsernamePasswordOpts", ()=>isUsernamePasswordOpts);
parcelHelpers.export(exports, "GRAPHQL_AUTH_MODE", ()=>GRAPHQL_AUTH_MODE);
var CognitoHostedUIIdentityProvider;
(function(CognitoHostedUIIdentityProvider) {
    CognitoHostedUIIdentityProvider["Cognito"] = "COGNITO";
    CognitoHostedUIIdentityProvider["Google"] = "Google";
    CognitoHostedUIIdentityProvider["Facebook"] = "Facebook";
    CognitoHostedUIIdentityProvider["Amazon"] = "LoginWithAmazon";
    CognitoHostedUIIdentityProvider["Apple"] = "SignInWithApple";
})(CognitoHostedUIIdentityProvider || (CognitoHostedUIIdentityProvider = {}));
function isFederatedSignInOptions(obj) {
    var keys = [
        "provider"
    ];
    return obj && !!keys.find(function(k) {
        return obj.hasOwnProperty(k);
    });
}
function isFederatedSignInOptionsCustom(obj) {
    var keys = [
        "customProvider"
    ];
    return obj && !!keys.find(function(k) {
        return obj.hasOwnProperty(k);
    });
}
function hasCustomState(obj) {
    var keys = [
        "customState"
    ];
    return obj && !!keys.find(function(k) {
        return obj.hasOwnProperty(k);
    });
}
function isCognitoHostedOpts(oauth) {
    return oauth.redirectSignIn !== undefined;
}
var AuthErrorTypes;
(function(AuthErrorTypes) {
    AuthErrorTypes["NoConfig"] = "noConfig";
    AuthErrorTypes["MissingAuthConfig"] = "missingAuthConfig";
    AuthErrorTypes["EmptyUsername"] = "emptyUsername";
    AuthErrorTypes["InvalidUsername"] = "invalidUsername";
    AuthErrorTypes["EmptyPassword"] = "emptyPassword";
    AuthErrorTypes["EmptyCode"] = "emptyCode";
    AuthErrorTypes["SignUpError"] = "signUpError";
    AuthErrorTypes["NoMFA"] = "noMFA";
    AuthErrorTypes["InvalidMFA"] = "invalidMFA";
    AuthErrorTypes["EmptyChallengeResponse"] = "emptyChallengeResponse";
    AuthErrorTypes["NoUserSession"] = "noUserSession";
    AuthErrorTypes["Default"] = "default";
    AuthErrorTypes["DeviceConfig"] = "deviceConfig";
    AuthErrorTypes["NetworkError"] = "networkError";
    AuthErrorTypes["AutoSignInError"] = "autoSignInError";
})(AuthErrorTypes || (AuthErrorTypes = {}));
function isUsernamePasswordOpts(obj) {
    return !!obj.username;
}
var GRAPHQL_AUTH_MODE;
(function(GRAPHQL_AUTH_MODE) {
    GRAPHQL_AUTH_MODE["API_KEY"] = "API_KEY";
    GRAPHQL_AUTH_MODE["AWS_IAM"] = "AWS_IAM";
    GRAPHQL_AUTH_MODE["OPENID_CONNECT"] = "OPENID_CONNECT";
    GRAPHQL_AUTH_MODE["AMAZON_COGNITO_USER_POOLS"] = "AMAZON_COGNITO_USER_POOLS";
    GRAPHQL_AUTH_MODE["AWS_LAMBDA"] = "AWS_LAMBDA";
})(GRAPHQL_AUTH_MODE || (GRAPHQL_AUTH_MODE = {}));

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i9HVr":[function(require,module,exports) {
/*!
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AuthenticationDetails", ()=>(0, _authenticationDetailsDefault.default));
parcelHelpers.export(exports, "AuthenticationHelper", ()=>(0, _authenticationHelperDefault.default));
parcelHelpers.export(exports, "CognitoAccessToken", ()=>(0, _cognitoAccessTokenDefault.default));
parcelHelpers.export(exports, "CognitoIdToken", ()=>(0, _cognitoIdTokenDefault.default));
parcelHelpers.export(exports, "CognitoRefreshToken", ()=>(0, _cognitoRefreshTokenDefault.default));
parcelHelpers.export(exports, "CognitoUser", ()=>(0, _cognitoUserDefault.default));
parcelHelpers.export(exports, "CognitoUserAttribute", ()=>(0, _cognitoUserAttributeDefault.default));
parcelHelpers.export(exports, "CognitoUserPool", ()=>(0, _cognitoUserPoolDefault.default));
parcelHelpers.export(exports, "CognitoUserSession", ()=>(0, _cognitoUserSessionDefault.default));
parcelHelpers.export(exports, "CookieStorage", ()=>(0, _cookieStorageDefault.default));
parcelHelpers.export(exports, "DateHelper", ()=>(0, _dateHelperDefault.default));
parcelHelpers.export(exports, "appendToCognitoUserAgent", ()=>(0, _userAgent.appendToCognitoUserAgent));
parcelHelpers.export(exports, "WordArray", ()=>(0, _wordArrayDefault.default));
var _authenticationDetails = require("./AuthenticationDetails");
var _authenticationDetailsDefault = parcelHelpers.interopDefault(_authenticationDetails);
var _authenticationHelper = require("./AuthenticationHelper");
var _authenticationHelperDefault = parcelHelpers.interopDefault(_authenticationHelper);
var _cognitoAccessToken = require("./CognitoAccessToken");
var _cognitoAccessTokenDefault = parcelHelpers.interopDefault(_cognitoAccessToken);
var _cognitoIdToken = require("./CognitoIdToken");
var _cognitoIdTokenDefault = parcelHelpers.interopDefault(_cognitoIdToken);
var _cognitoRefreshToken = require("./CognitoRefreshToken");
var _cognitoRefreshTokenDefault = parcelHelpers.interopDefault(_cognitoRefreshToken);
var _cognitoUser = require("./CognitoUser");
var _cognitoUserDefault = parcelHelpers.interopDefault(_cognitoUser);
var _cognitoUserAttribute = require("./CognitoUserAttribute");
var _cognitoUserAttributeDefault = parcelHelpers.interopDefault(_cognitoUserAttribute);
var _cognitoUserPool = require("./CognitoUserPool");
var _cognitoUserPoolDefault = parcelHelpers.interopDefault(_cognitoUserPool);
var _cognitoUserSession = require("./CognitoUserSession");
var _cognitoUserSessionDefault = parcelHelpers.interopDefault(_cognitoUserSession);
var _cookieStorage = require("./CookieStorage");
var _cookieStorageDefault = parcelHelpers.interopDefault(_cookieStorage);
var _dateHelper = require("./DateHelper");
var _dateHelperDefault = parcelHelpers.interopDefault(_dateHelper);
var _userAgent = require("./UserAgent");
var _wordArray = require("./utils/WordArray");
var _wordArrayDefault = parcelHelpers.interopDefault(_wordArray);

},{"./AuthenticationDetails":"3iRed","./AuthenticationHelper":"9Wq2x","./CognitoAccessToken":"dojqu","./CognitoIdToken":"7Exnm","./CognitoRefreshToken":"3nCMJ","./CognitoUser":"cbaip","./CognitoUserAttribute":"jk8tg","./CognitoUserPool":"8MOGu","./CognitoUserSession":"1kQ4I","./CookieStorage":"7YjE8","./DateHelper":"93GWr","./UserAgent":"a9rVz","./utils/WordArray":"eRhxc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3iRed":[function(require,module,exports) {
/*!
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */ /** @class */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>AuthenticationDetails);
var AuthenticationDetails = /*#__PURE__*/ function() {
    /**
   * Constructs a new AuthenticationDetails object
   * @param {object=} data Creation options.
   * @param {string} data.Username User being authenticated.
   * @param {string} data.Password Plain-text password to authenticate with.
   * @param {(AttributeArg[])?} data.ValidationData Application extra metadata.
   * @param {(AttributeArg[])?} data.AuthParamaters Authentication paramaters for custom auth.
   */ function AuthenticationDetails(data) {
        var _ref = data || {}, ValidationData = _ref.ValidationData, Username = _ref.Username, Password = _ref.Password, AuthParameters = _ref.AuthParameters, ClientMetadata = _ref.ClientMetadata;
        this.validationData = ValidationData || {};
        this.authParameters = AuthParameters || {};
        this.clientMetadata = ClientMetadata || {};
        this.username = Username;
        this.password = Password;
    }
    /**
   * @returns {string} the record's username
   */ var _proto = AuthenticationDetails.prototype;
    _proto.getUsername = function getUsername() {
        return this.username;
    } /**
   * @returns {string} the record's password
   */ ;
    _proto.getPassword = function getPassword() {
        return this.password;
    } /**
   * @returns {Array} the record's validationData
   */ ;
    _proto.getValidationData = function getValidationData() {
        return this.validationData;
    } /**
   * @returns {Array} the record's authParameters
   */ ;
    _proto.getAuthParameters = function getAuthParameters() {
        return this.authParameters;
    } /**
   * @returns {ClientMetadata} the clientMetadata for a Lambda trigger
   */ ;
    _proto.getClientMetadata = function getClientMetadata() {
        return this.clientMetadata;
    };
    return AuthenticationDetails;
}();

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9Wq2x":[function(require,module,exports) {
/*!
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>AuthenticationHelper);
var _buffer = require("buffer");
var _wordArray = require("./utils/WordArray");
var _wordArrayDefault = parcelHelpers.interopDefault(_wordArray);
var _sha256Js = require("@aws-crypto/sha256-js");
var _bigInteger = require("./BigInteger");
var _bigIntegerDefault = parcelHelpers.interopDefault(_bigInteger);
/**
 * Returns a Buffer with a sequence of random nBytes
 *
 * @param {number} nBytes
 * @returns {Buffer} fixed-length sequence of random bytes
 */ function randomBytes(nBytes) {
    return (0, _buffer.Buffer).from(new (0, _wordArrayDefault.default)().random(nBytes).toString(), "hex");
}
/**
 * Tests if a hex string has it most significant bit set (case-insensitive regex)
 */ var HEX_MSB_REGEX = /^[89a-f]/i;
var initN = "FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6BF12FFA06D98A0864D87602733EC86A64521F2B18177B200CBBE117577A615D6C770988C0BAD946E208E24FA074E5AB3143DB5BFCE0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF";
var newPasswordRequiredChallengeUserAttributePrefix = "userAttributes.";
/** @class */ var AuthenticationHelper = /*#__PURE__*/ function() {
    /**
   * Constructs a new AuthenticationHelper object
   * @param {string} PoolName Cognito user pool name.
   */ function AuthenticationHelper(PoolName) {
        this.N = new (0, _bigIntegerDefault.default)(initN, 16);
        this.g = new (0, _bigIntegerDefault.default)("2", 16);
        this.k = new (0, _bigIntegerDefault.default)(this.hexHash("" + this.padHex(this.N) + this.padHex(this.g)), 16);
        this.smallAValue = this.generateRandomSmallA();
        this.getLargeAValue(function() {});
        this.infoBits = (0, _buffer.Buffer).from("Caldera Derived Key", "utf8");
        this.poolName = PoolName;
    }
    /**
   * @returns {BigInteger} small A, a random number
   */ var _proto = AuthenticationHelper.prototype;
    _proto.getSmallAValue = function getSmallAValue() {
        return this.smallAValue;
    } /**
   * @param {nodeCallback<BigInteger>} callback Called with (err, largeAValue)
   * @returns {void}
   */ ;
    _proto.getLargeAValue = function getLargeAValue(callback) {
        var _this = this;
        if (this.largeAValue) callback(null, this.largeAValue);
        else this.calculateA(this.smallAValue, function(err, largeAValue) {
            if (err) callback(err, null);
            _this.largeAValue = largeAValue;
            callback(null, _this.largeAValue);
        });
    } /**
   * helper function to generate a random big integer
   * @returns {BigInteger} a random value.
   * @private
   */ ;
    _proto.generateRandomSmallA = function generateRandomSmallA() {
        // This will be interpreted as a postive 128-bit integer
        var hexRandom = randomBytes(128).toString("hex");
        var randomBigInt = new (0, _bigIntegerDefault.default)(hexRandom, 16);
        // There is no need to do randomBigInt.mod(this.N - 1) as N (3072-bit) is > 128 bytes (1024-bit)
        return randomBigInt;
    } /**
   * helper function to generate a random string
   * @returns {string} a random value.
   * @private
   */ ;
    _proto.generateRandomString = function generateRandomString() {
        return randomBytes(40).toString("base64");
    } /**
   * @returns {string} Generated random value included in password hash.
   */ ;
    _proto.getRandomPassword = function getRandomPassword() {
        return this.randomPassword;
    } /**
   * @returns {string} Generated random value included in devices hash.
   */ ;
    _proto.getSaltDevices = function getSaltDevices() {
        return this.SaltToHashDevices;
    } /**
   * @returns {string} Value used to verify devices.
   */ ;
    _proto.getVerifierDevices = function getVerifierDevices() {
        return this.verifierDevices;
    } /**
   * Generate salts and compute verifier.
   * @param {string} deviceGroupKey Devices to generate verifier for.
   * @param {string} username User to generate verifier for.
   * @param {nodeCallback<null>} callback Called with (err, null)
   * @returns {void}
   */ ;
    _proto.generateHashDevice = function generateHashDevice(deviceGroupKey, username, callback) {
        var _this2 = this;
        this.randomPassword = this.generateRandomString();
        var combinedString = "" + deviceGroupKey + username + ":" + this.randomPassword;
        var hashedString = this.hash(combinedString);
        var hexRandom = randomBytes(16).toString("hex");
        // The random hex will be unambiguously represented as a postive integer
        this.SaltToHashDevices = this.padHex(new (0, _bigIntegerDefault.default)(hexRandom, 16));
        this.g.modPow(new (0, _bigIntegerDefault.default)(this.hexHash(this.SaltToHashDevices + hashedString), 16), this.N, function(err, verifierDevicesNotPadded) {
            if (err) callback(err, null);
            _this2.verifierDevices = _this2.padHex(verifierDevicesNotPadded);
            callback(null, null);
        });
    } /**
   * Calculate the client's public value A = g^a%N
   * with the generated random number a
   * @param {BigInteger} a Randomly generated small A.
   * @param {nodeCallback<BigInteger>} callback Called with (err, largeAValue)
   * @returns {void}
   * @private
   */ ;
    _proto.calculateA = function calculateA(a, callback) {
        var _this3 = this;
        this.g.modPow(a, this.N, function(err, A) {
            if (err) callback(err, null);
            if (A.mod(_this3.N).equals((0, _bigIntegerDefault.default).ZERO)) callback(new Error("Illegal paramater. A mod N cannot be 0."), null);
            callback(null, A);
        });
    } /**
   * Calculate the client's value U which is the hash of A and B
   * @param {BigInteger} A Large A value.
   * @param {BigInteger} B Server B value.
   * @returns {BigInteger} Computed U value.
   * @private
   */ ;
    _proto.calculateU = function calculateU(A, B) {
        this.UHexHash = this.hexHash(this.padHex(A) + this.padHex(B));
        var finalU = new (0, _bigIntegerDefault.default)(this.UHexHash, 16);
        return finalU;
    } /**
   * Calculate a hash from a bitArray
   * @param {Buffer} buf Value to hash.
   * @returns {String} Hex-encoded hash.
   * @private
   */ ;
    _proto.hash = function hash(buf) {
        var awsCryptoHash = new (0, _sha256Js.Sha256)();
        awsCryptoHash.update(buf);
        var resultFromAWSCrypto = awsCryptoHash.digestSync();
        var hashHex = (0, _buffer.Buffer).from(resultFromAWSCrypto).toString("hex");
        return new Array(64 - hashHex.length).join("0") + hashHex;
    } /**
   * Calculate a hash from a hex string
   * @param {String} hexStr Value to hash.
   * @returns {String} Hex-encoded hash.
   * @private
   */ ;
    _proto.hexHash = function hexHash(hexStr) {
        return this.hash((0, _buffer.Buffer).from(hexStr, "hex"));
    } /**
   * Standard hkdf algorithm
   * @param {Buffer} ikm Input key material.
   * @param {Buffer} salt Salt value.
   * @returns {Buffer} Strong key material.
   * @private
   */ ;
    _proto.computehkdf = function computehkdf(ikm, salt) {
        var infoBitsBuffer = (0, _buffer.Buffer).concat([
            this.infoBits,
            (0, _buffer.Buffer).from(String.fromCharCode(1), "utf8")
        ]);
        var awsCryptoHash = new (0, _sha256Js.Sha256)(salt);
        awsCryptoHash.update(ikm);
        var resultFromAWSCryptoPrk = awsCryptoHash.digestSync();
        var awsCryptoHashHmac = new (0, _sha256Js.Sha256)(resultFromAWSCryptoPrk);
        awsCryptoHashHmac.update(infoBitsBuffer);
        var resultFromAWSCryptoHmac = awsCryptoHashHmac.digestSync();
        var hashHexFromAWSCrypto = resultFromAWSCryptoHmac;
        var currentHex = hashHexFromAWSCrypto.slice(0, 16);
        return currentHex;
    } /**
   * Calculates the final hkdf based on computed S value, and computed U value and the key
   * @param {String} username Username.
   * @param {String} password Password.
   * @param {BigInteger} serverBValue Server B value.
   * @param {BigInteger} salt Generated salt.
   * @param {nodeCallback<Buffer>} callback Called with (err, hkdfValue)
   * @returns {void}
   */ ;
    _proto.getPasswordAuthenticationKey = function getPasswordAuthenticationKey(username, password, serverBValue, salt, callback) {
        var _this4 = this;
        if (serverBValue.mod(this.N).equals((0, _bigIntegerDefault.default).ZERO)) throw new Error("B cannot be zero.");
        this.UValue = this.calculateU(this.largeAValue, serverBValue);
        if (this.UValue.equals((0, _bigIntegerDefault.default).ZERO)) throw new Error("U cannot be zero.");
        var usernamePassword = "" + this.poolName + username + ":" + password;
        var usernamePasswordHash = this.hash(usernamePassword);
        var xValue = new (0, _bigIntegerDefault.default)(this.hexHash(this.padHex(salt) + usernamePasswordHash), 16);
        this.calculateS(xValue, serverBValue, function(err, sValue) {
            if (err) callback(err, null);
            var hkdf = _this4.computehkdf((0, _buffer.Buffer).from(_this4.padHex(sValue), "hex"), (0, _buffer.Buffer).from(_this4.padHex(_this4.UValue), "hex"));
            callback(null, hkdf);
        });
    } /**
   * Calculates the S value used in getPasswordAuthenticationKey
   * @param {BigInteger} xValue Salted password hash value.
   * @param {BigInteger} serverBValue Server B value.
   * @param {nodeCallback<string>} callback Called on success or error.
   * @returns {void}
   */ ;
    _proto.calculateS = function calculateS(xValue, serverBValue, callback) {
        var _this5 = this;
        this.g.modPow(xValue, this.N, function(err, gModPowXN) {
            if (err) callback(err, null);
            var intValue2 = serverBValue.subtract(_this5.k.multiply(gModPowXN));
            intValue2.modPow(_this5.smallAValue.add(_this5.UValue.multiply(xValue)), _this5.N, function(err2, result) {
                if (err2) callback(err2, null);
                callback(null, result.mod(_this5.N));
            });
        });
    } /**
   * Return constant newPasswordRequiredChallengeUserAttributePrefix
   * @return {newPasswordRequiredChallengeUserAttributePrefix} constant prefix value
   */ ;
    _proto.getNewPasswordRequiredChallengeUserAttributePrefix = function getNewPasswordRequiredChallengeUserAttributePrefix() {
        return newPasswordRequiredChallengeUserAttributePrefix;
    } /**
   * Returns an unambiguous, even-length hex string of the two's complement encoding of an integer.
   *
   * It is compatible with the hex encoding of Java's BigInteger's toByteArray(), wich returns a
   * byte array containing the two's-complement representation of a BigInteger. The array contains
   * the minimum number of bytes required to represent the BigInteger, including at least one sign bit.
   *
   * Examples showing how ambiguity is avoided by left padding with:
   * 	"00" (for positive values where the most-significant-bit is set)
   *  "FF" (for negative values where the most-significant-bit is set)
   *
   * padHex(bigInteger.fromInt(-236))  === "FF14"
   * padHex(bigInteger.fromInt(20))    === "14"
   *
   * padHex(bigInteger.fromInt(-200))  === "FF38"
   * padHex(bigInteger.fromInt(56))    === "38"
   *
   * padHex(bigInteger.fromInt(-20))   === "EC"
   * padHex(bigInteger.fromInt(236))   === "00EC"
   *
   * padHex(bigInteger.fromInt(-56))   === "C8"
   * padHex(bigInteger.fromInt(200))   === "00C8"
   *
   * @param {BigInteger} bigInt Number to encode.
   * @returns {String} even-length hex string of the two's complement encoding.
   */ ;
    _proto.padHex = function padHex(bigInt) {
        if (!(bigInt instanceof (0, _bigIntegerDefault.default))) throw new Error("Not a BigInteger");
        var isNegative = bigInt.compareTo((0, _bigIntegerDefault.default).ZERO) < 0;
        /* Get a hex string for abs(bigInt) */ var hexStr = bigInt.abs().toString(16);
        /* Pad hex to even length if needed */ hexStr = hexStr.length % 2 !== 0 ? "0" + hexStr : hexStr;
        /* Prepend "00" if the most significant bit is set */ hexStr = HEX_MSB_REGEX.test(hexStr) ? "00" + hexStr : hexStr;
        if (isNegative) {
            /* Flip the bits of the representation */ var invertedNibbles = hexStr.split("").map(function(x) {
                var invertedNibble = ~parseInt(x, 16) & 0xf;
                return "0123456789ABCDEF".charAt(invertedNibble);
            }).join("");
            /* After flipping the bits, add one to get the 2's complement representation */ var flippedBitsBI = new (0, _bigIntegerDefault.default)(invertedNibbles, 16).add((0, _bigIntegerDefault.default).ONE);
            hexStr = flippedBitsBI.toString(16);
            /*
      For hex strings starting with 'FF8', 'FF' can be dropped, e.g. 0xFFFF80=0xFF80=0x80=-128
      		Any sequence of '1' bits on the left can always be substituted with a single '1' bit
      without changing the represented value.
      		This only happens in the case when the input is 80...00
      */ if (hexStr.toUpperCase().startsWith("FF8")) hexStr = hexStr.substring(2);
        }
        return hexStr;
    };
    return AuthenticationHelper;
}();

},{"buffer":"fCgem","./utils/WordArray":"eRhxc","@aws-crypto/sha256-js":"fXmvu","./BigInteger":"iUmkO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eRhxc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>WordArray);
var _cryptoSecureRandomInt = require("./cryptoSecureRandomInt");
var _cryptoSecureRandomIntDefault = parcelHelpers.interopDefault(_cryptoSecureRandomInt);
/**
 * Hex encoding strategy.
 * Converts a word array to a hex string.
 * @param {WordArray} wordArray The word array.
 * @return {string} The hex string.
 * @static
 */ function hexStringify(wordArray) {
    // Shortcuts
    var words = wordArray.words;
    var sigBytes = wordArray.sigBytes;
    // Convert
    var hexChars = [];
    for(var i = 0; i < sigBytes; i++){
        var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
        hexChars.push((bite >>> 4).toString(16));
        hexChars.push((bite & 0x0f).toString(16));
    }
    return hexChars.join("");
}
var WordArray = /*#__PURE__*/ function() {
    function WordArray(words, sigBytes) {
        words = this.words = words || [];
        if (sigBytes != undefined) this.sigBytes = sigBytes;
        else this.sigBytes = words.length * 4;
    }
    var _proto = WordArray.prototype;
    _proto.random = function random(nBytes) {
        var words = [];
        for(var i = 0; i < nBytes; i += 4)words.push((0, _cryptoSecureRandomIntDefault.default)());
        return new WordArray(words, nBytes);
    };
    _proto.toString = function toString() {
        return hexStringify(this);
    };
    return WordArray;
}();

},{"./cryptoSecureRandomInt":"dkf5t","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dkf5t":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var global = arguments[3];
var crypto;
// Native crypto from window (Browser)
if (typeof window !== "undefined" && window.crypto) crypto = window.crypto;
// Native (experimental IE 11) crypto from window (Browser)
if (!crypto && typeof window !== "undefined" && window.msCrypto) crypto = window.msCrypto;
// Native crypto from global (NodeJS)
if (!crypto && typeof global !== "undefined" && global.crypto) crypto = global.crypto;
// Native crypto import via require (NodeJS)
if (!crypto && true) try {
    crypto = require("28420cf94f7795bc");
} catch (err) {}
function cryptoSecureRandomInt() {
    if (crypto) {
        // Use getRandomValues method (Browser)
        if (typeof crypto.getRandomValues === "function") try {
            return crypto.getRandomValues(new Uint32Array(1))[0];
        } catch (err) {}
        // Use randomBytes method (NodeJS)
        if (typeof crypto.randomBytes === "function") try {
            return crypto.randomBytes(4).readInt32LE();
        } catch (err) {}
    }
    throw new Error("Native crypto module could not be used to get secure random number.");
}
exports.default = cryptoSecureRandomInt;

},{"28420cf94f7795bc":"jhUEF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jhUEF":[function(require,module,exports) {
"use strict";

},{}],"iUmkO":[function(require,module,exports) {
// A small implementation of BigInteger based on http://www-cs-students.stanford.edu/~tjw/jsbn/
//
// All public methods have been removed except the following:
//   new BigInteger(a, b) (only radix 2, 4, 8, 16 and 32 supported)
//   toString (only radix 2, 4, 8, 16 and 32 supported)
//   negate
//   abs
//   compareTo
//   bitLength
//   mod
//   equals
//   add
//   subtract
//   multiply
//   divide
//   modPow
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = BigInteger;
/*
 * Copyright (c) 2003-2005  Tom Wu
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY
 * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
 *
 * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
 * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
 * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
 * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
 * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * In addition, the following condition applies:
 *
 * All redistributions must retain an intact copy of this copyright notice
 * and disclaimer.
 */ // (public) Constructor
function BigInteger(a, b) {
    if (a != null) this.fromString(a, b);
}
// return new, unset BigInteger
function nbi() {
    return new BigInteger(null);
}
// Bits per digit
var dbits;
// JavaScript engine analysis
var canary = 0xdeadbeefcafe;
var j_lm = (canary & 0xffffff) == 0xefcafe;
// am: Compute w_j += (x*this_i), propagate carries,
// c is initial carry, returns final carry.
// c < 3*dvalue, x < 2*dvalue, this_i < dvalue
// We need to select the fastest one that works in this environment.
// am1: use a single mult and divide to get the high bits,
// max digit bits should be 26 because
// max internal value = 2*dvalue^2-2*dvalue (< 2^53)
function am1(i, x, w, j, c, n) {
    while(--n >= 0){
        var v = x * this[i++] + w[j] + c;
        c = Math.floor(v / 0x4000000);
        w[j++] = v & 0x3ffffff;
    }
    return c;
}
// am2 avoids a big mult-and-extract completely.
// Max digit bits should be <= 30 because we do bitwise ops
// on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
function am2(i, x, w, j, c, n) {
    var xl = x & 0x7fff, xh = x >> 15;
    while(--n >= 0){
        var l = this[i] & 0x7fff;
        var h = this[i++] >> 15;
        var m = xh * l + h * xl;
        l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff);
        c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);
        w[j++] = l & 0x3fffffff;
    }
    return c;
}
// Alternately, set max digit bits to 28 since some
// browsers slow down when dealing with 32-bit numbers.
function am3(i, x, w, j, c, n) {
    var xl = x & 0x3fff, xh = x >> 14;
    while(--n >= 0){
        var l = this[i] & 0x3fff;
        var h = this[i++] >> 14;
        var m = xh * l + h * xl;
        l = xl * l + ((m & 0x3fff) << 14) + w[j] + c;
        c = (l >> 28) + (m >> 14) + xh * h;
        w[j++] = l & 0xfffffff;
    }
    return c;
}
var inBrowser = typeof navigator !== "undefined";
if (inBrowser && j_lm && navigator.appName == "Microsoft Internet Explorer") {
    BigInteger.prototype.am = am2;
    dbits = 30;
} else if (inBrowser && j_lm && navigator.appName != "Netscape") {
    BigInteger.prototype.am = am1;
    dbits = 26;
} else {
    // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
}
BigInteger.prototype.DB = dbits;
BigInteger.prototype.DM = (1 << dbits) - 1;
BigInteger.prototype.DV = 1 << dbits;
var BI_FP = 52;
BigInteger.prototype.FV = Math.pow(2, BI_FP);
BigInteger.prototype.F1 = BI_FP - dbits;
BigInteger.prototype.F2 = 2 * dbits - BI_FP;
// Digit conversions
var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
var BI_RC = new Array();
var rr, vv;
rr = "0".charCodeAt(0);
for(vv = 0; vv <= 9; ++vv)BI_RC[rr++] = vv;
rr = "a".charCodeAt(0);
for(vv = 10; vv < 36; ++vv)BI_RC[rr++] = vv;
rr = "A".charCodeAt(0);
for(vv = 10; vv < 36; ++vv)BI_RC[rr++] = vv;
function int2char(n) {
    return BI_RM.charAt(n);
}
function intAt(s, i) {
    var c = BI_RC[s.charCodeAt(i)];
    return c == null ? -1 : c;
}
// (protected) copy this to r
function bnpCopyTo(r) {
    for(var i = this.t - 1; i >= 0; --i)r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
}
// (protected) set from integer value x, -DV <= x < DV
function bnpFromInt(x) {
    this.t = 1;
    this.s = x < 0 ? -1 : 0;
    if (x > 0) this[0] = x;
    else if (x < -1) this[0] = x + this.DV;
    else this.t = 0;
}
// return bigint initialized to value
function nbv(i) {
    var r = nbi();
    r.fromInt(i);
    return r;
}
// (protected) set from string and radix
function bnpFromString(s, b) {
    var k;
    if (b == 16) k = 4;
    else if (b == 8) k = 3;
    else if (b == 2) k = 1;
    else if (b == 32) k = 5;
    else if (b == 4) k = 2;
    else throw new Error("Only radix 2, 4, 8, 16, 32 are supported");
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0){
        var x = intAt(s, i);
        if (x < 0) {
            if (s.charAt(i) == "-") mi = true;
            continue;
        }
        mi = false;
        if (sh == 0) this[this.t++] = x;
        else if (sh + k > this.DB) {
            this[this.t - 1] |= (x & (1 << this.DB - sh) - 1) << sh;
            this[this.t++] = x >> this.DB - sh;
        } else this[this.t - 1] |= x << sh;
        sh += k;
        if (sh >= this.DB) sh -= this.DB;
    }
    this.clamp();
    if (mi) BigInteger.ZERO.subTo(this, this);
}
// (protected) clamp off excess high words
function bnpClamp() {
    var c = this.s & this.DM;
    while(this.t > 0 && this[this.t - 1] == c)--this.t;
}
// (public) return string representation in given radix
function bnToString(b) {
    if (this.s < 0) return "-" + this.negate().toString(b);
    var k;
    if (b == 16) k = 4;
    else if (b == 8) k = 3;
    else if (b == 2) k = 1;
    else if (b == 32) k = 5;
    else if (b == 4) k = 2;
    else throw new Error("Only radix 2, 4, 8, 16, 32 are supported");
    var km = (1 << k) - 1, d, m = false, r = "", i = this.t;
    var p = this.DB - i * this.DB % k;
    if (i-- > 0) {
        if (p < this.DB && (d = this[i] >> p) > 0) {
            m = true;
            r = int2char(d);
        }
        while(i >= 0){
            if (p < k) {
                d = (this[i] & (1 << p) - 1) << k - p;
                d |= this[--i] >> (p += this.DB - k);
            } else {
                d = this[i] >> (p -= k) & km;
                if (p <= 0) {
                    p += this.DB;
                    --i;
                }
            }
            if (d > 0) m = true;
            if (m) r += int2char(d);
        }
    }
    return m ? r : "0";
}
// (public) -this
function bnNegate() {
    var r = nbi();
    BigInteger.ZERO.subTo(this, r);
    return r;
}
// (public) |this|
function bnAbs() {
    return this.s < 0 ? this.negate() : this;
}
// (public) return + if this > a, - if this < a, 0 if equal
function bnCompareTo(a) {
    var r = this.s - a.s;
    if (r != 0) return r;
    var i = this.t;
    r = i - a.t;
    if (r != 0) return this.s < 0 ? -r : r;
    while(--i >= 0)if ((r = this[i] - a[i]) != 0) return r;
    return 0;
}
// returns bit length of the integer x
function nbits(x) {
    var r = 1, t;
    if ((t = x >>> 16) != 0) {
        x = t;
        r += 16;
    }
    if ((t = x >> 8) != 0) {
        x = t;
        r += 8;
    }
    if ((t = x >> 4) != 0) {
        x = t;
        r += 4;
    }
    if ((t = x >> 2) != 0) {
        x = t;
        r += 2;
    }
    if ((t = x >> 1) != 0) {
        x = t;
        r += 1;
    }
    return r;
}
// (public) return the number of bits in "this"
function bnBitLength() {
    if (this.t <= 0) return 0;
    return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ this.s & this.DM);
}
// (protected) r = this << n*DB
function bnpDLShiftTo(n, r) {
    var i;
    for(i = this.t - 1; i >= 0; --i)r[i + n] = this[i];
    for(i = n - 1; i >= 0; --i)r[i] = 0;
    r.t = this.t + n;
    r.s = this.s;
}
// (protected) r = this >> n*DB
function bnpDRShiftTo(n, r) {
    for(var i = n; i < this.t; ++i)r[i - n] = this[i];
    r.t = Math.max(this.t - n, 0);
    r.s = this.s;
}
// (protected) r = this << n
function bnpLShiftTo(n, r) {
    var bs = n % this.DB;
    var cbs = this.DB - bs;
    var bm = (1 << cbs) - 1;
    var ds = Math.floor(n / this.DB), c = this.s << bs & this.DM, i;
    for(i = this.t - 1; i >= 0; --i){
        r[i + ds + 1] = this[i] >> cbs | c;
        c = (this[i] & bm) << bs;
    }
    for(i = ds - 1; i >= 0; --i)r[i] = 0;
    r[ds] = c;
    r.t = this.t + ds + 1;
    r.s = this.s;
    r.clamp();
}
// (protected) r = this >> n
function bnpRShiftTo(n, r) {
    r.s = this.s;
    var ds = Math.floor(n / this.DB);
    if (ds >= this.t) {
        r.t = 0;
        return;
    }
    var bs = n % this.DB;
    var cbs = this.DB - bs;
    var bm = (1 << bs) - 1;
    r[0] = this[ds] >> bs;
    for(var i = ds + 1; i < this.t; ++i){
        r[i - ds - 1] |= (this[i] & bm) << cbs;
        r[i - ds] = this[i] >> bs;
    }
    if (bs > 0) r[this.t - ds - 1] |= (this.s & bm) << cbs;
    r.t = this.t - ds;
    r.clamp();
}
// (protected) r = this - a
function bnpSubTo(a, r) {
    var i = 0, c = 0, m = Math.min(a.t, this.t);
    while(i < m){
        c += this[i] - a[i];
        r[i++] = c & this.DM;
        c >>= this.DB;
    }
    if (a.t < this.t) {
        c -= a.s;
        while(i < this.t){
            c += this[i];
            r[i++] = c & this.DM;
            c >>= this.DB;
        }
        c += this.s;
    } else {
        c += this.s;
        while(i < a.t){
            c -= a[i];
            r[i++] = c & this.DM;
            c >>= this.DB;
        }
        c -= a.s;
    }
    r.s = c < 0 ? -1 : 0;
    if (c < -1) r[i++] = this.DV + c;
    else if (c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
}
// (protected) r = this * a, r != this,a (HAC 14.12)
// "this" should be the larger one if appropriate.
function bnpMultiplyTo(a, r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i + y.t;
    while(--i >= 0)r[i] = 0;
    for(i = 0; i < y.t; ++i)r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);
    r.s = 0;
    r.clamp();
    if (this.s != a.s) BigInteger.ZERO.subTo(r, r);
}
// (protected) r = this^2, r != this (HAC 14.16)
function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2 * x.t;
    while(--i >= 0)r[i] = 0;
    for(i = 0; i < x.t - 1; ++i){
        var c = x.am(i, x[i], r, 2 * i, 0, 1);
        if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {
            r[i + x.t] -= x.DV;
            r[i + x.t + 1] = 1;
        }
    }
    if (r.t > 0) r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);
    r.s = 0;
    r.clamp();
}
// (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
// r != q, this != m.  q or r may be null.
function bnpDivRemTo(m, q, r) {
    var pm = m.abs();
    if (pm.t <= 0) return;
    var pt = this.abs();
    if (pt.t < pm.t) {
        if (q != null) q.fromInt(0);
        if (r != null) this.copyTo(r);
        return;
    }
    if (r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB - nbits(pm[pm.t - 1]);
    // normalize modulus
    if (nsh > 0) {
        pm.lShiftTo(nsh, y);
        pt.lShiftTo(nsh, r);
    } else {
        pm.copyTo(y);
        pt.copyTo(r);
    }
    var ys = y.t;
    var y0 = y[ys - 1];
    if (y0 == 0) return;
    var yt = y0 * (1 << this.F1) + (ys > 1 ? y[ys - 2] >> this.F2 : 0);
    var d1 = this.FV / yt, d2 = (1 << this.F1) / yt, e = 1 << this.F2;
    var i = r.t, j = i - ys, t = q == null ? nbi() : q;
    y.dlShiftTo(j, t);
    if (r.compareTo(t) >= 0) {
        r[r.t++] = 1;
        r.subTo(t, r);
    }
    BigInteger.ONE.dlShiftTo(ys, t);
    t.subTo(y, y);
    // "negative" y so we can replace sub with am later
    while(y.t < ys)y[y.t++] = 0;
    while(--j >= 0){
        // Estimate quotient digit
        var qd = r[--i] == y0 ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);
        if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) {
            // Try it out
            y.dlShiftTo(j, t);
            r.subTo(t, r);
            while(r[i] < --qd)r.subTo(t, r);
        }
    }
    if (q != null) {
        r.drShiftTo(ys, q);
        if (ts != ms) BigInteger.ZERO.subTo(q, q);
    }
    r.t = ys;
    r.clamp();
    if (nsh > 0) r.rShiftTo(nsh, r);
    // Denormalize remainder
    if (ts < 0) BigInteger.ZERO.subTo(r, r);
}
// (public) this mod a
function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a, null, r);
    if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r);
    return r;
}
// (protected) return "-1/this % 2^DB"; useful for Mont. reduction
// justification:
//         xy == 1 (mod m)
//         xy =  1+km
//   xy(2-xy) = (1+km)(1-km)
// x[y(2-xy)] = 1-k^2m^2
// x[y(2-xy)] == 1 (mod m^2)
// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
// JS multiply "overflows" differently from C/C++, so care is needed here.
function bnpInvDigit() {
    if (this.t < 1) return 0;
    var x = this[0];
    if ((x & 1) == 0) return 0;
    var y = x & 3;
    // y == 1/x mod 2^2
    y = y * (2 - (x & 0xf) * y) & 0xf;
    // y == 1/x mod 2^4
    y = y * (2 - (x & 0xff) * y) & 0xff;
    // y == 1/x mod 2^8
    y = y * (2 - ((x & 0xffff) * y & 0xffff)) & 0xffff;
    // y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = y * (2 - x * y % this.DV) % this.DV;
    // y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return y > 0 ? this.DV - y : -y;
}
function bnEquals(a) {
    return this.compareTo(a) == 0;
}
// (protected) r = this + a
function bnpAddTo(a, r) {
    var i = 0, c = 0, m = Math.min(a.t, this.t);
    while(i < m){
        c += this[i] + a[i];
        r[i++] = c & this.DM;
        c >>= this.DB;
    }
    if (a.t < this.t) {
        c += a.s;
        while(i < this.t){
            c += this[i];
            r[i++] = c & this.DM;
            c >>= this.DB;
        }
        c += this.s;
    } else {
        c += this.s;
        while(i < a.t){
            c += a[i];
            r[i++] = c & this.DM;
            c >>= this.DB;
        }
        c += a.s;
    }
    r.s = c < 0 ? -1 : 0;
    if (c > 0) r[i++] = c;
    else if (c < -1) r[i++] = this.DV + c;
    r.t = i;
    r.clamp();
}
// (public) this + a
function bnAdd(a) {
    var r = nbi();
    this.addTo(a, r);
    return r;
}
// (public) this - a
function bnSubtract(a) {
    var r = nbi();
    this.subTo(a, r);
    return r;
}
// (public) this * a
function bnMultiply(a) {
    var r = nbi();
    this.multiplyTo(a, r);
    return r;
}
// (public) this / a
function bnDivide(a) {
    var r = nbi();
    this.divRemTo(a, r, null);
    return r;
}
// Montgomery reduction
function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp & 0x7fff;
    this.mph = this.mp >> 15;
    this.um = (1 << m.DB - 15) - 1;
    this.mt2 = 2 * m.t;
}
// xR mod m
function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t, r);
    r.divRemTo(this.m, null, r);
    if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r);
    return r;
}
// x/R mod m
function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
}
// x = x/R mod m (HAC 14.32)
function montReduce(x) {
    while(x.t <= this.mt2)// pad x so am has enough room later
    x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i){
        // faster way of calculating u0 = x[i]*mp mod DV
        var j = x[i] & 0x7fff;
        var u0 = j * this.mpl + ((j * this.mph + (x[i] >> 15) * this.mpl & this.um) << 15) & x.DM;
        // use am to combine the multiply-shift-add into one call
        j = i + this.m.t;
        x[j] += this.m.am(0, u0, x, i, 0, this.m.t);
        // propagate carry
        while(x[j] >= x.DV){
            x[j] -= x.DV;
            x[++j]++;
        }
    }
    x.clamp();
    x.drShiftTo(this.m.t, x);
    if (x.compareTo(this.m) >= 0) x.subTo(this.m, x);
}
// r = "x^2/R mod m"; x != r
function montSqrTo(x, r) {
    x.squareTo(r);
    this.reduce(r);
}
// r = "xy/R mod m"; x,y != r
function montMulTo(x, y, r) {
    x.multiplyTo(y, r);
    this.reduce(r);
}
Montgomery.prototype.convert = montConvert;
Montgomery.prototype.revert = montRevert;
Montgomery.prototype.reduce = montReduce;
Montgomery.prototype.mulTo = montMulTo;
Montgomery.prototype.sqrTo = montSqrTo;
// (public) this^e % m (HAC 14.85)
function bnModPow(e, m, callback) {
    var i = e.bitLength(), k, r = nbv(1), z = new Montgomery(m);
    if (i <= 0) return r;
    else if (i < 18) k = 1;
    else if (i < 48) k = 3;
    else if (i < 144) k = 4;
    else if (i < 768) k = 5;
    else k = 6;
    // precomputation
    var g = new Array(), n = 3, k1 = k - 1, km = (1 << k) - 1;
    g[1] = z.convert(this);
    if (k > 1) {
        var g2 = nbi();
        z.sqrTo(g[1], g2);
        while(n <= km){
            g[n] = nbi();
            z.mulTo(g2, g[n - 2], g[n]);
            n += 2;
        }
    }
    var j = e.t - 1, w, is1 = true, r2 = nbi(), t;
    i = nbits(e[j]) - 1;
    while(j >= 0){
        if (i >= k1) w = e[j] >> i - k1 & km;
        else {
            w = (e[j] & (1 << i + 1) - 1) << k1 - i;
            if (j > 0) w |= e[j - 1] >> this.DB + i - k1;
        }
        n = k;
        while((w & 1) == 0){
            w >>= 1;
            --n;
        }
        if ((i -= n) < 0) {
            i += this.DB;
            --j;
        }
        if (is1) {
            // ret == 1, don't bother squaring or multiplying it
            g[w].copyTo(r);
            is1 = false;
        } else {
            while(n > 1){
                z.sqrTo(r, r2);
                z.sqrTo(r2, r);
                n -= 2;
            }
            if (n > 0) z.sqrTo(r, r2);
            else {
                t = r;
                r = r2;
                r2 = t;
            }
            z.mulTo(r2, g[w], r);
        }
        while(j >= 0 && (e[j] & 1 << i) == 0){
            z.sqrTo(r, r2);
            t = r;
            r = r2;
            r2 = t;
            if (--i < 0) {
                i = this.DB - 1;
                --j;
            }
        }
    }
    var result = z.revert(r);
    callback(null, result);
    return result;
}
// protected
BigInteger.prototype.copyTo = bnpCopyTo;
BigInteger.prototype.fromInt = bnpFromInt;
BigInteger.prototype.fromString = bnpFromString;
BigInteger.prototype.clamp = bnpClamp;
BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
BigInteger.prototype.drShiftTo = bnpDRShiftTo;
BigInteger.prototype.lShiftTo = bnpLShiftTo;
BigInteger.prototype.rShiftTo = bnpRShiftTo;
BigInteger.prototype.subTo = bnpSubTo;
BigInteger.prototype.multiplyTo = bnpMultiplyTo;
BigInteger.prototype.squareTo = bnpSquareTo;
BigInteger.prototype.divRemTo = bnpDivRemTo;
BigInteger.prototype.invDigit = bnpInvDigit;
BigInteger.prototype.addTo = bnpAddTo;
// public
BigInteger.prototype.toString = bnToString;
BigInteger.prototype.negate = bnNegate;
BigInteger.prototype.abs = bnAbs;
BigInteger.prototype.compareTo = bnCompareTo;
BigInteger.prototype.bitLength = bnBitLength;
BigInteger.prototype.mod = bnMod;
BigInteger.prototype.equals = bnEquals;
BigInteger.prototype.add = bnAdd;
BigInteger.prototype.subtract = bnSubtract;
BigInteger.prototype.multiply = bnMultiply;
BigInteger.prototype.divide = bnDivide;
BigInteger.prototype.modPow = bnModPow;
// "constants"
BigInteger.ZERO = nbv(0);
BigInteger.ONE = nbv(1);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dojqu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>CognitoAccessToken);
/*!
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */ var _cognitoJwtToken = require("./CognitoJwtToken");
var _cognitoJwtTokenDefault = parcelHelpers.interopDefault(_cognitoJwtToken);
function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    _setPrototypeOf(subClass, superClass);
}
function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _setPrototypeOf(o, p);
}
/** @class */ var CognitoAccessToken = /*#__PURE__*/ function(_CognitoJwtToken) {
    _inheritsLoose(CognitoAccessToken, _CognitoJwtToken);
    /**
   * Constructs a new CognitoAccessToken object
   * @param {string=} AccessToken The JWT access token.
   */ function CognitoAccessToken(_temp) {
        var _ref = _temp === void 0 ? {} : _temp, AccessToken = _ref.AccessToken;
        return _CognitoJwtToken.call(this, AccessToken || "") || this;
    }
    return CognitoAccessToken;
}((0, _cognitoJwtTokenDefault.default));

},{"./CognitoJwtToken":"cvipU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cvipU":[function(require,module,exports) {
/*!
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>CognitoJwtToken);
var _buffer = require("buffer");
/** @class */ var CognitoJwtToken = /*#__PURE__*/ function() {
    /**
   * Constructs a new CognitoJwtToken object
   * @param {string=} token The JWT token.
   */ function CognitoJwtToken(token) {
        // Assign object
        this.jwtToken = token || "";
        this.payload = this.decodePayload();
    }
    /**
   * @returns {string} the record's token.
   */ var _proto = CognitoJwtToken.prototype;
    _proto.getJwtToken = function getJwtToken() {
        return this.jwtToken;
    } /**
   * @returns {int} the token's expiration (exp member).
   */ ;
    _proto.getExpiration = function getExpiration() {
        return this.payload.exp;
    } /**
   * @returns {int} the token's "issued at" (iat member).
   */ ;
    _proto.getIssuedAt = function getIssuedAt() {
        return this.payload.iat;
    } /**
   * @returns {object} the token's payload.
   */ ;
    _proto.decodePayload = function decodePayload() {
        var payload = this.jwtToken.split(".")[1];
        try {
            return JSON.parse((0, _buffer.Buffer).from(payload, "base64").toString("utf8"));
        } catch (err) {
            return {};
        }
    };
    return CognitoJwtToken;
}();

},{"buffer":"fCgem","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7Exnm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>CognitoIdToken);
/*!
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */ var _cognitoJwtToken = require("./CognitoJwtToken");
var _cognitoJwtTokenDefault = parcelHelpers.interopDefault(_cognitoJwtToken);
function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    _setPrototypeOf(subClass, superClass);
}
function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _setPrototypeOf(o, p);
}
/** @class */ var CognitoIdToken = /*#__PURE__*/ function(_CognitoJwtToken) {
    _inheritsLoose(CognitoIdToken, _CognitoJwtToken);
    /**
   * Constructs a new CognitoIdToken object
   * @param {string=} IdToken The JWT Id token
   */ function CognitoIdToken(_temp) {
        var _ref = _temp === void 0 ? {} : _temp, IdToken = _ref.IdToken;
        return _CognitoJwtToken.call(this, IdToken || "") || this;
    }
    return CognitoIdToken;
}((0, _cognitoJwtTokenDefault.default));

},{"./CognitoJwtToken":"cvipU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3nCMJ":[function(require,module,exports) {
/*!
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */ /** @class */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>CognitoRefreshToken);
var CognitoRefreshToken = /*#__PURE__*/ function() {
    /**
   * Constructs a new CognitoRefreshToken object
   * @param {string=} RefreshToken The JWT refresh token.
   */ function CognitoRefreshToken(_temp) {
        var _ref = _temp === void 0 ? {} : _temp, RefreshToken = _ref.RefreshToken;
        // Assign object
        this.token = RefreshToken || "";
    }
    /**
   * @returns {string} the record's token.
   */ var _proto = CognitoRefreshToken.prototype;
    _proto.getToken = function getToken() {
        return this.token;
    };
    return CognitoRefreshToken;
}();

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cbaip":[function(require,module,exports) {
/*!
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>CognitoUser);
var _buffer = require("buffer");
var _sha256Js = require("@aws-crypto/sha256-js");
var _platform = require("./Platform");
var _bigInteger = require("./BigInteger");
var _bigIntegerDefault = parcelHelpers.interopDefault(_bigInteger);
var _authenticationHelper = require("./AuthenticationHelper");
var _authenticationHelperDefault = parcelHelpers.interopDefault(_authenticationHelper);
var _cognitoAccessToken = require("./CognitoAccessToken");
var _cognitoAccessTokenDefault = parcelHelpers.interopDefault(_cognitoAccessToken);
var _cognitoIdToken = require("./CognitoIdToken");
var _cognitoIdTokenDefault = parcelHelpers.interopDefault(_cognitoIdToken);
var _cognitoRefreshToken = require("./CognitoRefreshToken");
var _cognitoRefreshTokenDefault = parcelHelpers.interopDefault(_cognitoRefreshToken);
var _cognitoUserSession = require("./CognitoUserSession");
var _cognitoUserSessionDefault = parcelHelpers.interopDefault(_cognitoUserSession);
var _dateHelper = require("./DateHelper");
var _dateHelperDefault = parcelHelpers.interopDefault(_dateHelper);
var _cognitoUserAttribute = require("./CognitoUserAttribute");
var _cognitoUserAttributeDefault = parcelHelpers.interopDefault(_cognitoUserAttribute);
var _storageHelper = require("./StorageHelper");
var _storageHelperDefault = parcelHelpers.interopDefault(_storageHelper);
/**
 * @callback nodeCallback
 * @template T result
 * @param {*} err The operation failure reason, or null.
 * @param {T} result The operation result.
 */ /**
 * @callback onFailure
 * @param {*} err Failure reason.
 */ /**
 * @callback onSuccess
 * @template T result
 * @param {T} result The operation result.
 */ /**
 * @callback mfaRequired
 * @param {*} details MFA challenge details.
 */ /**
 * @callback customChallenge
 * @param {*} details Custom challenge details.
 */ /**
 * @callback inputVerificationCode
 * @param {*} data Server response.
 */ /**
 * @callback authSuccess
 * @param {CognitoUserSession} session The new session.
 * @param {bool=} userConfirmationNecessary User must be confirmed.
 */ var isNavigatorAvailable = typeof navigator !== "undefined";
var userAgent = isNavigatorAvailable ? (0, _platform.Platform).isReactNative ? "react-native" : navigator.userAgent : "nodejs";
/** @class */ var CognitoUser = /*#__PURE__*/ function() {
    /**
   * Constructs a new CognitoUser object
   * @param {object} data Creation options
   * @param {string} data.Username The user's username.
   * @param {CognitoUserPool} data.Pool Pool containing the user.
   * @param {object} data.Storage Optional storage object.
   */ function CognitoUser(data) {
        if (data == null || data.Username == null || data.Pool == null) throw new Error("Username and Pool information are required.");
        this.username = data.Username || "";
        this.pool = data.Pool;
        this.Session = null;
        this.client = data.Pool.client;
        this.signInUserSession = null;
        this.authenticationFlowType = "USER_SRP_AUTH";
        this.storage = data.Storage || new (0, _storageHelperDefault.default)().getStorage();
        this.keyPrefix = "CognitoIdentityServiceProvider." + this.pool.getClientId();
        this.userDataKey = this.keyPrefix + "." + this.username + ".userData";
    }
    /**
   * Sets the session for this user
   * @param {CognitoUserSession} signInUserSession the session
   * @returns {void}
   */ var _proto = CognitoUser.prototype;
    _proto.setSignInUserSession = function setSignInUserSession(signInUserSession) {
        this.clearCachedUserData();
        this.signInUserSession = signInUserSession;
        this.cacheTokens();
    } /**
   * @returns {CognitoUserSession} the current session for this user
   */ ;
    _proto.getSignInUserSession = function getSignInUserSession() {
        return this.signInUserSession;
    } /**
   * @returns {string} the user's username
   */ ;
    _proto.getUsername = function getUsername() {
        return this.username;
    } /**
   * @returns {String} the authentication flow type
   */ ;
    _proto.getAuthenticationFlowType = function getAuthenticationFlowType() {
        return this.authenticationFlowType;
    } /**
   * sets authentication flow type
   * @param {string} authenticationFlowType New value.
   * @returns {void}
   */ ;
    _proto.setAuthenticationFlowType = function setAuthenticationFlowType(authenticationFlowType) {
        this.authenticationFlowType = authenticationFlowType;
    } /**
   * This is used for authenticating the user through the custom authentication flow.
   * @param {AuthenticationDetails} authDetails Contains the authentication data
   * @param {object} callback Result callback map.
   * @param {onFailure} callback.onFailure Called on any error.
   * @param {customChallenge} callback.customChallenge Custom challenge
   *        response required to continue.
   * @param {authSuccess} callback.onSuccess Called on success with the new session.
   * @returns {void}
   */ ;
    _proto.initiateAuth = function initiateAuth(authDetails, callback) {
        var _this = this;
        var authParameters = authDetails.getAuthParameters();
        authParameters.USERNAME = this.username;
        var clientMetaData = Object.keys(authDetails.getValidationData()).length !== 0 ? authDetails.getValidationData() : authDetails.getClientMetadata();
        var jsonReq = {
            AuthFlow: "CUSTOM_AUTH",
            ClientId: this.pool.getClientId(),
            AuthParameters: authParameters,
            ClientMetadata: clientMetaData
        };
        if (this.getUserContextData()) jsonReq.UserContextData = this.getUserContextData();
        this.client.request("InitiateAuth", jsonReq, function(err, data) {
            if (err) return callback.onFailure(err);
            var challengeName = data.ChallengeName;
            var challengeParameters = data.ChallengeParameters;
            if (challengeName === "CUSTOM_CHALLENGE") {
                _this.Session = data.Session;
                return callback.customChallenge(challengeParameters);
            }
            _this.signInUserSession = _this.getCognitoUserSession(data.AuthenticationResult);
            _this.cacheTokens();
            return callback.onSuccess(_this.signInUserSession);
        });
    } /**
   * This is used for authenticating the user.
   * stuff
   * @param {AuthenticationDetails} authDetails Contains the authentication data
   * @param {object} callback Result callback map.
   * @param {onFailure} callback.onFailure Called on any error.
   * @param {newPasswordRequired} callback.newPasswordRequired new
   *        password and any required attributes are required to continue
   * @param {mfaRequired} callback.mfaRequired MFA code
   *        required to continue.
   * @param {customChallenge} callback.customChallenge Custom challenge
   *        response required to continue.
   * @param {authSuccess} callback.onSuccess Called on success with the new session.
   * @returns {void}
   */ ;
    _proto.authenticateUser = function authenticateUser(authDetails, callback) {
        if (this.authenticationFlowType === "USER_PASSWORD_AUTH") return this.authenticateUserPlainUsernamePassword(authDetails, callback);
        else if (this.authenticationFlowType === "USER_SRP_AUTH" || this.authenticationFlowType === "CUSTOM_AUTH") return this.authenticateUserDefaultAuth(authDetails, callback);
        return callback.onFailure(new Error("Authentication flow type is invalid."));
    } /**
   * PRIVATE ONLY: This is an internal only method and should not
   * be directly called by the consumers.
   * It calls the AuthenticationHelper for SRP related
   * stuff
   * @param {AuthenticationDetails} authDetails Contains the authentication data
   * @param {object} callback Result callback map.
   * @param {onFailure} callback.onFailure Called on any error.
   * @param {newPasswordRequired} callback.newPasswordRequired new
   *        password and any required attributes are required to continue
   * @param {mfaRequired} callback.mfaRequired MFA code
   *        required to continue.
   * @param {customChallenge} callback.customChallenge Custom challenge
   *        response required to continue.
   * @param {authSuccess} callback.onSuccess Called on success with the new session.
   * @returns {void}
   */ ;
    _proto.authenticateUserDefaultAuth = function authenticateUserDefaultAuth(authDetails, callback) {
        var _this2 = this;
        var authenticationHelper = new (0, _authenticationHelperDefault.default)(this.pool.getUserPoolName());
        var dateHelper = new (0, _dateHelperDefault.default)();
        var serverBValue;
        var salt;
        var authParameters = {};
        if (this.deviceKey != null) authParameters.DEVICE_KEY = this.deviceKey;
        authParameters.USERNAME = this.username;
        authenticationHelper.getLargeAValue(function(errOnAValue, aValue) {
            // getLargeAValue callback start
            if (errOnAValue) callback.onFailure(errOnAValue);
            authParameters.SRP_A = aValue.toString(16);
            if (_this2.authenticationFlowType === "CUSTOM_AUTH") authParameters.CHALLENGE_NAME = "SRP_A";
            var clientMetaData = Object.keys(authDetails.getValidationData()).length !== 0 ? authDetails.getValidationData() : authDetails.getClientMetadata();
            var jsonReq = {
                AuthFlow: _this2.authenticationFlowType,
                ClientId: _this2.pool.getClientId(),
                AuthParameters: authParameters,
                ClientMetadata: clientMetaData
            };
            if (_this2.getUserContextData(_this2.username)) jsonReq.UserContextData = _this2.getUserContextData(_this2.username);
            _this2.client.request("InitiateAuth", jsonReq, function(err, data) {
                if (err) return callback.onFailure(err);
                var challengeParameters = data.ChallengeParameters;
                _this2.username = challengeParameters.USER_ID_FOR_SRP;
                _this2.userDataKey = _this2.keyPrefix + "." + _this2.username + ".userData";
                serverBValue = new (0, _bigIntegerDefault.default)(challengeParameters.SRP_B, 16);
                salt = new (0, _bigIntegerDefault.default)(challengeParameters.SALT, 16);
                _this2.getCachedDeviceKeyAndPassword();
                authenticationHelper.getPasswordAuthenticationKey(_this2.username, authDetails.getPassword(), serverBValue, salt, function(errOnHkdf, hkdf) {
                    // getPasswordAuthenticationKey callback start
                    if (errOnHkdf) callback.onFailure(errOnHkdf);
                    var dateNow = dateHelper.getNowString();
                    var concatBuffer = (0, _buffer.Buffer).concat([
                        (0, _buffer.Buffer).from(_this2.pool.getUserPoolName(), "utf8"),
                        (0, _buffer.Buffer).from(_this2.username, "utf8"),
                        (0, _buffer.Buffer).from(challengeParameters.SECRET_BLOCK, "base64"),
                        (0, _buffer.Buffer).from(dateNow, "utf8")
                    ]);
                    var awsCryptoHash = new (0, _sha256Js.Sha256)(hkdf);
                    awsCryptoHash.update(concatBuffer);
                    var resultFromAWSCrypto = awsCryptoHash.digestSync();
                    var signatureString = (0, _buffer.Buffer).from(resultFromAWSCrypto).toString("base64");
                    var challengeResponses = {};
                    challengeResponses.USERNAME = _this2.username;
                    challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;
                    challengeResponses.TIMESTAMP = dateNow;
                    challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;
                    if (_this2.deviceKey != null) challengeResponses.DEVICE_KEY = _this2.deviceKey;
                    var respondToAuthChallenge = function respondToAuthChallenge(challenge, challengeCallback) {
                        return _this2.client.request("RespondToAuthChallenge", challenge, function(errChallenge, dataChallenge) {
                            if (errChallenge && errChallenge.code === "ResourceNotFoundException" && errChallenge.message.toLowerCase().indexOf("device") !== -1) {
                                challengeResponses.DEVICE_KEY = null;
                                _this2.deviceKey = null;
                                _this2.randomPassword = null;
                                _this2.deviceGroupKey = null;
                                _this2.clearCachedDeviceKeyAndPassword();
                                return respondToAuthChallenge(challenge, challengeCallback);
                            }
                            return challengeCallback(errChallenge, dataChallenge);
                        });
                    };
                    var jsonReqResp = {
                        ChallengeName: "PASSWORD_VERIFIER",
                        ClientId: _this2.pool.getClientId(),
                        ChallengeResponses: challengeResponses,
                        Session: data.Session,
                        ClientMetadata: clientMetaData
                    };
                    if (_this2.getUserContextData()) jsonReqResp.UserContextData = _this2.getUserContextData();
                    respondToAuthChallenge(jsonReqResp, function(errAuthenticate, dataAuthenticate) {
                        if (errAuthenticate) return callback.onFailure(errAuthenticate);
                        return _this2.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);
                    });
                    return undefined;
                // getPasswordAuthenticationKey callback end
                });
                return undefined;
            });
        // getLargeAValue callback end
        });
    } /**
   * PRIVATE ONLY: This is an internal only method and should not
   * be directly called by the consumers.
   * @param {AuthenticationDetails} authDetails Contains the authentication data.
   * @param {object} callback Result callback map.
   * @param {onFailure} callback.onFailure Called on any error.
   * @param {mfaRequired} callback.mfaRequired MFA code
   *        required to continue.
   * @param {authSuccess} callback.onSuccess Called on success with the new session.
   * @returns {void}
   */ ;
    _proto.authenticateUserPlainUsernamePassword = function authenticateUserPlainUsernamePassword(authDetails, callback) {
        var _this3 = this;
        var authParameters = {};
        authParameters.USERNAME = this.username;
        authParameters.PASSWORD = authDetails.getPassword();
        if (!authParameters.PASSWORD) {
            callback.onFailure(new Error("PASSWORD parameter is required"));
            return;
        }
        var authenticationHelper = new (0, _authenticationHelperDefault.default)(this.pool.getUserPoolName());
        this.getCachedDeviceKeyAndPassword();
        if (this.deviceKey != null) authParameters.DEVICE_KEY = this.deviceKey;
        var clientMetaData = Object.keys(authDetails.getValidationData()).length !== 0 ? authDetails.getValidationData() : authDetails.getClientMetadata();
        var jsonReq = {
            AuthFlow: "USER_PASSWORD_AUTH",
            ClientId: this.pool.getClientId(),
            AuthParameters: authParameters,
            ClientMetadata: clientMetaData
        };
        if (this.getUserContextData(this.username)) jsonReq.UserContextData = this.getUserContextData(this.username);
        // USER_PASSWORD_AUTH happens in a single round-trip: client sends userName and password,
        // Cognito UserPools verifies password and returns tokens.
        this.client.request("InitiateAuth", jsonReq, function(err, authResult) {
            if (err) return callback.onFailure(err);
            return _this3.authenticateUserInternal(authResult, authenticationHelper, callback);
        });
    } /**
   * PRIVATE ONLY: This is an internal only method and should not
   * be directly called by the consumers.
   * @param {object} dataAuthenticate authentication data
   * @param {object} authenticationHelper helper created
   * @param {callback} callback passed on from caller
   * @returns {void}
   */ ;
    _proto.authenticateUserInternal = function authenticateUserInternal(dataAuthenticate, authenticationHelper, callback) {
        var _this4 = this;
        var challengeName = dataAuthenticate.ChallengeName;
        var challengeParameters = dataAuthenticate.ChallengeParameters;
        if (challengeName === "SMS_MFA") {
            this.Session = dataAuthenticate.Session;
            return callback.mfaRequired(challengeName, challengeParameters);
        }
        if (challengeName === "SELECT_MFA_TYPE") {
            this.Session = dataAuthenticate.Session;
            return callback.selectMFAType(challengeName, challengeParameters);
        }
        if (challengeName === "MFA_SETUP") {
            this.Session = dataAuthenticate.Session;
            return callback.mfaSetup(challengeName, challengeParameters);
        }
        if (challengeName === "SOFTWARE_TOKEN_MFA") {
            this.Session = dataAuthenticate.Session;
            return callback.totpRequired(challengeName, challengeParameters);
        }
        if (challengeName === "CUSTOM_CHALLENGE") {
            this.Session = dataAuthenticate.Session;
            return callback.customChallenge(challengeParameters);
        }
        if (challengeName === "NEW_PASSWORD_REQUIRED") {
            this.Session = dataAuthenticate.Session;
            var userAttributes = null;
            var rawRequiredAttributes = null;
            var requiredAttributes = [];
            var userAttributesPrefix = authenticationHelper.getNewPasswordRequiredChallengeUserAttributePrefix();
            if (challengeParameters) {
                userAttributes = JSON.parse(dataAuthenticate.ChallengeParameters.userAttributes);
                rawRequiredAttributes = JSON.parse(dataAuthenticate.ChallengeParameters.requiredAttributes);
            }
            if (rawRequiredAttributes) for(var i = 0; i < rawRequiredAttributes.length; i++)requiredAttributes[i] = rawRequiredAttributes[i].substr(userAttributesPrefix.length);
            return callback.newPasswordRequired(userAttributes, requiredAttributes);
        }
        if (challengeName === "DEVICE_SRP_AUTH") {
            this.Session = dataAuthenticate.Session;
            this.getDeviceResponse(callback);
            return undefined;
        }
        this.signInUserSession = this.getCognitoUserSession(dataAuthenticate.AuthenticationResult);
        this.challengeName = challengeName;
        this.cacheTokens();
        var newDeviceMetadata = dataAuthenticate.AuthenticationResult.NewDeviceMetadata;
        if (newDeviceMetadata == null) return callback.onSuccess(this.signInUserSession);
        authenticationHelper.generateHashDevice(dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey, dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey, function(errGenHash) {
            if (errGenHash) return callback.onFailure(errGenHash);
            var deviceSecretVerifierConfig = {
                Salt: (0, _buffer.Buffer).from(authenticationHelper.getSaltDevices(), "hex").toString("base64"),
                PasswordVerifier: (0, _buffer.Buffer).from(authenticationHelper.getVerifierDevices(), "hex").toString("base64")
            };
            _this4.verifierDevices = deviceSecretVerifierConfig.PasswordVerifier;
            _this4.deviceGroupKey = newDeviceMetadata.DeviceGroupKey;
            _this4.randomPassword = authenticationHelper.getRandomPassword();
            _this4.client.request("ConfirmDevice", {
                DeviceKey: newDeviceMetadata.DeviceKey,
                AccessToken: _this4.signInUserSession.getAccessToken().getJwtToken(),
                DeviceSecretVerifierConfig: deviceSecretVerifierConfig,
                DeviceName: userAgent
            }, function(errConfirm, dataConfirm) {
                if (errConfirm) return callback.onFailure(errConfirm);
                _this4.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;
                _this4.cacheDeviceKeyAndPassword();
                if (dataConfirm.UserConfirmationNecessary === true) return callback.onSuccess(_this4.signInUserSession, dataConfirm.UserConfirmationNecessary);
                return callback.onSuccess(_this4.signInUserSession);
            });
            return undefined;
        });
        return undefined;
    } /**
   * This method is user to complete the NEW_PASSWORD_REQUIRED challenge.
   * Pass the new password with any new user attributes to be updated.
   * User attribute keys must be of format userAttributes.<attribute_name>.
   * @param {string} newPassword new password for this user
   * @param {object} requiredAttributeData map with values for all required attributes
   * @param {object} callback Result callback map.
   * @param {onFailure} callback.onFailure Called on any error.
   * @param {mfaRequired} callback.mfaRequired MFA code required to continue.
   * @param {customChallenge} callback.customChallenge Custom challenge
   *         response required to continue.
   * @param {authSuccess} callback.onSuccess Called on success with the new session.
   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger
   * @returns {void}
   */ ;
    _proto.completeNewPasswordChallenge = function completeNewPasswordChallenge(newPassword, requiredAttributeData, callback, clientMetadata) {
        var _this5 = this;
        if (!newPassword) return callback.onFailure(new Error("New password is required."));
        var authenticationHelper = new (0, _authenticationHelperDefault.default)(this.pool.getUserPoolName());
        var userAttributesPrefix = authenticationHelper.getNewPasswordRequiredChallengeUserAttributePrefix();
        var finalUserAttributes = {};
        if (requiredAttributeData) Object.keys(requiredAttributeData).forEach(function(key) {
            finalUserAttributes[userAttributesPrefix + key] = requiredAttributeData[key];
        });
        finalUserAttributes.NEW_PASSWORD = newPassword;
        finalUserAttributes.USERNAME = this.username;
        var jsonReq = {
            ChallengeName: "NEW_PASSWORD_REQUIRED",
            ClientId: this.pool.getClientId(),
            ChallengeResponses: finalUserAttributes,
            Session: this.Session,
            ClientMetadata: clientMetadata
        };
        if (this.getUserContextData()) jsonReq.UserContextData = this.getUserContextData();
        this.client.request("RespondToAuthChallenge", jsonReq, function(errAuthenticate, dataAuthenticate) {
            if (errAuthenticate) return callback.onFailure(errAuthenticate);
            return _this5.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);
        });
        return undefined;
    } /**
   * This is used to get a session using device authentication. It is called at the end of user
   * authentication
   *
   * @param {object} callback Result callback map.
   * @param {onFailure} callback.onFailure Called on any error.
   * @param {authSuccess} callback.onSuccess Called on success with the new session.
   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger
   * @returns {void}
   * @private
   */ ;
    _proto.getDeviceResponse = function getDeviceResponse(callback, clientMetadata) {
        var _this6 = this;
        var authenticationHelper = new (0, _authenticationHelperDefault.default)(this.deviceGroupKey);
        var dateHelper = new (0, _dateHelperDefault.default)();
        var authParameters = {};
        authParameters.USERNAME = this.username;
        authParameters.DEVICE_KEY = this.deviceKey;
        authenticationHelper.getLargeAValue(function(errAValue, aValue) {
            // getLargeAValue callback start
            if (errAValue) callback.onFailure(errAValue);
            authParameters.SRP_A = aValue.toString(16);
            var jsonReq = {
                ChallengeName: "DEVICE_SRP_AUTH",
                ClientId: _this6.pool.getClientId(),
                ChallengeResponses: authParameters,
                ClientMetadata: clientMetadata,
                Session: _this6.Session
            };
            if (_this6.getUserContextData()) jsonReq.UserContextData = _this6.getUserContextData();
            _this6.client.request("RespondToAuthChallenge", jsonReq, function(err, data) {
                if (err) return callback.onFailure(err);
                var challengeParameters = data.ChallengeParameters;
                var serverBValue = new (0, _bigIntegerDefault.default)(challengeParameters.SRP_B, 16);
                var salt = new (0, _bigIntegerDefault.default)(challengeParameters.SALT, 16);
                authenticationHelper.getPasswordAuthenticationKey(_this6.deviceKey, _this6.randomPassword, serverBValue, salt, function(errHkdf, hkdf) {
                    // getPasswordAuthenticationKey callback start
                    if (errHkdf) return callback.onFailure(errHkdf);
                    var dateNow = dateHelper.getNowString();
                    var concatBuffer = (0, _buffer.Buffer).concat([
                        (0, _buffer.Buffer).from(_this6.deviceGroupKey, "utf8"),
                        (0, _buffer.Buffer).from(_this6.deviceKey, "utf8"),
                        (0, _buffer.Buffer).from(challengeParameters.SECRET_BLOCK, "base64"),
                        (0, _buffer.Buffer).from(dateNow, "utf8")
                    ]);
                    var awsCryptoHash = new (0, _sha256Js.Sha256)(hkdf);
                    awsCryptoHash.update(concatBuffer);
                    var resultFromAWSCrypto = awsCryptoHash.digestSync();
                    var signatureString = (0, _buffer.Buffer).from(resultFromAWSCrypto).toString("base64");
                    var challengeResponses = {};
                    challengeResponses.USERNAME = _this6.username;
                    challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;
                    challengeResponses.TIMESTAMP = dateNow;
                    challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;
                    challengeResponses.DEVICE_KEY = _this6.deviceKey;
                    var jsonReqResp = {
                        ChallengeName: "DEVICE_PASSWORD_VERIFIER",
                        ClientId: _this6.pool.getClientId(),
                        ChallengeResponses: challengeResponses,
                        Session: data.Session
                    };
                    if (_this6.getUserContextData()) jsonReqResp.UserContextData = _this6.getUserContextData();
                    _this6.client.request("RespondToAuthChallenge", jsonReqResp, function(errAuthenticate, dataAuthenticate) {
                        if (errAuthenticate) return callback.onFailure(errAuthenticate);
                        _this6.signInUserSession = _this6.getCognitoUserSession(dataAuthenticate.AuthenticationResult);
                        _this6.cacheTokens();
                        return callback.onSuccess(_this6.signInUserSession);
                    });
                    return undefined;
                // getPasswordAuthenticationKey callback end
                });
                return undefined;
            });
        // getLargeAValue callback end
        });
    } /**
   * This is used for a certain user to confirm the registration by using a confirmation code
   * @param {string} confirmationCode Code entered by user.
   * @param {bool} forceAliasCreation Allow migrating from an existing email / phone number.
   * @param {nodeCallback<string>} callback Called on success or error.
   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger
   * @returns {void}
   */ ;
    _proto.confirmRegistration = function confirmRegistration(confirmationCode, forceAliasCreation, callback, clientMetadata) {
        var jsonReq = {
            ClientId: this.pool.getClientId(),
            ConfirmationCode: confirmationCode,
            Username: this.username,
            ForceAliasCreation: forceAliasCreation,
            ClientMetadata: clientMetadata
        };
        if (this.getUserContextData()) jsonReq.UserContextData = this.getUserContextData();
        this.client.request("ConfirmSignUp", jsonReq, function(err) {
            if (err) return callback(err, null);
            return callback(null, "SUCCESS");
        });
    } /**
   * This is used by the user once he has the responses to a custom challenge
   * @param {string} answerChallenge The custom challenge answer.
   * @param {object} callback Result callback map.
   * @param {onFailure} callback.onFailure Called on any error.
   * @param {customChallenge} callback.customChallenge
   *    Custom challenge response required to continue.
   * @param {authSuccess} callback.onSuccess Called on success with the new session.
   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger
   * @returns {void}
   */ ;
    _proto.sendCustomChallengeAnswer = function sendCustomChallengeAnswer(answerChallenge, callback, clientMetadata) {
        var _this7 = this;
        var challengeResponses = {};
        challengeResponses.USERNAME = this.username;
        challengeResponses.ANSWER = answerChallenge;
        var authenticationHelper = new (0, _authenticationHelperDefault.default)(this.pool.getUserPoolName());
        this.getCachedDeviceKeyAndPassword();
        if (this.deviceKey != null) challengeResponses.DEVICE_KEY = this.deviceKey;
        var jsonReq = {
            ChallengeName: "CUSTOM_CHALLENGE",
            ChallengeResponses: challengeResponses,
            ClientId: this.pool.getClientId(),
            Session: this.Session,
            ClientMetadata: clientMetadata
        };
        if (this.getUserContextData()) jsonReq.UserContextData = this.getUserContextData();
        this.client.request("RespondToAuthChallenge", jsonReq, function(err, data) {
            if (err) return callback.onFailure(err);
            return _this7.authenticateUserInternal(data, authenticationHelper, callback);
        });
    } /**
   * This is used by the user once he has an MFA code
   * @param {string} confirmationCode The MFA code entered by the user.
   * @param {object} callback Result callback map.
   * @param {string} mfaType The mfa we are replying to.
   * @param {onFailure} callback.onFailure Called on any error.
   * @param {authSuccess} callback.onSuccess Called on success with the new session.
   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger
   * @returns {void}
   */ ;
    _proto.sendMFACode = function sendMFACode(confirmationCode, callback, mfaType, clientMetadata) {
        var _this8 = this;
        var challengeResponses = {};
        challengeResponses.USERNAME = this.username;
        challengeResponses.SMS_MFA_CODE = confirmationCode;
        var mfaTypeSelection = mfaType || "SMS_MFA";
        if (mfaTypeSelection === "SOFTWARE_TOKEN_MFA") challengeResponses.SOFTWARE_TOKEN_MFA_CODE = confirmationCode;
        if (this.deviceKey != null) challengeResponses.DEVICE_KEY = this.deviceKey;
        var jsonReq = {
            ChallengeName: mfaTypeSelection,
            ChallengeResponses: challengeResponses,
            ClientId: this.pool.getClientId(),
            Session: this.Session,
            ClientMetadata: clientMetadata
        };
        if (this.getUserContextData()) jsonReq.UserContextData = this.getUserContextData();
        this.client.request("RespondToAuthChallenge", jsonReq, function(err, dataAuthenticate) {
            if (err) return callback.onFailure(err);
            var challengeName = dataAuthenticate.ChallengeName;
            if (challengeName === "DEVICE_SRP_AUTH") {
                _this8.getDeviceResponse(callback);
                return undefined;
            }
            _this8.signInUserSession = _this8.getCognitoUserSession(dataAuthenticate.AuthenticationResult);
            _this8.cacheTokens();
            if (dataAuthenticate.AuthenticationResult.NewDeviceMetadata == null) return callback.onSuccess(_this8.signInUserSession);
            var authenticationHelper = new (0, _authenticationHelperDefault.default)(_this8.pool.getUserPoolName());
            authenticationHelper.generateHashDevice(dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey, dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey, function(errGenHash) {
                if (errGenHash) return callback.onFailure(errGenHash);
                var deviceSecretVerifierConfig = {
                    Salt: (0, _buffer.Buffer).from(authenticationHelper.getSaltDevices(), "hex").toString("base64"),
                    PasswordVerifier: (0, _buffer.Buffer).from(authenticationHelper.getVerifierDevices(), "hex").toString("base64")
                };
                _this8.verifierDevices = deviceSecretVerifierConfig.PasswordVerifier;
                _this8.deviceGroupKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey;
                _this8.randomPassword = authenticationHelper.getRandomPassword();
                _this8.client.request("ConfirmDevice", {
                    DeviceKey: dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey,
                    AccessToken: _this8.signInUserSession.getAccessToken().getJwtToken(),
                    DeviceSecretVerifierConfig: deviceSecretVerifierConfig,
                    DeviceName: userAgent
                }, function(errConfirm, dataConfirm) {
                    if (errConfirm) return callback.onFailure(errConfirm);
                    _this8.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;
                    _this8.cacheDeviceKeyAndPassword();
                    if (dataConfirm.UserConfirmationNecessary === true) return callback.onSuccess(_this8.signInUserSession, dataConfirm.UserConfirmationNecessary);
                    return callback.onSuccess(_this8.signInUserSession);
                });
                return undefined;
            });
            return undefined;
        });
    } /**
   * This is used by an authenticated user to change the current password
   * @param {string} oldUserPassword The current password.
   * @param {string} newUserPassword The requested new password.
   * @param {nodeCallback<string>} callback Called on success or error.
   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger
   * @returns {void}
   */ ;
    _proto.changePassword = function changePassword(oldUserPassword, newUserPassword, callback, clientMetadata) {
        if (!(this.signInUserSession != null && this.signInUserSession.isValid())) return callback(new Error("User is not authenticated"), null);
        this.client.request("ChangePassword", {
            PreviousPassword: oldUserPassword,
            ProposedPassword: newUserPassword,
            AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
            ClientMetadata: clientMetadata
        }, function(err) {
            if (err) return callback(err, null);
            return callback(null, "SUCCESS");
        });
        return undefined;
    } /**
   * This is used by an authenticated user to enable MFA for itself
   * @deprecated
   * @param {nodeCallback<string>} callback Called on success or error.
   * @returns {void}
   */ ;
    _proto.enableMFA = function enableMFA(callback) {
        if (this.signInUserSession == null || !this.signInUserSession.isValid()) return callback(new Error("User is not authenticated"), null);
        var mfaOptions = [];
        var mfaEnabled = {
            DeliveryMedium: "SMS",
            AttributeName: "phone_number"
        };
        mfaOptions.push(mfaEnabled);
        this.client.request("SetUserSettings", {
            MFAOptions: mfaOptions,
            AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
        }, function(err) {
            if (err) return callback(err, null);
            return callback(null, "SUCCESS");
        });
        return undefined;
    } /**
   * This is used by an authenticated user to enable MFA for itself
   * @param {IMfaSettings} smsMfaSettings the sms mfa settings
   * @param {IMFASettings} softwareTokenMfaSettings the software token mfa settings
   * @param {nodeCallback<string>} callback Called on success or error.
   * @returns {void}
   */ ;
    _proto.setUserMfaPreference = function setUserMfaPreference(smsMfaSettings, softwareTokenMfaSettings, callback) {
        if (this.signInUserSession == null || !this.signInUserSession.isValid()) return callback(new Error("User is not authenticated"), null);
        this.client.request("SetUserMFAPreference", {
            SMSMfaSettings: smsMfaSettings,
            SoftwareTokenMfaSettings: softwareTokenMfaSettings,
            AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
        }, function(err) {
            if (err) return callback(err, null);
            return callback(null, "SUCCESS");
        });
        return undefined;
    } /**
   * This is used by an authenticated user to disable MFA for itself
   * @deprecated
   * @param {nodeCallback<string>} callback Called on success or error.
   * @returns {void}
   */ ;
    _proto.disableMFA = function disableMFA(callback) {
        if (this.signInUserSession == null || !this.signInUserSession.isValid()) return callback(new Error("User is not authenticated"), null);
        var mfaOptions = [];
        this.client.request("SetUserSettings", {
            MFAOptions: mfaOptions,
            AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
        }, function(err) {
            if (err) return callback(err, null);
            return callback(null, "SUCCESS");
        });
        return undefined;
    } /**
   * This is used by an authenticated user to delete itself
   * @param {nodeCallback<string>} callback Called on success or error.
   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger
   * @returns {void}
   */ ;
    _proto.deleteUser = function deleteUser(callback, clientMetadata) {
        var _this9 = this;
        if (this.signInUserSession == null || !this.signInUserSession.isValid()) return callback(new Error("User is not authenticated"), null);
        this.client.request("DeleteUser", {
            AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
            ClientMetadata: clientMetadata
        }, function(err) {
            if (err) return callback(err, null);
            _this9.clearCachedUser();
            return callback(null, "SUCCESS");
        });
        return undefined;
    } /**
   * This is used by an authenticated user to change a list of attributes
   * @param {AttributeArg[]} attributes A list of the new user attributes.
   * @param {nodeCallback<string>} callback Called on success or error.
   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger
   * @returns {void}
   */ ;
    _proto.updateAttributes = function updateAttributes(attributes, callback, clientMetadata) {
        var _this10 = this;
        if (this.signInUserSession == null || !this.signInUserSession.isValid()) return callback(new Error("User is not authenticated"), null);
        this.client.request("UpdateUserAttributes", {
            AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
            UserAttributes: attributes,
            ClientMetadata: clientMetadata
        }, function(err, result) {
            if (err) return callback(err, null);
            // update cached user
            return _this10.getUserData(function() {
                return callback(null, "SUCCESS", result);
            }, {
                bypassCache: true
            });
        });
        return undefined;
    } /**
   * This is used by an authenticated user to get a list of attributes
   * @param {nodeCallback<CognitoUserAttribute[]>} callback Called on success or error.
   * @returns {void}
   */ ;
    _proto.getUserAttributes = function getUserAttributes(callback) {
        if (!(this.signInUserSession != null && this.signInUserSession.isValid())) return callback(new Error("User is not authenticated"), null);
        this.client.request("GetUser", {
            AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
        }, function(err, userData) {
            if (err) return callback(err, null);
            var attributeList = [];
            for(var i = 0; i < userData.UserAttributes.length; i++){
                var attribute = {
                    Name: userData.UserAttributes[i].Name,
                    Value: userData.UserAttributes[i].Value
                };
                var userAttribute = new (0, _cognitoUserAttributeDefault.default)(attribute);
                attributeList.push(userAttribute);
            }
            return callback(null, attributeList);
        });
        return undefined;
    } /**
   * This was previously used by an authenticated user to get MFAOptions,
   * but no longer returns a meaningful response. Refer to the documentation for
   * how to setup and use MFA: https://docs.amplify.aws/lib/auth/mfa/q/platform/js
   * @deprecated
   * @param {nodeCallback<MFAOptions>} callback Called on success or error.
   * @returns {void}
   */ ;
    _proto.getMFAOptions = function getMFAOptions(callback) {
        if (!(this.signInUserSession != null && this.signInUserSession.isValid())) return callback(new Error("User is not authenticated"), null);
        this.client.request("GetUser", {
            AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
        }, function(err, userData) {
            if (err) return callback(err, null);
            return callback(null, userData.MFAOptions);
        });
        return undefined;
    } /**
   * PRIVATE ONLY: This is an internal only method and should not
   * be directly called by the consumers.
   */ ;
    _proto.createGetUserRequest = function createGetUserRequest() {
        return this.client.promisifyRequest("GetUser", {
            AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
        });
    } /**
   * PRIVATE ONLY: This is an internal only method and should not
   * be directly called by the consumers.
   */ ;
    _proto.refreshSessionIfPossible = function refreshSessionIfPossible(options) {
        var _this11 = this;
        if (options === void 0) options = {};
        // best effort, if not possible
        return new Promise(function(resolve) {
            var refresh = _this11.signInUserSession.getRefreshToken();
            if (refresh && refresh.getToken()) _this11.refreshSession(refresh, resolve, options.clientMetadata);
            else resolve();
        });
    } /**
   * This is used by an authenticated users to get the userData
   * @param {nodeCallback<UserData>} callback Called on success or error.
   * @param {GetUserDataOptions} params
   * @returns {void}
   */ ;
    _proto.getUserData = function getUserData(callback, params) {
        var _this12 = this;
        if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {
            this.clearCachedUserData();
            return callback(new Error("User is not authenticated"), null);
        }
        var userData = this.getUserDataFromCache();
        if (!userData) {
            this.fetchUserData().then(function(data) {
                callback(null, data);
            })["catch"](callback);
            return;
        }
        if (this.isFetchUserDataAndTokenRequired(params)) {
            this.fetchUserData().then(function(data) {
                return _this12.refreshSessionIfPossible(params).then(function() {
                    return data;
                });
            }).then(function(data) {
                return callback(null, data);
            })["catch"](callback);
            return;
        }
        try {
            callback(null, JSON.parse(userData));
            return;
        } catch (err) {
            this.clearCachedUserData();
            callback(err, null);
            return;
        }
    } /**
   *
   * PRIVATE ONLY: This is an internal only method and should not
   * be directly called by the consumers.
   */ ;
    _proto.getUserDataFromCache = function getUserDataFromCache() {
        var userData = this.storage.getItem(this.userDataKey);
        return userData;
    } /**
   *
   * PRIVATE ONLY: This is an internal only method and should not
   * be directly called by the consumers.
   */ ;
    _proto.isFetchUserDataAndTokenRequired = function isFetchUserDataAndTokenRequired(params) {
        var _ref = params || {}, _ref$bypassCache = _ref.bypassCache, bypassCache = _ref$bypassCache === void 0 ? false : _ref$bypassCache;
        return bypassCache;
    } /**
   *
   * PRIVATE ONLY: This is an internal only method and should not
   * be directly called by the consumers.
   */ ;
    _proto.fetchUserData = function fetchUserData() {
        var _this13 = this;
        return this.createGetUserRequest().then(function(data) {
            _this13.cacheUserData(data);
            return data;
        });
    } /**
   * This is used by an authenticated user to delete a list of attributes
   * @param {string[]} attributeList Names of the attributes to delete.
   * @param {nodeCallback<string>} callback Called on success or error.
   * @returns {void}
   */ ;
    _proto.deleteAttributes = function deleteAttributes(attributeList, callback) {
        var _this14 = this;
        if (!(this.signInUserSession != null && this.signInUserSession.isValid())) return callback(new Error("User is not authenticated"), null);
        this.client.request("DeleteUserAttributes", {
            UserAttributeNames: attributeList,
            AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
        }, function(err) {
            if (err) return callback(err, null);
            // update cached user
            return _this14.getUserData(function() {
                return callback(null, "SUCCESS");
            }, {
                bypassCache: true
            });
        });
        return undefined;
    } /**
   * This is used by a user to resend a confirmation code
   * @param {nodeCallback<string>} callback Called on success or error.
   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger
   * @returns {void}
   */ ;
    _proto.resendConfirmationCode = function resendConfirmationCode(callback, clientMetadata) {
        var jsonReq = {
            ClientId: this.pool.getClientId(),
            Username: this.username,
            ClientMetadata: clientMetadata
        };
        this.client.request("ResendConfirmationCode", jsonReq, function(err, result) {
            if (err) return callback(err, null);
            return callback(null, result);
        });
    } /**
   * This is used to get a session, either from the session object
   * or from  the local storage, or by using a refresh token
   *
   * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.
   * @param {GetSessionOptions} options
   * @returns {void}
   */ ;
    _proto.getSession = function getSession(callback, options) {
        if (options === void 0) options = {};
        if (this.username == null) return callback(new Error("Username is null. Cannot retrieve a new session"), null);
        if (this.signInUserSession != null && this.signInUserSession.isValid()) return callback(null, this.signInUserSession);
        var keyPrefix = "CognitoIdentityServiceProvider." + this.pool.getClientId() + "." + this.username;
        var idTokenKey = keyPrefix + ".idToken";
        var accessTokenKey = keyPrefix + ".accessToken";
        var refreshTokenKey = keyPrefix + ".refreshToken";
        var clockDriftKey = keyPrefix + ".clockDrift";
        if (this.storage.getItem(idTokenKey)) {
            var idToken = new (0, _cognitoIdTokenDefault.default)({
                IdToken: this.storage.getItem(idTokenKey)
            });
            var accessToken = new (0, _cognitoAccessTokenDefault.default)({
                AccessToken: this.storage.getItem(accessTokenKey)
            });
            var refreshToken = new (0, _cognitoRefreshTokenDefault.default)({
                RefreshToken: this.storage.getItem(refreshTokenKey)
            });
            var clockDrift = parseInt(this.storage.getItem(clockDriftKey), 0) || 0;
            var sessionData = {
                IdToken: idToken,
                AccessToken: accessToken,
                RefreshToken: refreshToken,
                ClockDrift: clockDrift
            };
            var cachedSession = new (0, _cognitoUserSessionDefault.default)(sessionData);
            if (cachedSession.isValid()) {
                this.signInUserSession = cachedSession;
                return callback(null, this.signInUserSession);
            }
            if (!refreshToken.getToken()) return callback(new Error("Cannot retrieve a new session. Please authenticate."), null);
            this.refreshSession(refreshToken, callback, options.clientMetadata);
        } else callback(new Error("Local storage is missing an ID Token, Please authenticate"), null);
        return undefined;
    } /**
   * This uses the refreshToken to retrieve a new session
   * @param {CognitoRefreshToken} refreshToken A previous session's refresh token.
   * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.
   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger
   * @returns {void}
   */ ;
    _proto.refreshSession = function refreshSession(refreshToken, callback, clientMetadata) {
        var _this15 = this;
        var wrappedCallback = this.pool.wrapRefreshSessionCallback ? this.pool.wrapRefreshSessionCallback(callback) : callback;
        var authParameters = {};
        authParameters.REFRESH_TOKEN = refreshToken.getToken();
        var keyPrefix = "CognitoIdentityServiceProvider." + this.pool.getClientId();
        var lastUserKey = keyPrefix + ".LastAuthUser";
        if (this.storage.getItem(lastUserKey)) {
            this.username = this.storage.getItem(lastUserKey);
            var deviceKeyKey = keyPrefix + "." + this.username + ".deviceKey";
            this.deviceKey = this.storage.getItem(deviceKeyKey);
            authParameters.DEVICE_KEY = this.deviceKey;
        }
        var jsonReq = {
            ClientId: this.pool.getClientId(),
            AuthFlow: "REFRESH_TOKEN_AUTH",
            AuthParameters: authParameters,
            ClientMetadata: clientMetadata
        };
        if (this.getUserContextData()) jsonReq.UserContextData = this.getUserContextData();
        this.client.request("InitiateAuth", jsonReq, function(err, authResult) {
            if (err) {
                if (err.code === "NotAuthorizedException") _this15.clearCachedUser();
                return wrappedCallback(err, null);
            }
            if (authResult) {
                var authenticationResult = authResult.AuthenticationResult;
                if (!Object.prototype.hasOwnProperty.call(authenticationResult, "RefreshToken")) authenticationResult.RefreshToken = refreshToken.getToken();
                _this15.signInUserSession = _this15.getCognitoUserSession(authenticationResult);
                _this15.cacheTokens();
                return wrappedCallback(null, _this15.signInUserSession);
            }
            return undefined;
        });
    } /**
   * This is used to save the session tokens to local storage
   * @returns {void}
   */ ;
    _proto.cacheTokens = function cacheTokens() {
        var keyPrefix = "CognitoIdentityServiceProvider." + this.pool.getClientId();
        var idTokenKey = keyPrefix + "." + this.username + ".idToken";
        var accessTokenKey = keyPrefix + "." + this.username + ".accessToken";
        var refreshTokenKey = keyPrefix + "." + this.username + ".refreshToken";
        var clockDriftKey = keyPrefix + "." + this.username + ".clockDrift";
        var lastUserKey = keyPrefix + ".LastAuthUser";
        this.storage.setItem(idTokenKey, this.signInUserSession.getIdToken().getJwtToken());
        this.storage.setItem(accessTokenKey, this.signInUserSession.getAccessToken().getJwtToken());
        this.storage.setItem(refreshTokenKey, this.signInUserSession.getRefreshToken().getToken());
        this.storage.setItem(clockDriftKey, "" + this.signInUserSession.getClockDrift());
        this.storage.setItem(lastUserKey, this.username);
    } /**
   * This is to cache user data
   */ ;
    _proto.cacheUserData = function cacheUserData(userData) {
        this.storage.setItem(this.userDataKey, JSON.stringify(userData));
    } /**
   * This is to remove cached user data
   */ ;
    _proto.clearCachedUserData = function clearCachedUserData() {
        this.storage.removeItem(this.userDataKey);
    };
    _proto.clearCachedUser = function clearCachedUser() {
        this.clearCachedTokens();
        this.clearCachedUserData();
    } /**
   * This is used to cache the device key and device group and device password
   * @returns {void}
   */ ;
    _proto.cacheDeviceKeyAndPassword = function cacheDeviceKeyAndPassword() {
        var keyPrefix = "CognitoIdentityServiceProvider." + this.pool.getClientId() + "." + this.username;
        var deviceKeyKey = keyPrefix + ".deviceKey";
        var randomPasswordKey = keyPrefix + ".randomPasswordKey";
        var deviceGroupKeyKey = keyPrefix + ".deviceGroupKey";
        this.storage.setItem(deviceKeyKey, this.deviceKey);
        this.storage.setItem(randomPasswordKey, this.randomPassword);
        this.storage.setItem(deviceGroupKeyKey, this.deviceGroupKey);
    } /**
   * This is used to get current device key and device group and device password
   * @returns {void}
   */ ;
    _proto.getCachedDeviceKeyAndPassword = function getCachedDeviceKeyAndPassword() {
        var keyPrefix = "CognitoIdentityServiceProvider." + this.pool.getClientId() + "." + this.username;
        var deviceKeyKey = keyPrefix + ".deviceKey";
        var randomPasswordKey = keyPrefix + ".randomPasswordKey";
        var deviceGroupKeyKey = keyPrefix + ".deviceGroupKey";
        if (this.storage.getItem(deviceKeyKey)) {
            this.deviceKey = this.storage.getItem(deviceKeyKey);
            this.randomPassword = this.storage.getItem(randomPasswordKey);
            this.deviceGroupKey = this.storage.getItem(deviceGroupKeyKey);
        }
    } /**
   * This is used to clear the device key info from local storage
   * @returns {void}
   */ ;
    _proto.clearCachedDeviceKeyAndPassword = function clearCachedDeviceKeyAndPassword() {
        var keyPrefix = "CognitoIdentityServiceProvider." + this.pool.getClientId() + "." + this.username;
        var deviceKeyKey = keyPrefix + ".deviceKey";
        var randomPasswordKey = keyPrefix + ".randomPasswordKey";
        var deviceGroupKeyKey = keyPrefix + ".deviceGroupKey";
        this.storage.removeItem(deviceKeyKey);
        this.storage.removeItem(randomPasswordKey);
        this.storage.removeItem(deviceGroupKeyKey);
    } /**
   * This is used to clear the session tokens from local storage
   * @returns {void}
   */ ;
    _proto.clearCachedTokens = function clearCachedTokens() {
        var keyPrefix = "CognitoIdentityServiceProvider." + this.pool.getClientId();
        var idTokenKey = keyPrefix + "." + this.username + ".idToken";
        var accessTokenKey = keyPrefix + "." + this.username + ".accessToken";
        var refreshTokenKey = keyPrefix + "." + this.username + ".refreshToken";
        var lastUserKey = keyPrefix + ".LastAuthUser";
        var clockDriftKey = keyPrefix + "." + this.username + ".clockDrift";
        this.storage.removeItem(idTokenKey);
        this.storage.removeItem(accessTokenKey);
        this.storage.removeItem(refreshTokenKey);
        this.storage.removeItem(lastUserKey);
        this.storage.removeItem(clockDriftKey);
    } /**
   * This is used to build a user session from tokens retrieved in the authentication result
   * @param {object} authResult Successful auth response from server.
   * @returns {CognitoUserSession} The new user session.
   * @private
   */ ;
    _proto.getCognitoUserSession = function getCognitoUserSession(authResult) {
        var idToken = new (0, _cognitoIdTokenDefault.default)(authResult);
        var accessToken = new (0, _cognitoAccessTokenDefault.default)(authResult);
        var refreshToken = new (0, _cognitoRefreshTokenDefault.default)(authResult);
        var sessionData = {
            IdToken: idToken,
            AccessToken: accessToken,
            RefreshToken: refreshToken
        };
        return new (0, _cognitoUserSessionDefault.default)(sessionData);
    } /**
   * This is used to initiate a forgot password request
   * @param {object} callback Result callback map.
   * @param {onFailure} callback.onFailure Called on any error.
   * @param {inputVerificationCode?} callback.inputVerificationCode
   *    Optional callback raised instead of onSuccess with response data.
   * @param {onSuccess} callback.onSuccess Called on success.
   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger
   * @returns {void}
   */ ;
    _proto.forgotPassword = function forgotPassword(callback, clientMetadata) {
        var jsonReq = {
            ClientId: this.pool.getClientId(),
            Username: this.username,
            ClientMetadata: clientMetadata
        };
        if (this.getUserContextData()) jsonReq.UserContextData = this.getUserContextData();
        this.client.request("ForgotPassword", jsonReq, function(err, data) {
            if (err) return callback.onFailure(err);
            if (typeof callback.inputVerificationCode === "function") return callback.inputVerificationCode(data);
            return callback.onSuccess(data);
        });
    } /**
   * This is used to confirm a new password using a confirmationCode
   * @param {string} confirmationCode Code entered by user.
   * @param {string} newPassword Confirm new password.
   * @param {object} callback Result callback map.
   * @param {onFailure} callback.onFailure Called on any error.
   * @param {onSuccess<void>} callback.onSuccess Called on success.
   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger
   * @returns {void}
   */ ;
    _proto.confirmPassword = function confirmPassword(confirmationCode, newPassword, callback, clientMetadata) {
        var jsonReq = {
            ClientId: this.pool.getClientId(),
            Username: this.username,
            ConfirmationCode: confirmationCode,
            Password: newPassword,
            ClientMetadata: clientMetadata
        };
        if (this.getUserContextData()) jsonReq.UserContextData = this.getUserContextData();
        this.client.request("ConfirmForgotPassword", jsonReq, function(err) {
            if (err) return callback.onFailure(err);
            return callback.onSuccess("SUCCESS");
        });
    } /**
   * This is used to initiate an attribute confirmation request
   * @param {string} attributeName User attribute that needs confirmation.
   * @param {object} callback Result callback map.
   * @param {onFailure} callback.onFailure Called on any error.
   * @param {inputVerificationCode} callback.inputVerificationCode Called on success.
   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger
   * @returns {void}
   */ ;
    _proto.getAttributeVerificationCode = function getAttributeVerificationCode(attributeName, callback, clientMetadata) {
        if (this.signInUserSession == null || !this.signInUserSession.isValid()) return callback.onFailure(new Error("User is not authenticated"));
        this.client.request("GetUserAttributeVerificationCode", {
            AttributeName: attributeName,
            AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
            ClientMetadata: clientMetadata
        }, function(err, data) {
            if (err) return callback.onFailure(err);
            if (typeof callback.inputVerificationCode === "function") return callback.inputVerificationCode(data);
            return callback.onSuccess("SUCCESS");
        });
        return undefined;
    } /**
   * This is used to confirm an attribute using a confirmation code
   * @param {string} attributeName Attribute being confirmed.
   * @param {string} confirmationCode Code entered by user.
   * @param {object} callback Result callback map.
   * @param {onFailure} callback.onFailure Called on any error.
   * @param {onSuccess<string>} callback.onSuccess Called on success.
   * @returns {void}
   */ ;
    _proto.verifyAttribute = function verifyAttribute(attributeName, confirmationCode, callback) {
        if (this.signInUserSession == null || !this.signInUserSession.isValid()) return callback.onFailure(new Error("User is not authenticated"));
        this.client.request("VerifyUserAttribute", {
            AttributeName: attributeName,
            Code: confirmationCode,
            AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
        }, function(err) {
            if (err) return callback.onFailure(err);
            return callback.onSuccess("SUCCESS");
        });
        return undefined;
    } /**
   * This is used to get the device information using the current device key
   * @param {object} callback Result callback map.
   * @param {onFailure} callback.onFailure Called on any error.
   * @param {onSuccess<*>} callback.onSuccess Called on success with device data.
   * @returns {void}
   */ ;
    _proto.getDevice = function getDevice(callback) {
        if (this.signInUserSession == null || !this.signInUserSession.isValid()) return callback.onFailure(new Error("User is not authenticated"));
        this.client.request("GetDevice", {
            AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
            DeviceKey: this.deviceKey
        }, function(err, data) {
            if (err) return callback.onFailure(err);
            return callback.onSuccess(data);
        });
        return undefined;
    } /**
   * This is used to forget a specific device
   * @param {string} deviceKey Device key.
   * @param {object} callback Result callback map.
   * @param {onFailure} callback.onFailure Called on any error.
   * @param {onSuccess<string>} callback.onSuccess Called on success.
   * @returns {void}
   */ ;
    _proto.forgetSpecificDevice = function forgetSpecificDevice(deviceKey, callback) {
        if (this.signInUserSession == null || !this.signInUserSession.isValid()) return callback.onFailure(new Error("User is not authenticated"));
        this.client.request("ForgetDevice", {
            AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
            DeviceKey: deviceKey
        }, function(err) {
            if (err) return callback.onFailure(err);
            return callback.onSuccess("SUCCESS");
        });
        return undefined;
    } /**
   * This is used to forget the current device
   * @param {object} callback Result callback map.
   * @param {onFailure} callback.onFailure Called on any error.
   * @param {onSuccess<string>} callback.onSuccess Called on success.
   * @returns {void}
   */ ;
    _proto.forgetDevice = function forgetDevice(callback) {
        var _this16 = this;
        this.forgetSpecificDevice(this.deviceKey, {
            onFailure: callback.onFailure,
            onSuccess: function onSuccess(result) {
                _this16.deviceKey = null;
                _this16.deviceGroupKey = null;
                _this16.randomPassword = null;
                _this16.clearCachedDeviceKeyAndPassword();
                return callback.onSuccess(result);
            }
        });
    } /**
   * This is used to set the device status as remembered
   * @param {object} callback Result callback map.
   * @param {onFailure} callback.onFailure Called on any error.
   * @param {onSuccess<string>} callback.onSuccess Called on success.
   * @returns {void}
   */ ;
    _proto.setDeviceStatusRemembered = function setDeviceStatusRemembered(callback) {
        if (this.signInUserSession == null || !this.signInUserSession.isValid()) return callback.onFailure(new Error("User is not authenticated"));
        this.client.request("UpdateDeviceStatus", {
            AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
            DeviceKey: this.deviceKey,
            DeviceRememberedStatus: "remembered"
        }, function(err) {
            if (err) return callback.onFailure(err);
            return callback.onSuccess("SUCCESS");
        });
        return undefined;
    } /**
   * This is used to set the device status as not remembered
   * @param {object} callback Result callback map.
   * @param {onFailure} callback.onFailure Called on any error.
   * @param {onSuccess<string>} callback.onSuccess Called on success.
   * @returns {void}
   */ ;
    _proto.setDeviceStatusNotRemembered = function setDeviceStatusNotRemembered(callback) {
        if (this.signInUserSession == null || !this.signInUserSession.isValid()) return callback.onFailure(new Error("User is not authenticated"));
        this.client.request("UpdateDeviceStatus", {
            AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
            DeviceKey: this.deviceKey,
            DeviceRememberedStatus: "not_remembered"
        }, function(err) {
            if (err) return callback.onFailure(err);
            return callback.onSuccess("SUCCESS");
        });
        return undefined;
    } /**
   * This is used to list all devices for a user
   *
   * @param {int} limit the number of devices returned in a call
   * @param {string | null} paginationToken the pagination token in case any was returned before
   * @param {object} callback Result callback map.
   * @param {onFailure} callback.onFailure Called on any error.
   * @param {onSuccess<*>} callback.onSuccess Called on success with device list.
   * @returns {void}
   */ ;
    _proto.listDevices = function listDevices(limit, paginationToken, callback) {
        if (this.signInUserSession == null || !this.signInUserSession.isValid()) return callback.onFailure(new Error("User is not authenticated"));
        var requestParams = {
            AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
            Limit: limit
        };
        if (paginationToken) requestParams.PaginationToken = paginationToken;
        this.client.request("ListDevices", requestParams, function(err, data) {
            if (err) return callback.onFailure(err);
            return callback.onSuccess(data);
        });
        return undefined;
    } /**
   * This is used to globally revoke all tokens issued to a user
   * @param {object} callback Result callback map.
   * @param {onFailure} callback.onFailure Called on any error.
   * @param {onSuccess<string>} callback.onSuccess Called on success.
   * @returns {void}
   */ ;
    _proto.globalSignOut = function globalSignOut(callback) {
        var _this17 = this;
        if (this.signInUserSession == null || !this.signInUserSession.isValid()) return callback.onFailure(new Error("User is not authenticated"));
        this.client.request("GlobalSignOut", {
            AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
        }, function(err) {
            if (err) return callback.onFailure(err);
            _this17.clearCachedUser();
            return callback.onSuccess("SUCCESS");
        });
        return undefined;
    } /**
   * This is used for the user to signOut of the application and clear the cached tokens.
   * @returns {void}
   */ ;
    _proto.signOut = function signOut(revokeTokenCallback) {
        var _this18 = this;
        // If tokens won't be revoked, we just clean the client data.
        if (!revokeTokenCallback || typeof revokeTokenCallback !== "function") {
            this.cleanClientData();
            return;
        }
        this.getSession(function(error, _session) {
            if (error) return revokeTokenCallback(error);
            _this18.revokeTokens(function(err) {
                _this18.cleanClientData();
                revokeTokenCallback(err);
            });
        });
    };
    _proto.revokeTokens = function revokeTokens(revokeTokenCallback) {
        if (revokeTokenCallback === void 0) revokeTokenCallback = function revokeTokenCallback() {};
        if (typeof revokeTokenCallback !== "function") throw new Error("Invalid revokeTokenCallback. It should be a function.");
        var tokensToBeRevoked = [];
        if (!this.signInUserSession) {
            var error = new Error("User is not authenticated");
            return revokeTokenCallback(error);
        }
        if (!this.signInUserSession.getAccessToken()) {
            var _error = new Error("No Access token available");
            return revokeTokenCallback(_error);
        }
        var refreshToken = this.signInUserSession.getRefreshToken().getToken();
        var accessToken = this.signInUserSession.getAccessToken();
        if (this.isSessionRevocable(accessToken)) {
            if (refreshToken) return this.revokeToken({
                token: refreshToken,
                callback: revokeTokenCallback
            });
        }
        revokeTokenCallback();
    };
    _proto.isSessionRevocable = function isSessionRevocable(token) {
        if (token && typeof token.decodePayload === "function") try {
            var _token$decodePayload = token.decodePayload(), origin_jti = _token$decodePayload.origin_jti;
            return !!origin_jti;
        } catch (err) {
        // Nothing to do, token doesnt have origin_jti claim
        }
        return false;
    };
    _proto.cleanClientData = function cleanClientData() {
        this.signInUserSession = null;
        this.clearCachedUser();
    };
    _proto.revokeToken = function revokeToken(_ref2) {
        var token = _ref2.token, callback = _ref2.callback;
        this.client.requestWithRetry("RevokeToken", {
            Token: token,
            ClientId: this.pool.getClientId()
        }, function(err) {
            if (err) return callback(err);
            callback();
        });
    } /**
   * This is used by a user trying to select a given MFA
   * @param {string} answerChallenge the mfa the user wants
   * @param {nodeCallback<string>} callback Called on success or error.
   * @returns {void}
   */ ;
    _proto.sendMFASelectionAnswer = function sendMFASelectionAnswer(answerChallenge, callback) {
        var _this19 = this;
        var challengeResponses = {};
        challengeResponses.USERNAME = this.username;
        challengeResponses.ANSWER = answerChallenge;
        var jsonReq = {
            ChallengeName: "SELECT_MFA_TYPE",
            ChallengeResponses: challengeResponses,
            ClientId: this.pool.getClientId(),
            Session: this.Session
        };
        if (this.getUserContextData()) jsonReq.UserContextData = this.getUserContextData();
        this.client.request("RespondToAuthChallenge", jsonReq, function(err, data) {
            if (err) return callback.onFailure(err);
            _this19.Session = data.Session;
            if (answerChallenge === "SMS_MFA") return callback.mfaRequired(data.ChallengeName, data.ChallengeParameters);
            if (answerChallenge === "SOFTWARE_TOKEN_MFA") return callback.totpRequired(data.ChallengeName, data.ChallengeParameters);
            return undefined;
        });
    } /**
   * This returns the user context data for advanced security feature.
   * @returns {string} the user context data from CognitoUserPool
   */ ;
    _proto.getUserContextData = function getUserContextData() {
        var pool = this.pool;
        return pool.getUserContextData(this.username);
    } /**
   * This is used by an authenticated or a user trying to authenticate to associate a TOTP MFA
   * @param {nodeCallback<string>} callback Called on success or error.
   * @returns {void}
   */ ;
    _proto.associateSoftwareToken = function associateSoftwareToken(callback) {
        var _this20 = this;
        if (!(this.signInUserSession != null && this.signInUserSession.isValid())) this.client.request("AssociateSoftwareToken", {
            Session: this.Session
        }, function(err, data) {
            if (err) return callback.onFailure(err);
            _this20.Session = data.Session;
            return callback.associateSecretCode(data.SecretCode);
        });
        else this.client.request("AssociateSoftwareToken", {
            AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
        }, function(err, data) {
            if (err) return callback.onFailure(err);
            return callback.associateSecretCode(data.SecretCode);
        });
    } /**
   * This is used by an authenticated or a user trying to authenticate to verify a TOTP MFA
   * @param {string} totpCode The MFA code entered by the user.
   * @param {string} friendlyDeviceName The device name we are assigning to the device.
   * @param {nodeCallback<string>} callback Called on success or error.
   * @returns {void}
   */ ;
    _proto.verifySoftwareToken = function verifySoftwareToken(totpCode, friendlyDeviceName, callback) {
        var _this21 = this;
        if (!(this.signInUserSession != null && this.signInUserSession.isValid())) this.client.request("VerifySoftwareToken", {
            Session: this.Session,
            UserCode: totpCode,
            FriendlyDeviceName: friendlyDeviceName
        }, function(err, data) {
            if (err) return callback.onFailure(err);
            _this21.Session = data.Session;
            var challengeResponses = {};
            challengeResponses.USERNAME = _this21.username;
            var jsonReq = {
                ChallengeName: "MFA_SETUP",
                ClientId: _this21.pool.getClientId(),
                ChallengeResponses: challengeResponses,
                Session: _this21.Session
            };
            if (_this21.getUserContextData()) jsonReq.UserContextData = _this21.getUserContextData();
            _this21.client.request("RespondToAuthChallenge", jsonReq, function(errRespond, dataRespond) {
                if (errRespond) return callback.onFailure(errRespond);
                _this21.signInUserSession = _this21.getCognitoUserSession(dataRespond.AuthenticationResult);
                _this21.cacheTokens();
                return callback.onSuccess(_this21.signInUserSession);
            });
            return undefined;
        });
        else this.client.request("VerifySoftwareToken", {
            AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
            UserCode: totpCode,
            FriendlyDeviceName: friendlyDeviceName
        }, function(err, data) {
            if (err) return callback.onFailure(err);
            return callback.onSuccess(data);
        });
    };
    return CognitoUser;
}();

},{"buffer":"fCgem","@aws-crypto/sha256-js":"fXmvu","./Platform":"6v7mG","./BigInteger":"iUmkO","./AuthenticationHelper":"9Wq2x","./CognitoAccessToken":"dojqu","./CognitoIdToken":"7Exnm","./CognitoRefreshToken":"3nCMJ","./CognitoUserSession":"1kQ4I","./DateHelper":"93GWr","./CognitoUserAttribute":"jk8tg","./StorageHelper":"jOffj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6v7mG":[function(require,module,exports) {
/*!
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Platform", ()=>Platform);
parcelHelpers.export(exports, "getUserAgent", ()=>getUserAgent);
var _version = require("./version");
var BASE_USER_AGENT = "aws-amplify/" + (0, _version.version);
var Platform = {
    userAgent: BASE_USER_AGENT + " js",
    product: "",
    navigator: null,
    isReactNative: false
};
if (typeof navigator !== "undefined" && navigator.product) {
    Platform.product = navigator.product || "";
    Platform.navigator = navigator || null;
    switch(navigator.product){
        case "ReactNative":
            Platform.userAgent = BASE_USER_AGENT + " react-native";
            Platform.isReactNative = true;
            break;
        default:
            Platform.userAgent = BASE_USER_AGENT + " js";
            Platform.isReactNative = false;
            break;
    }
}
var getUserAgent = function getUserAgent() {
    return Platform.userAgent;
};
/**
 * @deprecated use named import
 */ exports.default = Platform;

},{"./version":"4uxNS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4uxNS":[function(require,module,exports) {
// generated by genversion
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "version", ()=>version);
var version = "5.0.4";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1kQ4I":[function(require,module,exports) {
/*!
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */ /** @class */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>CognitoUserSession);
var CognitoUserSession = /*#__PURE__*/ function() {
    /**
   * Constructs a new CognitoUserSession object
   * @param {CognitoIdToken} IdToken The session's Id token.
   * @param {CognitoRefreshToken=} RefreshToken The session's refresh token.
   * @param {CognitoAccessToken} AccessToken The session's access token.
   * @param {int} ClockDrift The saved computer's clock drift or undefined to force calculation.
   */ function CognitoUserSession(_temp) {
        var _ref = _temp === void 0 ? {} : _temp, IdToken = _ref.IdToken, RefreshToken = _ref.RefreshToken, AccessToken = _ref.AccessToken, ClockDrift = _ref.ClockDrift;
        if (AccessToken == null || IdToken == null) throw new Error("Id token and Access Token must be present.");
        this.idToken = IdToken;
        this.refreshToken = RefreshToken;
        this.accessToken = AccessToken;
        this.clockDrift = ClockDrift === undefined ? this.calculateClockDrift() : ClockDrift;
    }
    /**
   * @returns {CognitoIdToken} the session's Id token
   */ var _proto = CognitoUserSession.prototype;
    _proto.getIdToken = function getIdToken() {
        return this.idToken;
    } /**
   * @returns {CognitoRefreshToken} the session's refresh token
   */ ;
    _proto.getRefreshToken = function getRefreshToken() {
        return this.refreshToken;
    } /**
   * @returns {CognitoAccessToken} the session's access token
   */ ;
    _proto.getAccessToken = function getAccessToken() {
        return this.accessToken;
    } /**
   * @returns {int} the session's clock drift
   */ ;
    _proto.getClockDrift = function getClockDrift() {
        return this.clockDrift;
    } /**
   * @returns {int} the computer's clock drift
   */ ;
    _proto.calculateClockDrift = function calculateClockDrift() {
        var now = Math.floor(new Date() / 1000);
        var iat = Math.min(this.accessToken.getIssuedAt(), this.idToken.getIssuedAt());
        return now - iat;
    } /**
   * Checks to see if the session is still valid based on session expiry information found
   * in tokens and the current time (adjusted with clock drift)
   * @returns {boolean} if the session is still valid
   */ ;
    _proto.isValid = function isValid() {
        var now = Math.floor(new Date() / 1000);
        var adjusted = now - this.clockDrift;
        return adjusted < this.accessToken.getExpiration() && adjusted < this.idToken.getExpiration();
    };
    return CognitoUserSession;
}();

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"93GWr":[function(require,module,exports) {
/*!
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>DateHelper);
var monthNames = [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Oct",
    "Nov",
    "Dec"
];
var weekNames = [
    "Sun",
    "Mon",
    "Tue",
    "Wed",
    "Thu",
    "Fri",
    "Sat"
];
/** @class */ var DateHelper = /*#__PURE__*/ function() {
    function DateHelper() {}
    var _proto = DateHelper.prototype;
    /**
   * @returns {string} The current time in "ddd MMM D HH:mm:ss UTC YYYY" format.
   */ _proto.getNowString = function getNowString() {
        var now = new Date();
        var weekDay = weekNames[now.getUTCDay()];
        var month = monthNames[now.getUTCMonth()];
        var day = now.getUTCDate();
        var hours = now.getUTCHours();
        if (hours < 10) hours = "0" + hours;
        var minutes = now.getUTCMinutes();
        if (minutes < 10) minutes = "0" + minutes;
        var seconds = now.getUTCSeconds();
        if (seconds < 10) seconds = "0" + seconds;
        var year = now.getUTCFullYear();
        // ddd MMM D HH:mm:ss UTC YYYY
        var dateNow = weekDay + " " + month + " " + day + " " + hours + ":" + minutes + ":" + seconds + " UTC " + year;
        return dateNow;
    };
    return DateHelper;
}();

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jk8tg":[function(require,module,exports) {
/*!
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */ /** @class */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>CognitoUserAttribute);
var CognitoUserAttribute = /*#__PURE__*/ function() {
    /**
   * Constructs a new CognitoUserAttribute object
   * @param {string=} Name The record's name
   * @param {string=} Value The record's value
   */ function CognitoUserAttribute(_temp) {
        var _ref = _temp === void 0 ? {} : _temp, Name = _ref.Name, Value = _ref.Value;
        this.Name = Name || "";
        this.Value = Value || "";
    }
    /**
   * @returns {string} the record's value.
   */ var _proto = CognitoUserAttribute.prototype;
    _proto.getValue = function getValue() {
        return this.Value;
    } /**
   * Sets the record's value.
   * @param {string} value The new value.
   * @returns {CognitoUserAttribute} The record for method chaining.
   */ ;
    _proto.setValue = function setValue(value) {
        this.Value = value;
        return this;
    } /**
   * @returns {string} the record's name.
   */ ;
    _proto.getName = function getName() {
        return this.Name;
    } /**
   * Sets the record's name
   * @param {string} name The new name.
   * @returns {CognitoUserAttribute} The record for method chaining.
   */ ;
    _proto.setName = function setName(name) {
        this.Name = name;
        return this;
    } /**
   * @returns {string} a string representation of the record.
   */ ;
    _proto.toString = function toString() {
        return JSON.stringify(this);
    } /**
   * @returns {object} a flat object representing the record.
   */ ;
    _proto.toJSON = function toJSON() {
        return {
            Name: this.Name,
            Value: this.Value
        };
    };
    return CognitoUserAttribute;
}();

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jOffj":[function(require,module,exports) {
/*!
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MemoryStorage", ()=>MemoryStorage);
parcelHelpers.export(exports, "default", ()=>StorageHelper);
var dataMemory = {};
var MemoryStorage = /*#__PURE__*/ function() {
    function MemoryStorage() {}
    /**
   * This is used to set a specific item in storage
   * @param {string} key - the key for the item
   * @param {object} value - the value
   * @returns {string} value that was set
   */ MemoryStorage.setItem = function setItem(key, value) {
        dataMemory[key] = value;
        return dataMemory[key];
    } /**
   * This is used to get a specific key from storage
   * @param {string} key - the key for the item
   * This is used to clear the storage
   * @returns {string} the data item
   */ ;
    MemoryStorage.getItem = function getItem(key) {
        return Object.prototype.hasOwnProperty.call(dataMemory, key) ? dataMemory[key] : undefined;
    } /**
   * This is used to remove an item from storage
   * @param {string} key - the key being set
   * @returns {boolean} return true
   */ ;
    MemoryStorage.removeItem = function removeItem(key) {
        return delete dataMemory[key];
    } /**
   * This is used to clear the storage
   * @returns {string} nothing
   */ ;
    MemoryStorage.clear = function clear() {
        dataMemory = {};
        return dataMemory;
    };
    return MemoryStorage;
}();
/** @class */ var StorageHelper = /*#__PURE__*/ function() {
    /**
   * This is used to get a storage object
   * @returns {object} the storage
   */ function StorageHelper() {
        try {
            this.storageWindow = window.localStorage;
            this.storageWindow.setItem("aws.cognito.test-ls", 1);
            this.storageWindow.removeItem("aws.cognito.test-ls");
        } catch (exception) {
            this.storageWindow = MemoryStorage;
        }
    }
    /**
   * This is used to return the storage
   * @returns {object} the storage
   */ var _proto = StorageHelper.prototype;
    _proto.getStorage = function getStorage() {
        return this.storageWindow;
    };
    return StorageHelper;
}();

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8MOGu":[function(require,module,exports) {
/*!
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>CognitoUserPool);
var _client = require("./Client");
var _clientDefault = parcelHelpers.interopDefault(_client);
var _cognitoUser = require("./CognitoUser");
var _cognitoUserDefault = parcelHelpers.interopDefault(_cognitoUser);
var _storageHelper = require("./StorageHelper");
var _storageHelperDefault = parcelHelpers.interopDefault(_storageHelper);
var USER_POOL_ID_MAX_LENGTH = 55;
/** @class */ var CognitoUserPool = /*#__PURE__*/ function() {
    /**
   * Constructs a new CognitoUserPool object
   * @param {object} data Creation options.
   * @param {string} data.UserPoolId Cognito user pool id.
   * @param {string} data.ClientId User pool application client id.
   * @param {string} data.endpoint Optional custom service endpoint.
   * @param {object} data.fetchOptions Optional options for fetch API.
   *        (only credentials option is supported)
   * @param {object} data.Storage Optional storage object.
   * @param {boolean} data.AdvancedSecurityDataCollectionFlag Optional:
   *        boolean flag indicating if the data collection is enabled
   *        to support cognito advanced security features. By default, this
   *        flag is set to true.
   */ function CognitoUserPool(data, wrapRefreshSessionCallback) {
        var _ref = data || {}, UserPoolId = _ref.UserPoolId, ClientId = _ref.ClientId, endpoint = _ref.endpoint, fetchOptions = _ref.fetchOptions, AdvancedSecurityDataCollectionFlag = _ref.AdvancedSecurityDataCollectionFlag;
        if (!UserPoolId || !ClientId) throw new Error("Both UserPoolId and ClientId are required.");
        if (UserPoolId.length > USER_POOL_ID_MAX_LENGTH || !/^[\w-]+_[0-9a-zA-Z]+$/.test(UserPoolId)) throw new Error("Invalid UserPoolId format.");
        var region = UserPoolId.split("_")[0];
        this.userPoolId = UserPoolId;
        this.clientId = ClientId;
        this.client = new (0, _clientDefault.default)(region, endpoint, fetchOptions);
        /**
     * By default, AdvancedSecurityDataCollectionFlag is set to true,
     * if no input value is provided.
     */ this.advancedSecurityDataCollectionFlag = AdvancedSecurityDataCollectionFlag !== false;
        this.storage = data.Storage || new (0, _storageHelperDefault.default)().getStorage();
        if (wrapRefreshSessionCallback) this.wrapRefreshSessionCallback = wrapRefreshSessionCallback;
    }
    /**
   * @returns {string} the user pool id
   */ var _proto = CognitoUserPool.prototype;
    _proto.getUserPoolId = function getUserPoolId() {
        return this.userPoolId;
    } /**
   * @returns {string} the user pool name
   */ ;
    _proto.getUserPoolName = function getUserPoolName() {
        return this.getUserPoolId().split("_")[1];
    } /**
   * @returns {string} the client id
   */ ;
    _proto.getClientId = function getClientId() {
        return this.clientId;
    } /**
   * method for signing up a user
   * @param {string} username User's username.
   * @param {string} password Plain-text initial password entered by user.
   * @param {(AttributeArg[])=} userAttributes New user attributes.
   * @param {(AttributeArg[])=} validationData Application metadata.
   * @param {(AttributeArg[])=} clientMetadata Client metadata.
   * @param {nodeCallback<SignUpResult>} callback Called on error or with the new user.
   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger
   * @returns {void}
   */ ;
    _proto.signUp = function signUp(username, password, userAttributes, validationData, callback, clientMetadata) {
        var _this = this;
        var jsonReq = {
            ClientId: this.clientId,
            Username: username,
            Password: password,
            UserAttributes: userAttributes,
            ValidationData: validationData,
            ClientMetadata: clientMetadata
        };
        if (this.getUserContextData(username)) jsonReq.UserContextData = this.getUserContextData(username);
        this.client.request("SignUp", jsonReq, function(err, data) {
            if (err) return callback(err, null);
            var cognitoUser = {
                Username: username,
                Pool: _this,
                Storage: _this.storage
            };
            var returnData = {
                user: new (0, _cognitoUserDefault.default)(cognitoUser),
                userConfirmed: data.UserConfirmed,
                userSub: data.UserSub,
                codeDeliveryDetails: data.CodeDeliveryDetails
            };
            return callback(null, returnData);
        });
    } /**
   * method for getting the current user of the application from the local storage
   *
   * @returns {CognitoUser} the user retrieved from storage
   */ ;
    _proto.getCurrentUser = function getCurrentUser() {
        var lastUserKey = "CognitoIdentityServiceProvider." + this.clientId + ".LastAuthUser";
        var lastAuthUser = this.storage.getItem(lastUserKey);
        if (lastAuthUser) {
            var cognitoUser = {
                Username: lastAuthUser,
                Pool: this,
                Storage: this.storage
            };
            return new (0, _cognitoUserDefault.default)(cognitoUser);
        }
        return null;
    } /**
   * This method returns the encoded data string used for cognito advanced security feature.
   * This would be generated only when developer has included the JS used for collecting the
   * data on their client. Please refer to documentation to know more about using AdvancedSecurity
   * features
   * @param {string} username the username for the context data
   * @returns {string} the user context data
   **/ ;
    _proto.getUserContextData = function getUserContextData(username) {
        if (typeof AmazonCognitoAdvancedSecurityData === "undefined") return undefined;
        /* eslint-disable */ var amazonCognitoAdvancedSecurityDataConst = AmazonCognitoAdvancedSecurityData;
        /* eslint-enable */ if (this.advancedSecurityDataCollectionFlag) {
            var advancedSecurityData = amazonCognitoAdvancedSecurityDataConst.getData(username, this.userPoolId, this.clientId);
            if (advancedSecurityData) {
                var userContextData = {
                    EncodedData: advancedSecurityData
                };
                return userContextData;
            }
        }
        return {};
    };
    return CognitoUserPool;
}();

},{"./Client":"hwr8E","./CognitoUser":"cbaip","./StorageHelper":"jOffj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hwr8E":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>Client);
var _isomorphicUnfetch = require("isomorphic-unfetch");
var _userAgent = require("./UserAgent");
var _userAgentDefault = parcelHelpers.interopDefault(_userAgent);
function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    _setPrototypeOf(subClass, superClass);
}
function _wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;
    _wrapNativeSuper = function _wrapNativeSuper(Class) {
        if (Class === null || !_isNativeFunction(Class)) return Class;
        if (typeof Class !== "function") throw new TypeError("Super expression must either be null or a function");
        if (typeof _cache !== "undefined") {
            if (_cache.has(Class)) return _cache.get(Class);
            _cache.set(Class, Wrapper);
        }
        function Wrapper() {
            return _construct(Class, arguments, _getPrototypeOf(this).constructor);
        }
        Wrapper.prototype = Object.create(Class.prototype, {
            constructor: {
                value: Wrapper,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        return _setPrototypeOf(Wrapper, Class);
    };
    return _wrapNativeSuper(Class);
}
function _construct(Parent, args, Class) {
    if (_isNativeReflectConstruct()) _construct = Reflect.construct.bind();
    else _construct = function _construct(Parent, args, Class) {
        var a = [
            null
        ];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a);
        var instance = new Constructor();
        if (Class) _setPrototypeOf(instance, Class.prototype);
        return instance;
    };
    return _construct.apply(null, arguments);
}
function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
function _isNativeFunction(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
}
function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _setPrototypeOf(o, p);
}
function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
}
var CognitoError = /*#__PURE__*/ function(_Error) {
    _inheritsLoose(CognitoError, _Error);
    function CognitoError(message, code, name, statusCode) {
        var _this;
        _this = _Error.call(this, message) || this;
        _this.code = code;
        _this.name = name;
        _this.statusCode = statusCode;
        return _this;
    }
    return CognitoError;
}(/*#__PURE__*/ _wrapNativeSuper(Error));
/** @class */ var Client = /*#__PURE__*/ function() {
    /**
   * Constructs a new AWS Cognito Identity Provider client object
   * @param {string} region AWS region
   * @param {string} endpoint endpoint
   * @param {object} fetchOptions options for fetch API (only credentials is supported)
   */ function Client(region, endpoint, fetchOptions) {
        this.endpoint = endpoint || "https://cognito-idp." + region + ".amazonaws.com/";
        var _ref = fetchOptions || {}, credentials = _ref.credentials;
        this.fetchOptions = credentials ? {
            credentials: credentials
        } : {};
    }
    /**
   * Makes an unauthenticated request on AWS Cognito Identity Provider API
   * using fetch
   * @param {string} operation API operation
   * @param {object} params Input parameters
   * @returns Promise<object>
   */ var _proto = Client.prototype;
    _proto.promisifyRequest = function promisifyRequest(operation, params) {
        var _this2 = this;
        return new Promise(function(resolve, reject) {
            _this2.request(operation, params, function(err, data) {
                if (err) reject(new CognitoError(err.message, err.code, err.name, err.statusCode));
                else resolve(data);
            });
        });
    };
    _proto.requestWithRetry = function requestWithRetry(operation, params, callback) {
        var _this3 = this;
        var MAX_DELAY_IN_MILLIS = 5000;
        jitteredExponentialRetry(function(p) {
            return new Promise(function(res, rej) {
                _this3.request(operation, p, function(error, result) {
                    if (error) rej(error);
                    else res(result);
                });
            });
        }, [
            params
        ], MAX_DELAY_IN_MILLIS).then(function(result) {
            return callback(null, result);
        })["catch"](function(error) {
            return callback(error);
        });
    } /**
   * Makes an unauthenticated request on AWS Cognito Identity Provider API
   * using fetch
   * @param {string} operation API operation
   * @param {object} params Input parameters
   * @param {function} callback Callback called when a response is returned
   * @returns {void}
   */ ;
    _proto.request = function request(operation, params, callback) {
        var headers = {
            "Content-Type": "application/x-amz-json-1.1",
            "X-Amz-Target": "AWSCognitoIdentityProviderService." + operation,
            "X-Amz-User-Agent": (0, _userAgentDefault.default).prototype.userAgent,
            "Cache-Control": "no-store"
        };
        var options = Object.assign({}, this.fetchOptions, {
            headers: headers,
            method: "POST",
            mode: "cors",
            body: JSON.stringify(params)
        });
        var response;
        var responseJsonData;
        fetch(this.endpoint, options).then(function(resp) {
            response = resp;
            return resp;
        }, function(err) {
            // If error happens here, the request failed
            // if it is TypeError throw network error
            if (err instanceof TypeError) throw new Error("Network error");
            throw err;
        }).then(function(resp) {
            return resp.json()["catch"](function() {
                return {};
            });
        }).then(function(data) {
            // return parsed body stream
            if (response.ok) return callback(null, data);
            responseJsonData = data;
            // Taken from aws-sdk-js/lib/protocol/json.js
            // eslint-disable-next-line no-underscore-dangle
            var code = (data.__type || data.code).split("#").pop();
            var error = new Error(data.message || data.Message || null);
            error.name = code;
            error.code = code;
            return callback(error);
        })["catch"](function(err) {
            // first check if we have a service error
            if (response && response.headers && response.headers.get("x-amzn-errortype")) try {
                var code = response.headers.get("x-amzn-errortype").split(":")[0];
                var error = new Error(response.status ? response.status.toString() : null);
                error.code = code;
                error.name = code;
                error.statusCode = response.status;
                return callback(error);
            } catch (ex) {
                return callback(err);
            }
            else if (err instanceof Error && err.message === "Network error") err.code = "NetworkError";
            return callback(err);
        });
    };
    return Client;
}();
var logger = {
    debug: function debug() {
    // Intentionally blank. This package doesn't have logging
    }
};
/**
 * For now, all errors are retryable.
 */ var NonRetryableError = /*#__PURE__*/ function(_Error2) {
    _inheritsLoose(NonRetryableError, _Error2);
    function NonRetryableError(message) {
        var _this4;
        _this4 = _Error2.call(this, message) || this;
        _this4.nonRetryable = true;
        return _this4;
    }
    return NonRetryableError;
}(/*#__PURE__*/ _wrapNativeSuper(Error));
var isNonRetryableError = function isNonRetryableError(obj) {
    var key = "nonRetryable";
    return obj && obj[key];
};
function retry(functionToRetry, args, delayFn, attempt) {
    if (attempt === void 0) attempt = 1;
    if (typeof functionToRetry !== "function") throw Error("functionToRetry must be a function");
    logger.debug(functionToRetry.name + " attempt #" + attempt + " with args: " + JSON.stringify(args));
    return functionToRetry.apply(void 0, args)["catch"](function(err) {
        logger.debug("error on " + functionToRetry.name, err);
        if (isNonRetryableError(err)) {
            logger.debug(functionToRetry.name + " non retryable error", err);
            throw err;
        }
        var retryIn = delayFn(attempt, args, err);
        logger.debug(functionToRetry.name + " retrying in " + retryIn + " ms");
        if (retryIn !== false) return new Promise(function(res) {
            return setTimeout(res, retryIn);
        }).then(function() {
            return retry(functionToRetry, args, delayFn, attempt + 1);
        });
        else throw err;
    });
}
function jitteredBackoff(maxDelayMs) {
    var BASE_TIME_MS = 100;
    var JITTER_FACTOR = 100;
    return function(attempt) {
        var delay = Math.pow(2, attempt) * BASE_TIME_MS + JITTER_FACTOR * Math.random();
        return delay > maxDelayMs ? false : delay;
    };
}
var MAX_DELAY_MS = 300000;
function jitteredExponentialRetry(functionToRetry, args, maxDelayMs) {
    if (maxDelayMs === void 0) maxDelayMs = MAX_DELAY_MS;
    return retry(functionToRetry, args, jitteredBackoff(maxDelayMs));
}

},{"isomorphic-unfetch":"7ubfS","./UserAgent":"a9rVz","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7ubfS":[function(require,module,exports) {
module.exports = self.fetch || (self.fetch = require("a8e70f6bfd6fa85a").default || require("a8e70f6bfd6fa85a"));

},{"a8e70f6bfd6fa85a":"6OTEM"}],"6OTEM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(e, n) {
    return n = n || {}, new Promise(function(t, r) {
        var s = new XMLHttpRequest, o = [], u = [], i = {}, a = function() {
            return {
                ok: 2 == (s.status / 100 | 0),
                statusText: s.statusText,
                status: s.status,
                url: s.responseURL,
                text: function() {
                    return Promise.resolve(s.responseText);
                },
                json: function() {
                    return Promise.resolve(s.responseText).then(JSON.parse);
                },
                blob: function() {
                    return Promise.resolve(new Blob([
                        s.response
                    ]));
                },
                clone: a,
                headers: {
                    keys: function() {
                        return o;
                    },
                    entries: function() {
                        return u;
                    },
                    get: function(e) {
                        return i[e.toLowerCase()];
                    },
                    has: function(e) {
                        return e.toLowerCase() in i;
                    }
                }
            };
        };
        for(var l in s.open(n.method || "get", e, !0), s.onload = function() {
            s.getAllResponseHeaders().replace(/^(.*?):[^\S\n]*([\s\S]*?)$/gm, function(e, n, t) {
                o.push(n = n.toLowerCase()), u.push([
                    n,
                    t
                ]), i[n] = i[n] ? i[n] + "," + t : t;
            }), t(a());
        }, s.onerror = r, s.withCredentials = "include" == n.credentials, n.headers)s.setRequestHeader(l, n.headers[l]);
        s.send(n.body || null);
    });
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a9rVz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "appendToCognitoUserAgent", ()=>appendToCognitoUserAgent);
var _platform = require("./Platform");
// constructor
function UserAgent() {}
// public
UserAgent.prototype.userAgent = (0, _platform.getUserAgent)();
var appendToCognitoUserAgent = function appendToCognitoUserAgent(content) {
    if (!content) return;
    if (UserAgent.prototype.userAgent && !UserAgent.prototype.userAgent.includes(content)) UserAgent.prototype.userAgent = UserAgent.prototype.userAgent.concat(" ", content);
    if (!UserAgent.prototype.userAgent || UserAgent.prototype.userAgent === "") UserAgent.prototype.userAgent = content;
};
// class for defining the amzn user-agent
exports.default = UserAgent;

},{"./Platform":"6v7mG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7YjE8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>CookieStorage);
var _jsCookie = require("js-cookie");
/** @class */ var CookieStorage = /*#__PURE__*/ function() {
    /**
   * Constructs a new CookieStorage object
   * @param {object} data Creation options.
   * @param {string} data.domain Cookies domain (default: domain of the page
   * 				where the cookie was created, excluding subdomains)
   * @param {string} data.path Cookies path (default: '/')
   * @param {integer} data.expires Cookie expiration (in days, default: 365)
   * @param {boolean} data.secure Cookie secure flag (default: true)
   * @param {string} data.sameSite Cookie request behavior (default: null)
   */ function CookieStorage(data) {
        if (data === void 0) data = {};
        if (data.domain) this.domain = data.domain;
        if (data.path) this.path = data.path;
        else this.path = "/";
        if (Object.prototype.hasOwnProperty.call(data, "expires")) this.expires = data.expires;
        else this.expires = 365;
        if (Object.prototype.hasOwnProperty.call(data, "secure")) this.secure = data.secure;
        else this.secure = true;
        if (Object.prototype.hasOwnProperty.call(data, "sameSite")) {
            if (![
                "strict",
                "lax",
                "none"
            ].includes(data.sameSite)) throw new Error('The sameSite value of cookieStorage must be "lax", "strict" or "none".');
            if (data.sameSite === "none" && !this.secure) throw new Error("sameSite = None requires the Secure attribute in latest browser versions.");
            this.sameSite = data.sameSite;
        } else this.sameSite = null;
    }
    /**
   * This is used to set a specific item in storage
   * @param {string} key - the key for the item
   * @param {object} value - the value
   * @returns {string} value that was set
   */ var _proto = CookieStorage.prototype;
    _proto.setItem = function setItem(key, value) {
        var options = {
            path: this.path,
            expires: this.expires,
            domain: this.domain,
            secure: this.secure
        };
        if (this.sameSite) options.sameSite = this.sameSite;
        _jsCookie.set(key, value, options);
        return _jsCookie.get(key);
    } /**
   * This is used to get a specific key from storage
   * @param {string} key - the key for the item
   * This is used to clear the storage
   * @returns {string} the data item
   */ ;
    _proto.getItem = function getItem(key) {
        return _jsCookie.get(key);
    } /**
   * This is used to remove an item from storage
   * @param {string} key - the key being set
   * @returns {string} value - value that was deleted
   */ ;
    _proto.removeItem = function removeItem(key) {
        var options = {
            path: this.path,
            expires: this.expires,
            domain: this.domain,
            secure: this.secure
        };
        if (this.sameSite) options.sameSite = this.sameSite;
        return _jsCookie.remove(key, options);
    } /**
   * This is used to clear the storage of optional
   * items that were previously set
   * @returns {} an empty object
   */ ;
    _proto.clear = function clear() {
        var cookies = _jsCookie.get();
        var numKeys = Object.keys(cookies).length;
        for(var index = 0; index < numKeys; ++index)this.removeItem(Object.keys(cookies)[index]);
        return {};
    };
    return CookieStorage;
}();

},{"js-cookie":"491w8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"491w8":[function(require,module,exports) {
(function(factory) {
    var registeredInModuleLoader;
    if (typeof define === "function" && define.amd) {
        define(factory);
        registeredInModuleLoader = true;
    }
    module.exports = factory();
    registeredInModuleLoader = true;
    if (!registeredInModuleLoader) {
        var OldCookies = window.Cookies;
        var api = window.Cookies = factory();
        api.noConflict = function() {
            window.Cookies = OldCookies;
            return api;
        };
    }
})(function() {
    function extend() {
        var i = 0;
        var result = {};
        for(; i < arguments.length; i++){
            var attributes = arguments[i];
            for(var key in attributes)result[key] = attributes[key];
        }
        return result;
    }
    function decode(s) {
        return s.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);
    }
    function init(converter) {
        function api() {}
        function set(key, value, attributes) {
            if (typeof document === "undefined") return;
            attributes = extend({
                path: "/"
            }, api.defaults, attributes);
            if (typeof attributes.expires === "number") attributes.expires = new Date(new Date() * 1 + attributes.expires * 864e+5);
            // We're using "expires" because "max-age" is not supported by IE
            attributes.expires = attributes.expires ? attributes.expires.toUTCString() : "";
            try {
                var result = JSON.stringify(value);
                if (/^[\{\[]/.test(result)) value = result;
            } catch (e) {}
            value = converter.write ? converter.write(value, key) : encodeURIComponent(String(value)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
            key = encodeURIComponent(String(key)).replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent).replace(/[\(\)]/g, escape);
            var stringifiedAttributes = "";
            for(var attributeName in attributes){
                if (!attributes[attributeName]) continue;
                stringifiedAttributes += "; " + attributeName;
                if (attributes[attributeName] === true) continue;
                // Considers RFC 6265 section 5.2:
                // ...
                // 3.  If the remaining unparsed-attributes contains a %x3B (";")
                //     character:
                // Consume the characters of the unparsed-attributes up to,
                // not including, the first %x3B (";") character.
                // ...
                stringifiedAttributes += "=" + attributes[attributeName].split(";")[0];
            }
            return document.cookie = key + "=" + value + stringifiedAttributes;
        }
        function get(key, json) {
            if (typeof document === "undefined") return;
            var jar = {};
            // To prevent the for loop in the first place assign an empty array
            // in case there are no cookies at all.
            var cookies = document.cookie ? document.cookie.split("; ") : [];
            var i = 0;
            for(; i < cookies.length; i++){
                var parts = cookies[i].split("=");
                var cookie = parts.slice(1).join("=");
                if (!json && cookie.charAt(0) === '"') cookie = cookie.slice(1, -1);
                try {
                    var name = decode(parts[0]);
                    cookie = (converter.read || converter)(cookie, name) || decode(cookie);
                    if (json) try {
                        cookie = JSON.parse(cookie);
                    } catch (e) {}
                    jar[name] = cookie;
                    if (key === name) break;
                } catch (e) {}
            }
            return key ? jar[key] : jar;
        }
        api.set = set;
        api.get = function(key) {
            return get(key, false);
        };
        api.getJSON = function(key) {
            return get(key, true);
        };
        api.remove = function(key, attributes) {
            set(key, "", extend(attributes, {
                expires: -1
            }));
        };
        api.defaults = {};
        api.withConverter = init;
        return api;
    }
    return init(function() {});
});

},{}],"7qjc7":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
"use strict";
var punycode = require("18f46ef94f4b06ad");
var util = require("24d8f36536929e9");
exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;
exports.Url = Url;
function Url() {
    this.protocol = null;
    this.slashes = null;
    this.auth = null;
    this.host = null;
    this.port = null;
    this.hostname = null;
    this.hash = null;
    this.search = null;
    this.query = null;
    this.pathname = null;
    this.path = null;
    this.href = null;
}
// Reference: RFC 3986, RFC 1808, RFC 2396
// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i, portPattern = /:[0-9]*$/, // Special case for a simple path URL
simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/, // RFC 2396: characters reserved for delimiting URLs.
// We actually just auto-escape these.
delims = [
    "<",
    ">",
    '"',
    "`",
    " ",
    "\r",
    "\n",
    "	"
], // RFC 2396: characters not allowed for various reasons.
unwise = [
    "{",
    "}",
    "|",
    "\\",
    "^",
    "`"
].concat(delims), // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
autoEscape = [
    "'"
].concat(unwise), // Characters that are never ever allowed in a hostname.
// Note that any invalid chars are also handled, but these
// are the ones that are *expected* to be seen, so we fast-path
// them.
nonHostChars = [
    "%",
    "/",
    "?",
    ";",
    "#"
].concat(autoEscape), hostEndingChars = [
    "/",
    "?",
    "#"
], hostnameMaxLen = 255, hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/, hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/, // protocols that can allow "unsafe" and "unwise" chars.
unsafeProtocol = {
    "javascript": true,
    "javascript:": true
}, // protocols that never have a hostname.
hostlessProtocol = {
    "javascript": true,
    "javascript:": true
}, // protocols that always contain a // bit.
slashedProtocol = {
    "http": true,
    "https": true,
    "ftp": true,
    "gopher": true,
    "file": true,
    "http:": true,
    "https:": true,
    "ftp:": true,
    "gopher:": true,
    "file:": true
}, querystring = require("8f55613cff6e1908");
function urlParse(url, parseQueryString, slashesDenoteHost) {
    if (url && util.isObject(url) && url instanceof Url) return url;
    var u = new Url;
    u.parse(url, parseQueryString, slashesDenoteHost);
    return u;
}
Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
    if (!util.isString(url)) throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
    // Copy chrome, IE, opera backslash-handling behavior.
    // Back slashes before the query string get converted to forward slashes
    // See: https://code.google.com/p/chromium/issues/detail?id=25916
    var queryIndex = url.indexOf("?"), splitter = queryIndex !== -1 && queryIndex < url.indexOf("#") ? "?" : "#", uSplit = url.split(splitter), slashRegex = /\\/g;
    uSplit[0] = uSplit[0].replace(slashRegex, "/");
    url = uSplit.join(splitter);
    var rest = url;
    // trim before proceeding.
    // This is to support parse stuff like "  http://foo.com  \n"
    rest = rest.trim();
    if (!slashesDenoteHost && url.split("#").length === 1) {
        // Try fast path regexp
        var simplePath = simplePathPattern.exec(rest);
        if (simplePath) {
            this.path = rest;
            this.href = rest;
            this.pathname = simplePath[1];
            if (simplePath[2]) {
                this.search = simplePath[2];
                if (parseQueryString) this.query = querystring.parse(this.search.substr(1));
                else this.query = this.search.substr(1);
            } else if (parseQueryString) {
                this.search = "";
                this.query = {};
            }
            return this;
        }
    }
    var proto = protocolPattern.exec(rest);
    if (proto) {
        proto = proto[0];
        var lowerProto = proto.toLowerCase();
        this.protocol = lowerProto;
        rest = rest.substr(proto.length);
    }
    // figure out if it's got a host
    // user@server is *always* interpreted as a hostname, and url
    // resolution will treat //foo/bar as host=foo,path=bar because that's
    // how the browser resolves relative URLs.
    if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
        var slashes = rest.substr(0, 2) === "//";
        if (slashes && !(proto && hostlessProtocol[proto])) {
            rest = rest.substr(2);
            this.slashes = true;
        }
    }
    if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {
        // there's a hostname.
        // the first instance of /, ?, ;, or # ends the host.
        //
        // If there is an @ in the hostname, then non-host chars *are* allowed
        // to the left of the last @ sign, unless some host-ending character
        // comes *before* the @-sign.
        // URLs are obnoxious.
        //
        // ex:
        // http://a@b@c/ => user:a@b host:c
        // http://a@b?@c => user:a host:c path:/?@c
        // v0.12 TODO(isaacs): This is not quite how Chrome does things.
        // Review our test case against browsers more comprehensively.
        // find the first instance of any hostEndingChars
        var hostEnd = -1;
        for(var i = 0; i < hostEndingChars.length; i++){
            var hec = rest.indexOf(hostEndingChars[i]);
            if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
        }
        // at this point, either we have an explicit point where the
        // auth portion cannot go past, or the last @ char is the decider.
        var auth, atSign;
        if (hostEnd === -1) // atSign can be anywhere.
        atSign = rest.lastIndexOf("@");
        else // atSign must be in auth portion.
        // http://a@b/c@d => host:b auth:a path:/c@d
        atSign = rest.lastIndexOf("@", hostEnd);
        // Now we have a portion which is definitely the auth.
        // Pull that off.
        if (atSign !== -1) {
            auth = rest.slice(0, atSign);
            rest = rest.slice(atSign + 1);
            this.auth = decodeURIComponent(auth);
        }
        // the host is the remaining to the left of the first non-host char
        hostEnd = -1;
        for(var i = 0; i < nonHostChars.length; i++){
            var hec = rest.indexOf(nonHostChars[i]);
            if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
        }
        // if we still have not hit it, then the entire thing is a host.
        if (hostEnd === -1) hostEnd = rest.length;
        this.host = rest.slice(0, hostEnd);
        rest = rest.slice(hostEnd);
        // pull out port.
        this.parseHost();
        // we've indicated that there is a hostname,
        // so even if it's empty, it has to be present.
        this.hostname = this.hostname || "";
        // if hostname begins with [ and ends with ]
        // assume that it's an IPv6 address.
        var ipv6Hostname = this.hostname[0] === "[" && this.hostname[this.hostname.length - 1] === "]";
        // validate a little.
        if (!ipv6Hostname) {
            var hostparts = this.hostname.split(/\./);
            for(var i = 0, l = hostparts.length; i < l; i++){
                var part = hostparts[i];
                if (!part) continue;
                if (!part.match(hostnamePartPattern)) {
                    var newpart = "";
                    for(var j = 0, k = part.length; j < k; j++)if (part.charCodeAt(j) > 127) // we replace non-ASCII char with a temporary placeholder
                    // we need this to make sure size of hostname is not
                    // broken by replacing non-ASCII by nothing
                    newpart += "x";
                    else newpart += part[j];
                    // we test again with ASCII char only
                    if (!newpart.match(hostnamePartPattern)) {
                        var validParts = hostparts.slice(0, i);
                        var notHost = hostparts.slice(i + 1);
                        var bit = part.match(hostnamePartStart);
                        if (bit) {
                            validParts.push(bit[1]);
                            notHost.unshift(bit[2]);
                        }
                        if (notHost.length) rest = "/" + notHost.join(".") + rest;
                        this.hostname = validParts.join(".");
                        break;
                    }
                }
            }
        }
        if (this.hostname.length > hostnameMaxLen) this.hostname = "";
        else // hostnames are always lower case.
        this.hostname = this.hostname.toLowerCase();
        if (!ipv6Hostname) // IDNA Support: Returns a punycoded representation of "domain".
        // It only converts parts of the domain name that
        // have non-ASCII characters, i.e. it doesn't matter if
        // you call it with a domain that already is ASCII-only.
        this.hostname = punycode.toASCII(this.hostname);
        var p = this.port ? ":" + this.port : "";
        var h = this.hostname || "";
        this.host = h + p;
        this.href += this.host;
        // strip [ and ] from the hostname
        // the host field still retains them, though
        if (ipv6Hostname) {
            this.hostname = this.hostname.substr(1, this.hostname.length - 2);
            if (rest[0] !== "/") rest = "/" + rest;
        }
    }
    // now rest is set to the post-host stuff.
    // chop off any delim chars.
    if (!unsafeProtocol[lowerProto]) // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for(var i = 0, l = autoEscape.length; i < l; i++){
        var ae = autoEscape[i];
        if (rest.indexOf(ae) === -1) continue;
        var esc = encodeURIComponent(ae);
        if (esc === ae) esc = escape(ae);
        rest = rest.split(ae).join(esc);
    }
    // chop off from the tail first.
    var hash = rest.indexOf("#");
    if (hash !== -1) {
        // got a fragment string.
        this.hash = rest.substr(hash);
        rest = rest.slice(0, hash);
    }
    var qm = rest.indexOf("?");
    if (qm !== -1) {
        this.search = rest.substr(qm);
        this.query = rest.substr(qm + 1);
        if (parseQueryString) this.query = querystring.parse(this.query);
        rest = rest.slice(0, qm);
    } else if (parseQueryString) {
        // no query string, but parseQueryString still requested
        this.search = "";
        this.query = {};
    }
    if (rest) this.pathname = rest;
    if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) this.pathname = "/";
    //to support http.request
    if (this.pathname || this.search) {
        var p = this.pathname || "";
        var s = this.search || "";
        this.path = p + s;
    }
    // finally, reconstruct the href based on what has been validated.
    this.href = this.format();
    return this;
};
// format a parsed object into a url string
function urlFormat(obj) {
    // ensure it's an object, and not a string url.
    // If it's an obj, this is a no-op.
    // this way, you can call url_format() on strings
    // to clean up potentially wonky urls.
    if (util.isString(obj)) obj = urlParse(obj);
    if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
    return obj.format();
}
Url.prototype.format = function() {
    var auth = this.auth || "";
    if (auth) {
        auth = encodeURIComponent(auth);
        auth = auth.replace(/%3A/i, ":");
        auth += "@";
    }
    var protocol = this.protocol || "", pathname = this.pathname || "", hash = this.hash || "", host = false, query = "";
    if (this.host) host = auth + this.host;
    else if (this.hostname) {
        host = auth + (this.hostname.indexOf(":") === -1 ? this.hostname : "[" + this.hostname + "]");
        if (this.port) host += ":" + this.port;
    }
    if (this.query && util.isObject(this.query) && Object.keys(this.query).length) query = querystring.stringify(this.query);
    var search = this.search || query && "?" + query || "";
    if (protocol && protocol.substr(-1) !== ":") protocol += ":";
    // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
    // unless they had them to begin with.
    if (this.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {
        host = "//" + (host || "");
        if (pathname && pathname.charAt(0) !== "/") pathname = "/" + pathname;
    } else if (!host) host = "";
    if (hash && hash.charAt(0) !== "#") hash = "#" + hash;
    if (search && search.charAt(0) !== "?") search = "?" + search;
    pathname = pathname.replace(/[?#]/g, function(match) {
        return encodeURIComponent(match);
    });
    search = search.replace("#", "%23");
    return protocol + host + pathname + search + hash;
};
function urlResolve(source, relative) {
    return urlParse(source, false, true).resolve(relative);
}
Url.prototype.resolve = function(relative) {
    return this.resolveObject(urlParse(relative, false, true)).format();
};
function urlResolveObject(source, relative) {
    if (!source) return relative;
    return urlParse(source, false, true).resolveObject(relative);
}
Url.prototype.resolveObject = function(relative) {
    if (util.isString(relative)) {
        var rel = new Url();
        rel.parse(relative, false, true);
        relative = rel;
    }
    var result = new Url();
    var tkeys = Object.keys(this);
    for(var tk = 0; tk < tkeys.length; tk++){
        var tkey = tkeys[tk];
        result[tkey] = this[tkey];
    }
    // hash is always overridden, no matter what.
    // even href="" will remove it.
    result.hash = relative.hash;
    // if the relative url is empty, then there's nothing left to do here.
    if (relative.href === "") {
        result.href = result.format();
        return result;
    }
    // hrefs like //foo/bar always cut to the protocol.
    if (relative.slashes && !relative.protocol) {
        // take everything except the protocol from relative
        var rkeys = Object.keys(relative);
        for(var rk = 0; rk < rkeys.length; rk++){
            var rkey = rkeys[rk];
            if (rkey !== "protocol") result[rkey] = relative[rkey];
        }
        //urlParse appends trailing / to urls like http://www.example.com
        if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) result.path = result.pathname = "/";
        result.href = result.format();
        return result;
    }
    if (relative.protocol && relative.protocol !== result.protocol) {
        // if it's a known url protocol, then changing
        // the protocol does weird things
        // first, if it's not file:, then we MUST have a host,
        // and if there was a path
        // to begin with, then we MUST have a path.
        // if it is file:, then the host is dropped,
        // because that's known to be hostless.
        // anything else is assumed to be absolute.
        if (!slashedProtocol[relative.protocol]) {
            var keys = Object.keys(relative);
            for(var v = 0; v < keys.length; v++){
                var k = keys[v];
                result[k] = relative[k];
            }
            result.href = result.format();
            return result;
        }
        result.protocol = relative.protocol;
        if (!relative.host && !hostlessProtocol[relative.protocol]) {
            var relPath = (relative.pathname || "").split("/");
            while(relPath.length && !(relative.host = relPath.shift()));
            if (!relative.host) relative.host = "";
            if (!relative.hostname) relative.hostname = "";
            if (relPath[0] !== "") relPath.unshift("");
            if (relPath.length < 2) relPath.unshift("");
            result.pathname = relPath.join("/");
        } else result.pathname = relative.pathname;
        result.search = relative.search;
        result.query = relative.query;
        result.host = relative.host || "";
        result.auth = relative.auth;
        result.hostname = relative.hostname || relative.host;
        result.port = relative.port;
        // to support http.request
        if (result.pathname || result.search) {
            var p = result.pathname || "";
            var s = result.search || "";
            result.path = p + s;
        }
        result.slashes = result.slashes || relative.slashes;
        result.href = result.format();
        return result;
    }
    var isSourceAbs = result.pathname && result.pathname.charAt(0) === "/", isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === "/", mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname, removeAllDots = mustEndAbs, srcPath = result.pathname && result.pathname.split("/") || [], relPath = relative.pathname && relative.pathname.split("/") || [], psychotic = result.protocol && !slashedProtocol[result.protocol];
    // if the url is a non-slashed url, then relative
    // links like ../.. should be able
    // to crawl up to the hostname, as well.  This is strange.
    // result.protocol has already been set by now.
    // Later on, put the first path part into the host field.
    if (psychotic) {
        result.hostname = "";
        result.port = null;
        if (result.host) {
            if (srcPath[0] === "") srcPath[0] = result.host;
            else srcPath.unshift(result.host);
        }
        result.host = "";
        if (relative.protocol) {
            relative.hostname = null;
            relative.port = null;
            if (relative.host) {
                if (relPath[0] === "") relPath[0] = relative.host;
                else relPath.unshift(relative.host);
            }
            relative.host = null;
        }
        mustEndAbs = mustEndAbs && (relPath[0] === "" || srcPath[0] === "");
    }
    if (isRelAbs) {
        // it's absolute.
        result.host = relative.host || relative.host === "" ? relative.host : result.host;
        result.hostname = relative.hostname || relative.hostname === "" ? relative.hostname : result.hostname;
        result.search = relative.search;
        result.query = relative.query;
        srcPath = relPath;
    // fall through to the dot-handling below.
    } else if (relPath.length) {
        // it's relative
        // throw away the existing file, and take the new path instead.
        if (!srcPath) srcPath = [];
        srcPath.pop();
        srcPath = srcPath.concat(relPath);
        result.search = relative.search;
        result.query = relative.query;
    } else if (!util.isNullOrUndefined(relative.search)) {
        // just pull out the search.
        // like href='?foo'.
        // Put this after the other two cases because it simplifies the booleans
        if (psychotic) {
            result.hostname = result.host = srcPath.shift();
            //occationaly the auth can get stuck only in host
            //this especially happens in cases like
            //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
            var authInHost = result.host && result.host.indexOf("@") > 0 ? result.host.split("@") : false;
            if (authInHost) {
                result.auth = authInHost.shift();
                result.host = result.hostname = authInHost.shift();
            }
        }
        result.search = relative.search;
        result.query = relative.query;
        //to support http.request
        if (!util.isNull(result.pathname) || !util.isNull(result.search)) result.path = (result.pathname ? result.pathname : "") + (result.search ? result.search : "");
        result.href = result.format();
        return result;
    }
    if (!srcPath.length) {
        // no path at all.  easy.
        // we've already handled the other stuff above.
        result.pathname = null;
        //to support http.request
        if (result.search) result.path = "/" + result.search;
        else result.path = null;
        result.href = result.format();
        return result;
    }
    // if a url ENDs in . or .., then it must get a trailing slash.
    // however, if it ends in anything else non-slashy,
    // then it must NOT get a trailing slash.
    var last = srcPath.slice(-1)[0];
    var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === "." || last === "..") || last === "";
    // strip single dots, resolve double dots to parent dir
    // if the path tries to go above the root, `up` ends up > 0
    var up = 0;
    for(var i = srcPath.length; i >= 0; i--){
        last = srcPath[i];
        if (last === ".") srcPath.splice(i, 1);
        else if (last === "..") {
            srcPath.splice(i, 1);
            up++;
        } else if (up) {
            srcPath.splice(i, 1);
            up--;
        }
    }
    // if the path is allowed to go above the root, restore leading ..s
    if (!mustEndAbs && !removeAllDots) for(; up--; up)srcPath.unshift("..");
    if (mustEndAbs && srcPath[0] !== "" && (!srcPath[0] || srcPath[0].charAt(0) !== "/")) srcPath.unshift("");
    if (hasTrailingSlash && srcPath.join("/").substr(-1) !== "/") srcPath.push("");
    var isAbsolute = srcPath[0] === "" || srcPath[0] && srcPath[0].charAt(0) === "/";
    // put the host back
    if (psychotic) {
        result.hostname = result.host = isAbsolute ? "" : srcPath.length ? srcPath.shift() : "";
        //occationaly the auth can get stuck only in host
        //this especially happens in cases like
        //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
        var authInHost = result.host && result.host.indexOf("@") > 0 ? result.host.split("@") : false;
        if (authInHost) {
            result.auth = authInHost.shift();
            result.host = result.hostname = authInHost.shift();
        }
    }
    mustEndAbs = mustEndAbs || result.host && srcPath.length;
    if (mustEndAbs && !isAbsolute) srcPath.unshift("");
    if (!srcPath.length) {
        result.pathname = null;
        result.path = null;
    } else result.pathname = srcPath.join("/");
    //to support request.http
    if (!util.isNull(result.pathname) || !util.isNull(result.search)) result.path = (result.pathname ? result.pathname : "") + (result.search ? result.search : "");
    result.auth = relative.auth || result.auth;
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
};
Url.prototype.parseHost = function() {
    var host = this.host;
    var port = portPattern.exec(host);
    if (port) {
        port = port[0];
        if (port !== ":") this.port = port.substr(1);
        host = host.substr(0, host.length - port.length);
    }
    if (host) this.hostname = host;
};

},{"18f46ef94f4b06ad":"4SwIZ","24d8f36536929e9":"8nk0t","8f55613cff6e1908":"7oCJH"}],"4SwIZ":[function(require,module,exports) {
var global = arguments[3];
(function(root) {
    /** Detect free variables */ var freeExports = exports && !exports.nodeType && exports;
    var freeModule = module && !module.nodeType && module;
    var freeGlobal = typeof global == "object" && global;
    if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) root = freeGlobal;
    /**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */ var punycode, /** Highest positive signed 32-bit float value */ maxInt = 2147483647, /** Bootstring parameters */ base = 36, tMin = 1, tMax = 26, skew = 38, damp = 700, initialBias = 72, initialN = 128, delimiter = "-", /** Regular expressions */ regexPunycode = /^xn--/, regexNonASCII = /[^\x20-\x7E]/, regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, /** Error messages */ errors = {
        "overflow": "Overflow: input needs wider integers to process",
        "not-basic": "Illegal input >= 0x80 (not a basic code point)",
        "invalid-input": "Invalid input"
    }, /** Convenience shortcuts */ baseMinusTMin = base - tMin, floor = Math.floor, stringFromCharCode = String.fromCharCode, /** Temporary variable */ key;
    /*--------------------------------------------------------------------------*/ /**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */ function error(type) {
        throw new RangeError(errors[type]);
    }
    /**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */ function map(array, fn) {
        var length = array.length;
        var result = [];
        while(length--)result[length] = fn(array[length]);
        return result;
    }
    /**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */ function mapDomain(string, fn) {
        var parts = string.split("@");
        var result = "";
        if (parts.length > 1) {
            // In email addresses, only the domain name should be punycoded. Leave
            // the local part (i.e. everything up to `@`) intact.
            result = parts[0] + "@";
            string = parts[1];
        }
        // Avoid `split(regex)` for IE8 compatibility. See #17.
        string = string.replace(regexSeparators, ".");
        var labels = string.split(".");
        var encoded = map(labels, fn).join(".");
        return result + encoded;
    }
    /**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */ function ucs2decode(string) {
        var output = [], counter = 0, length = string.length, value, extra;
        while(counter < length){
            value = string.charCodeAt(counter++);
            if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
                // high surrogate, and there is a next character
                extra = string.charCodeAt(counter++);
                if ((extra & 0xFC00) == 0xDC00) output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
                else {
                    // unmatched surrogate; only append this code unit, in case the next
                    // code unit is the high surrogate of a surrogate pair
                    output.push(value);
                    counter--;
                }
            } else output.push(value);
        }
        return output;
    }
    /**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */ function ucs2encode(array) {
        return map(array, function(value) {
            var output = "";
            if (value > 0xFFFF) {
                value -= 0x10000;
                output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
                value = 0xDC00 | value & 0x3FF;
            }
            output += stringFromCharCode(value);
            return output;
        }).join("");
    }
    /**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */ function basicToDigit(codePoint) {
        if (codePoint - 48 < 10) return codePoint - 22;
        if (codePoint - 65 < 26) return codePoint - 65;
        if (codePoint - 97 < 26) return codePoint - 97;
        return base;
    }
    /**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */ function digitToBasic(digit, flag) {
        //  0..25 map to ASCII a..z or A..Z
        // 26..35 map to ASCII 0..9
        return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
    }
    /**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */ function adapt(delta, numPoints, firstTime) {
        var k = 0;
        delta = firstTime ? floor(delta / damp) : delta >> 1;
        delta += floor(delta / numPoints);
        for(; delta > baseMinusTMin * tMax >> 1; k += base)delta = floor(delta / baseMinusTMin);
        return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
    }
    /**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */ function decode(input) {
        // Don't use UCS-2
        var output = [], inputLength = input.length, out, i = 0, n = initialN, bias = initialBias, basic, j, index, oldi, w, k, digit, t, /** Cached calculation results */ baseMinusT;
        // Handle the basic code points: let `basic` be the number of input code
        // points before the last delimiter, or `0` if there is none, then copy
        // the first basic code points to the output.
        basic = input.lastIndexOf(delimiter);
        if (basic < 0) basic = 0;
        for(j = 0; j < basic; ++j){
            // if it's not a basic code point
            if (input.charCodeAt(j) >= 0x80) error("not-basic");
            output.push(input.charCodeAt(j));
        }
        // Main decoding loop: start just after the last delimiter if any basic code
        // points were copied; start at the beginning otherwise.
        for(index = basic > 0 ? basic + 1 : 0; index < inputLength;){
            // `index` is the index of the next character to be consumed.
            // Decode a generalized variable-length integer into `delta`,
            // which gets added to `i`. The overflow checking is easier
            // if we increase `i` as we go, then subtract off its starting
            // value at the end to obtain `delta`.
            for(oldi = i, w = 1, k = base;; k += base){
                if (index >= inputLength) error("invalid-input");
                digit = basicToDigit(input.charCodeAt(index++));
                if (digit >= base || digit > floor((maxInt - i) / w)) error("overflow");
                i += digit * w;
                t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                if (digit < t) break;
                baseMinusT = base - t;
                if (w > floor(maxInt / baseMinusT)) error("overflow");
                w *= baseMinusT;
            }
            out = output.length + 1;
            bias = adapt(i - oldi, out, oldi == 0);
            // `i` was supposed to wrap around from `out` to `0`,
            // incrementing `n` each time, so we'll fix that now:
            if (floor(i / out) > maxInt - n) error("overflow");
            n += floor(i / out);
            i %= out;
            // Insert `n` at position `i` of the output
            output.splice(i++, 0, n);
        }
        return ucs2encode(output);
    }
    /**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */ function encode(input) {
        var n, delta, handledCPCount, basicLength, bias, j, m, q, k, t, currentValue, output = [], /** `inputLength` will hold the number of code points in `input`. */ inputLength, /** Cached calculation results */ handledCPCountPlusOne, baseMinusT, qMinusT;
        // Convert the input in UCS-2 to Unicode
        input = ucs2decode(input);
        // Cache the length
        inputLength = input.length;
        // Initialize the state
        n = initialN;
        delta = 0;
        bias = initialBias;
        // Handle the basic code points
        for(j = 0; j < inputLength; ++j){
            currentValue = input[j];
            if (currentValue < 0x80) output.push(stringFromCharCode(currentValue));
        }
        handledCPCount = basicLength = output.length;
        // `handledCPCount` is the number of code points that have been handled;
        // `basicLength` is the number of basic code points.
        // Finish the basic string - if it is not empty - with a delimiter
        if (basicLength) output.push(delimiter);
        // Main encoding loop:
        while(handledCPCount < inputLength){
            // All non-basic code points < n have been handled already. Find the next
            // larger one:
            for(m = maxInt, j = 0; j < inputLength; ++j){
                currentValue = input[j];
                if (currentValue >= n && currentValue < m) m = currentValue;
            }
            // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
            // but guard against overflow
            handledCPCountPlusOne = handledCPCount + 1;
            if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) error("overflow");
            delta += (m - n) * handledCPCountPlusOne;
            n = m;
            for(j = 0; j < inputLength; ++j){
                currentValue = input[j];
                if (currentValue < n && ++delta > maxInt) error("overflow");
                if (currentValue == n) {
                    // Represent delta as a generalized variable-length integer
                    for(q = delta, k = base;; k += base){
                        t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                        if (q < t) break;
                        qMinusT = q - t;
                        baseMinusT = base - t;
                        output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
                        q = floor(qMinusT / baseMinusT);
                    }
                    output.push(stringFromCharCode(digitToBasic(q, 0)));
                    bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
                    delta = 0;
                    ++handledCPCount;
                }
            }
            ++delta;
            ++n;
        }
        return output.join("");
    }
    /**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */ function toUnicode(input) {
        return mapDomain(input, function(string) {
            return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
        });
    }
    /**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */ function toASCII(input) {
        return mapDomain(input, function(string) {
            return regexNonASCII.test(string) ? "xn--" + encode(string) : string;
        });
    }
    /*--------------------------------------------------------------------------*/ /** Define the public API */ punycode = {
        /**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */ "version": "1.4.1",
        /**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */ "ucs2": {
            "decode": ucs2decode,
            "encode": ucs2encode
        },
        "decode": decode,
        "encode": encode,
        "toASCII": toASCII,
        "toUnicode": toUnicode
    };
    /** Expose `punycode` */ // Some AMD build optimizers, like r.js, check for specific condition patterns
    // like the following:
    if (typeof define == "function" && typeof define.amd == "object" && define.amd) define("punycode", function() {
        return punycode;
    });
    else if (freeExports && freeModule) {
        if (module.exports == freeExports) // in Node.js, io.js, or RingoJS v0.8.0+
        freeModule.exports = punycode;
        else // in Narwhal or RingoJS v0.7.0-
        for(key in punycode)punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
    } else // in Rhino or a web browser
    root.punycode = punycode;
})(this);

},{}],"8nk0t":[function(require,module,exports) {
"use strict";
module.exports = {
    isString: function(arg) {
        return typeof arg === "string";
    },
    isObject: function(arg) {
        return typeof arg === "object" && arg !== null;
    },
    isNull: function(arg) {
        return arg === null;
    },
    isNullOrUndefined: function(arg) {
        return arg == null;
    }
};

},{}],"7oCJH":[function(require,module,exports) {
"use strict";
exports.decode = exports.parse = require("2935616ab9b2a034");
exports.encode = exports.stringify = require("6ba32f78059e7dbc");

},{"2935616ab9b2a034":"3WtwQ","6ba32f78059e7dbc":"i5gNM"}],"3WtwQ":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
"use strict";
// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
}
module.exports = function(qs, sep, eq, options) {
    sep = sep || "&";
    eq = eq || "=";
    var obj = {};
    if (typeof qs !== "string" || qs.length === 0) return obj;
    var regexp = /\+/g;
    qs = qs.split(sep);
    var maxKeys = 1000;
    if (options && typeof options.maxKeys === "number") maxKeys = options.maxKeys;
    var len = qs.length;
    // maxKeys <= 0 means that we should not limit keys count
    if (maxKeys > 0 && len > maxKeys) len = maxKeys;
    for(var i = 0; i < len; ++i){
        var x = qs[i].replace(regexp, "%20"), idx = x.indexOf(eq), kstr, vstr, k, v;
        if (idx >= 0) {
            kstr = x.substr(0, idx);
            vstr = x.substr(idx + 1);
        } else {
            kstr = x;
            vstr = "";
        }
        k = decodeURIComponent(kstr);
        v = decodeURIComponent(vstr);
        if (!hasOwnProperty(obj, k)) obj[k] = v;
        else if (isArray(obj[k])) obj[k].push(v);
        else obj[k] = [
            obj[k],
            v
        ];
    }
    return obj;
};
var isArray = Array.isArray || function(xs) {
    return Object.prototype.toString.call(xs) === "[object Array]";
};

},{}],"i5gNM":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
"use strict";
var stringifyPrimitive = function(v) {
    switch(typeof v){
        case "string":
            return v;
        case "boolean":
            return v ? "true" : "false";
        case "number":
            return isFinite(v) ? v : "";
        default:
            return "";
    }
};
module.exports = function(obj, sep, eq, name) {
    sep = sep || "&";
    eq = eq || "=";
    if (obj === null) obj = undefined;
    if (typeof obj === "object") return map(objectKeys(obj), function(k) {
        var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
        if (isArray(obj[k])) return map(obj[k], function(v) {
            return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
        else return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
    }).join(sep);
    if (!name) return "";
    return encodeURIComponent(stringifyPrimitive(name)) + eq + encodeURIComponent(stringifyPrimitive(obj));
};
var isArray = Array.isArray || function(xs) {
    return Object.prototype.toString.call(xs) === "[object Array]";
};
function map(xs, f) {
    if (xs.map) return xs.map(f);
    var res = [];
    for(var i = 0; i < xs.length; i++)res.push(f(xs[i], i));
    return res;
}
var objectKeys = Object.keys || function(obj) {
    var res = [];
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
    return res;
};

},{}],"6m7rL":[function(require,module,exports) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _tslib = require("tslib");
var _url = require("url"); // Used for OAuth parsing of Cognito Hosted UI
var _urlOpener = require("./urlOpener");
var _oauthStorage = require("./oauthStorage");
var _buffer = require("buffer");
var _auth = require("../types/Auth");
var _core = require("@aws-amplify/core");
var _sha256Js = require("@aws-crypto/sha256-js");
var AMPLIFY_SYMBOL = typeof Symbol !== "undefined" && typeof Symbol.for === "function" ? Symbol.for("amplify_default") : "@@amplify_default";
var dispatchAuthEvent = function(event, data, message) {
    (0, _core.Hub).dispatch("auth", {
        event: event,
        data: data,
        message: message
    }, "Auth", AMPLIFY_SYMBOL);
};
var logger = new (0, _core.ConsoleLogger)("OAuth");
var OAuth = /** @class */ function() {
    function OAuth(_a) {
        var config = _a.config, cognitoClientId = _a.cognitoClientId, _b = _a.scopes, scopes = _b === void 0 ? [] : _b;
        this._urlOpener = config.urlOpener || (0, _urlOpener.launchUri);
        this._config = config;
        this._cognitoClientId = cognitoClientId;
        if (!this.isValidScopes(scopes)) throw Error("scopes must be a String Array");
        this._scopes = scopes;
    }
    OAuth.prototype.isValidScopes = function(scopes) {
        return Array.isArray(scopes) && scopes.every(function(scope) {
            return typeof scope === "string";
        });
    };
    OAuth.prototype.oauthSignIn = function(responseType, domain, redirectSignIn, clientId, provider, customState) {
        if (responseType === void 0) responseType = "code";
        if (provider === void 0) provider = (0, _auth.CognitoHostedUIIdentityProvider).Cognito;
        var generatedState = this._generateState(32);
        /* encodeURIComponent is not URL safe, use urlSafeEncode instead. Cognito
        single-encodes/decodes url on first sign in and double-encodes/decodes url
        when user already signed in. Using encodeURIComponent, Base32, Base64 add
        characters % or = which on further encoding becomes unsafe. '=' create issue
        for parsing query params.
        Refer: https://github.com/aws-amplify/amplify-js/issues/5218 */ var state = customState ? generatedState + "-" + (0, _core.urlSafeEncode)(customState) : generatedState;
        _oauthStorage.setState(state);
        var pkce_key = this._generateRandom(128);
        _oauthStorage.setPKCE(pkce_key);
        var code_challenge = this._generateChallenge(pkce_key);
        var code_challenge_method = "S256";
        var scopesString = this._scopes.join(" ");
        var queryString = Object.entries((0, _tslib.__assign)((0, _tslib.__assign)({
            redirect_uri: redirectSignIn,
            response_type: responseType,
            client_id: clientId,
            identity_provider: provider,
            scope: scopesString,
            state: state
        }, responseType === "code" ? {
            code_challenge: code_challenge
        } : {}), responseType === "code" ? {
            code_challenge_method: code_challenge_method
        } : {})).map(function(_a) {
            var _b = (0, _tslib.__read)(_a, 2), k = _b[0], v = _b[1];
            return encodeURIComponent(k) + "=" + encodeURIComponent(v);
        }).join("&");
        var URL = "https://" + domain + "/oauth2/authorize?" + queryString;
        logger.debug("Redirecting to " + URL);
        this._urlOpener(URL, redirectSignIn);
    };
    OAuth.prototype._handleCodeFlow = function(currentUrl) {
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            var code, currentUrlPathname, redirectSignInPathname, oAuthTokenEndpoint, client_id, redirect_uri, code_verifier, oAuthTokenBody, body, _a, access_token, refresh_token, id_token, error;
            return (0, _tslib.__generator)(this, function(_b) {
                switch(_b.label){
                    case 0:
                        code = ((0, _url.parse)(currentUrl).query || "").split("&").map(function(pairings) {
                            return pairings.split("=");
                        }).reduce(function(accum, _a) {
                            var _b;
                            var _c = (0, _tslib.__read)(_a, 2), k = _c[0], v = _c[1];
                            return (0, _tslib.__assign)((0, _tslib.__assign)({}, accum), (_b = {}, _b[k] = v, _b));
                        }, {
                            code: undefined
                        }).code;
                        currentUrlPathname = (0, _url.parse)(currentUrl).pathname || "/";
                        redirectSignInPathname = (0, _url.parse)(this._config.redirectSignIn).pathname || "/";
                        if (!code || currentUrlPathname !== redirectSignInPathname) return [
                            2 /*return*/ 
                        ];
                        oAuthTokenEndpoint = "https://" + this._config.domain + "/oauth2/token";
                        dispatchAuthEvent("codeFlow", {}, "Retrieving tokens from " + oAuthTokenEndpoint);
                        client_id = (0, _auth.isCognitoHostedOpts)(this._config) ? this._cognitoClientId : this._config.clientID;
                        redirect_uri = (0, _auth.isCognitoHostedOpts)(this._config) ? this._config.redirectSignIn : this._config.redirectUri;
                        code_verifier = _oauthStorage.getPKCE();
                        oAuthTokenBody = (0, _tslib.__assign)({
                            grant_type: "authorization_code",
                            code: code,
                            client_id: client_id,
                            redirect_uri: redirect_uri
                        }, code_verifier ? {
                            code_verifier: code_verifier
                        } : {});
                        logger.debug("Calling token endpoint: " + oAuthTokenEndpoint + " with", oAuthTokenBody);
                        body = Object.entries(oAuthTokenBody).map(function(_a) {
                            var _b = (0, _tslib.__read)(_a, 2), k = _b[0], v = _b[1];
                            return encodeURIComponent(k) + "=" + encodeURIComponent(v);
                        }).join("&");
                        return [
                            4 /*yield*/ ,
                            fetch(oAuthTokenEndpoint, {
                                method: "POST",
                                headers: {
                                    "Content-Type": "application/x-www-form-urlencoded"
                                },
                                body: body
                            })
                        ];
                    case 1:
                        return [
                            4 /*yield*/ ,
                            _b.sent().json()
                        ];
                    case 2:
                        _a = _b.sent(), access_token = _a.access_token, refresh_token = _a.refresh_token, id_token = _a.id_token, error = _a.error;
                        if (error) throw new Error(error);
                        return [
                            2 /*return*/ ,
                            {
                                accessToken: access_token,
                                refreshToken: refresh_token,
                                idToken: id_token
                            }
                        ];
                }
            });
        });
    };
    OAuth.prototype._handleImplicitFlow = function(currentUrl) {
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            var _a, id_token, access_token;
            return (0, _tslib.__generator)(this, function(_b) {
                _a = ((0, _url.parse)(currentUrl).hash || "#").substr(1) // Remove # from returned code
                .split("&").map(function(pairings) {
                    return pairings.split("=");
                }).reduce(function(accum, _a) {
                    var _b;
                    var _c = (0, _tslib.__read)(_a, 2), k = _c[0], v = _c[1];
                    return (0, _tslib.__assign)((0, _tslib.__assign)({}, accum), (_b = {}, _b[k] = v, _b));
                }, {
                    id_token: undefined,
                    access_token: undefined
                }), id_token = _a.id_token, access_token = _a.access_token;
                dispatchAuthEvent("implicitFlow", {}, "Got tokens from " + currentUrl);
                logger.debug("Retrieving implicit tokens from " + currentUrl + " with");
                return [
                    2 /*return*/ ,
                    {
                        accessToken: access_token,
                        idToken: id_token,
                        refreshToken: null
                    }
                ];
            });
        });
    };
    OAuth.prototype.handleAuthResponse = function(currentUrl) {
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            var urlParams, error, error_description, state, _a, _b, e_1;
            return (0, _tslib.__generator)(this, function(_c) {
                switch(_c.label){
                    case 0:
                        _c.trys.push([
                            0,
                            5,
                            ,
                            6
                        ]);
                        urlParams = currentUrl ? (0, _tslib.__assign)((0, _tslib.__assign)({}, ((0, _url.parse)(currentUrl).hash || "#").substr(1).split("&").map(function(entry) {
                            return entry.split("=");
                        }).reduce(function(acc, _a) {
                            var _b = (0, _tslib.__read)(_a, 2), k = _b[0], v = _b[1];
                            return acc[k] = v, acc;
                        }, {})), ((0, _url.parse)(currentUrl).query || "").split("&").map(function(entry) {
                            return entry.split("=");
                        }).reduce(function(acc, _a) {
                            var _b = (0, _tslib.__read)(_a, 2), k = _b[0], v = _b[1];
                            return acc[k] = v, acc;
                        }, {})) : {};
                        error = urlParams.error, error_description = urlParams.error_description;
                        if (error) throw new Error(error_description);
                        state = this._validateState(urlParams);
                        logger.debug("Starting " + this._config.responseType + " flow with " + currentUrl);
                        if (!(this._config.responseType === "code")) return [
                            3 /*break*/ ,
                            2
                        ];
                        _a = [
                            {}
                        ];
                        return [
                            4 /*yield*/ ,
                            this._handleCodeFlow(currentUrl)
                        ];
                    case 1:
                        return [
                            2 /*return*/ ,
                            (0, _tslib.__assign).apply(void 0, [
                                (0, _tslib.__assign).apply(void 0, _a.concat([
                                    _c.sent()
                                ])),
                                {
                                    state: state
                                }
                            ])
                        ];
                    case 2:
                        _b = [
                            {}
                        ];
                        return [
                            4 /*yield*/ ,
                            this._handleImplicitFlow(currentUrl)
                        ];
                    case 3:
                        return [
                            2 /*return*/ ,
                            (0, _tslib.__assign).apply(void 0, [
                                (0, _tslib.__assign).apply(void 0, _b.concat([
                                    _c.sent()
                                ])),
                                {
                                    state: state
                                }
                            ])
                        ];
                    case 4:
                        return [
                            3 /*break*/ ,
                            6
                        ];
                    case 5:
                        e_1 = _c.sent();
                        logger.debug("Error handling auth response.", e_1);
                        throw e_1;
                    case 6:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    OAuth.prototype._validateState = function(urlParams) {
        if (!urlParams) return;
        var savedState = _oauthStorage.getState();
        var returnedState = urlParams.state;
        // This is because savedState only exists if the flow was initiated by Amplify
        if (savedState && savedState !== returnedState) throw new Error("Invalid state in OAuth flow");
        return returnedState;
    };
    OAuth.prototype.signOut = function() {
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            var oAuthLogoutEndpoint, client_id, signout_uri;
            return (0, _tslib.__generator)(this, function(_a) {
                oAuthLogoutEndpoint = "https://" + this._config.domain + "/logout?";
                client_id = (0, _auth.isCognitoHostedOpts)(this._config) ? this._cognitoClientId : this._config.oauth.clientID;
                signout_uri = (0, _auth.isCognitoHostedOpts)(this._config) ? this._config.redirectSignOut : this._config.returnTo;
                oAuthLogoutEndpoint += Object.entries({
                    client_id: client_id,
                    logout_uri: encodeURIComponent(signout_uri)
                }).map(function(_a) {
                    var _b = (0, _tslib.__read)(_a, 2), k = _b[0], v = _b[1];
                    return k + "=" + v;
                }).join("&");
                dispatchAuthEvent("oAuthSignOut", {
                    oAuth: "signOut"
                }, "Signing out from " + oAuthLogoutEndpoint);
                logger.debug("Signing out from " + oAuthLogoutEndpoint);
                return [
                    2 /*return*/ ,
                    this._urlOpener(oAuthLogoutEndpoint, signout_uri)
                ];
            });
        });
    };
    OAuth.prototype._generateState = function(length) {
        var result = "";
        var i = length;
        var chars = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
        for(; i > 0; --i)result += chars[Math.round(Math.random() * (chars.length - 1))];
        return result;
    };
    OAuth.prototype._generateChallenge = function(code) {
        var awsCryptoHash = new (0, _sha256Js.Sha256)();
        awsCryptoHash.update(code);
        var resultFromAWSCrypto = awsCryptoHash.digestSync();
        var b64 = (0, _buffer.Buffer).from(resultFromAWSCrypto).toString("base64");
        var base64URLFromAWSCrypto = this._base64URL(b64);
        return base64URLFromAWSCrypto;
    };
    OAuth.prototype._base64URL = function(string) {
        return string.replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
    };
    OAuth.prototype._generateRandom = function(size) {
        var CHARSET = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~";
        var buffer = new Uint8Array(size);
        if (typeof window !== "undefined" && !!window.crypto) window.crypto.getRandomValues(buffer);
        else for(var i = 0; i < size; i += 1)buffer[i] = Math.random() * CHARSET.length | 0;
        return this._bufferToString(buffer);
    };
    OAuth.prototype._bufferToString = function(buffer) {
        var CHARSET = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        var state = [];
        for(var i = 0; i < buffer.byteLength; i += 1){
            var index = buffer[i] % CHARSET.length;
            state.push(CHARSET[index]);
        }
        return state.join("");
    };
    return OAuth;
}();
exports.default = OAuth;

},{"tslib":"dQtvr","url":"7qjc7","./urlOpener":"dsl2u","./oauthStorage":"8X6Gi","buffer":"fCgem","../types/Auth":"2MR8p","@aws-amplify/core":"hZcAF","@aws-crypto/sha256-js":"fXmvu","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dsl2u":[function(require,module,exports) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "launchUri", ()=>launchUri);
var SELF = "_self";
var launchUri = function(url) {
    var windowProxy = window.open(url, SELF);
    if (windowProxy) return Promise.resolve(windowProxy);
    else return Promise.reject();
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8X6Gi":[function(require,module,exports) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "setState", ()=>setState);
parcelHelpers.export(exports, "getState", ()=>getState);
parcelHelpers.export(exports, "setPKCE", ()=>setPKCE);
parcelHelpers.export(exports, "getPKCE", ()=>getPKCE);
parcelHelpers.export(exports, "clearAll", ()=>clearAll);
var setState = function(state) {
    window.sessionStorage.setItem("oauth_state", state);
};
var getState = function() {
    var oauth_state = window.sessionStorage.getItem("oauth_state");
    window.sessionStorage.removeItem("oauth_state");
    return oauth_state;
};
var setPKCE = function(private_key) {
    window.sessionStorage.setItem("ouath_pkce_key", private_key);
};
var getPKCE = function() {
    var ouath_pkce_key = window.sessionStorage.getItem("ouath_pkce_key");
    window.sessionStorage.removeItem("ouath_pkce_key");
    return ouath_pkce_key;
};
var clearAll = function() {
    window.sessionStorage.removeItem("ouath_pkce_key");
    window.sessionStorage.removeItem("oauth_state");
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9a84K":[function(require,module,exports) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _core = require("@aws-amplify/core");
exports.default = function(callback) {
    if ((0, _core.browserOrNode)().isBrowser && window.location) {
        var url = window.location.href;
        callback({
            url: url
        });
    } else if ((0, _core.browserOrNode)().isNode) ;
    else throw new Error("Not supported");
};

},{"@aws-amplify/core":"hZcAF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"QNLY3":[function(require,module,exports) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AuthError", ()=>AuthError);
parcelHelpers.export(exports, "NoUserPoolError", ()=>NoUserPoolError);
parcelHelpers.export(exports, "authErrorMessages", ()=>authErrorMessages);
var _tslib = require("tslib");
var _core = require("@aws-amplify/core");
var _authErrorStrings = require("./common/AuthErrorStrings");
var logger = new (0, _core.ConsoleLogger)("AuthError");
var AuthError = /** @class */ function(_super) {
    (0, _tslib.__extends)(AuthError, _super);
    function AuthError(type) {
        var _this = this;
        var _a = authErrorMessages[type], message = _a.message, log = _a.log;
        _this = _super.call(this, message) || this;
        // Hack for making the custom error class work when transpiled to es5
        // TODO: Delete the following 2 lines after we change the build target to >= es2015
        _this.constructor = AuthError;
        Object.setPrototypeOf(_this, AuthError.prototype);
        _this.name = "AuthError";
        _this.log = log || message;
        logger.error(_this.log);
        return _this;
    }
    return AuthError;
}(Error);
var NoUserPoolError = /** @class */ function(_super) {
    (0, _tslib.__extends)(NoUserPoolError, _super);
    function NoUserPoolError(type) {
        var _this = _super.call(this, type) || this;
        // Hack for making the custom error class work when transpiled to es5
        // TODO: Delete the following 2 lines after we change the build target to >= es2015
        _this.constructor = NoUserPoolError;
        Object.setPrototypeOf(_this, NoUserPoolError.prototype);
        _this.name = "NoUserPoolError";
        return _this;
    }
    return NoUserPoolError;
}(AuthError);
var authErrorMessages = {
    noConfig: {
        message: (0, _authErrorStrings.AuthErrorStrings).DEFAULT_MSG,
        log: "\n            Error: Amplify has not been configured correctly.\n            This error is typically caused by one of the following scenarios:\n\n            1. Make sure you're passing the awsconfig object to Amplify.configure() in your app's entry point\n                See https://aws-amplify.github.io/docs/js/authentication#configure-your-app for more information\n            \n            2. There might be multiple conflicting versions of amplify packages in your node_modules.\n				Refer to our docs site for help upgrading Amplify packages (https://docs.amplify.aws/lib/troubleshooting/upgrading/q/platform/js)\n        "
    },
    missingAuthConfig: {
        message: (0, _authErrorStrings.AuthErrorStrings).DEFAULT_MSG,
        log: "\n            Error: Amplify has not been configured correctly. \n            The configuration object is missing required auth properties.\n            This error is typically caused by one of the following scenarios:\n\n            1. Did you run `amplify push` after adding auth via `amplify add auth`?\n                See https://aws-amplify.github.io/docs/js/authentication#amplify-project-setup for more information\n\n            2. This could also be caused by multiple conflicting versions of amplify packages, see (https://docs.amplify.aws/lib/troubleshooting/upgrading/q/platform/js) for help upgrading Amplify packages.\n        "
    },
    emptyUsername: {
        message: (0, _authErrorStrings.AuthErrorStrings).EMPTY_USERNAME
    },
    // TODO: should include a list of valid sign-in types
    invalidUsername: {
        message: (0, _authErrorStrings.AuthErrorStrings).INVALID_USERNAME
    },
    emptyPassword: {
        message: (0, _authErrorStrings.AuthErrorStrings).EMPTY_PASSWORD
    },
    emptyCode: {
        message: (0, _authErrorStrings.AuthErrorStrings).EMPTY_CODE
    },
    signUpError: {
        message: (0, _authErrorStrings.AuthErrorStrings).SIGN_UP_ERROR,
        log: "The first parameter should either be non-null string or object"
    },
    noMFA: {
        message: (0, _authErrorStrings.AuthErrorStrings).NO_MFA
    },
    invalidMFA: {
        message: (0, _authErrorStrings.AuthErrorStrings).INVALID_MFA
    },
    emptyChallengeResponse: {
        message: (0, _authErrorStrings.AuthErrorStrings).EMPTY_CHALLENGE
    },
    noUserSession: {
        message: (0, _authErrorStrings.AuthErrorStrings).NO_USER_SESSION
    },
    deviceConfig: {
        message: (0, _authErrorStrings.AuthErrorStrings).DEVICE_CONFIG
    },
    networkError: {
        message: (0, _authErrorStrings.AuthErrorStrings).NETWORK_ERROR
    },
    autoSignInError: {
        message: (0, _authErrorStrings.AuthErrorStrings).AUTOSIGNIN_ERROR
    },
    default: {
        message: (0, _authErrorStrings.AuthErrorStrings).DEFAULT_MSG
    }
};

},{"tslib":"dQtvr","@aws-amplify/core":"hZcAF","./common/AuthErrorStrings":"foZC5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"foZC5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AuthErrorStrings", ()=>AuthErrorStrings);
var AuthErrorStrings;
(function(AuthErrorStrings) {
    AuthErrorStrings["DEFAULT_MSG"] = "Authentication Error";
    AuthErrorStrings["EMPTY_EMAIL"] = "Email cannot be empty";
    AuthErrorStrings["EMPTY_PHONE"] = "Phone number cannot be empty";
    AuthErrorStrings["EMPTY_USERNAME"] = "Username cannot be empty";
    AuthErrorStrings["INVALID_USERNAME"] = "The username should either be a string or one of the sign in types";
    AuthErrorStrings["EMPTY_PASSWORD"] = "Password cannot be empty";
    AuthErrorStrings["EMPTY_CODE"] = "Confirmation code cannot be empty";
    AuthErrorStrings["SIGN_UP_ERROR"] = "Error creating account";
    AuthErrorStrings["NO_MFA"] = "No valid MFA method provided";
    AuthErrorStrings["INVALID_MFA"] = "Invalid MFA type";
    AuthErrorStrings["EMPTY_CHALLENGE"] = "Challenge response cannot be empty";
    AuthErrorStrings["NO_USER_SESSION"] = "Failed to get the session because the user is empty";
    AuthErrorStrings["NETWORK_ERROR"] = "Network Error";
    AuthErrorStrings["DEVICE_CONFIG"] = "Device tracking has not been configured in this User Pool";
    AuthErrorStrings["AUTOSIGNIN_ERROR"] = "Please use your credentials to sign in";
})(AuthErrorStrings || (AuthErrorStrings = {}));

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8Zgej":[function(require,module,exports) {
// src/api.js
// fragments microservice API, defaults to localhost:8080
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Given an authenticated user, request all fragments for this user from the
 * fragments microservice (currently only running locally). We expect a user
 * to have an `idToken` attached, so we can send that along with the request.
 */ parcelHelpers.export(exports, "getUserFragments", ()=>getUserFragments);
parcelHelpers.export(exports, "getUserFragment", ()=>getUserFragment);
parcelHelpers.export(exports, "postUserFragments", ()=>postUserFragments);
const apiUrl = "http://localhost:8080";
async function getUserFragments(user) {
    console.log("Requesting user fragments data...");
    try {
        const res = await fetch(`${apiUrl}/v1/fragments?expand=1`, {
            // Generate headers with the proper Authorization bearer token to pass
            headers: user.authorizationHeaders()
        });
        if (!res.ok) throw new Error(`${res.status} ${res.statusText}`);
        const data = await res.json();
        return data.fragments;
    } catch (err) {
        console.error("Unable to call GET /v1/fragment", {
            err
        });
    }
}
async function getUserFragment(user, id) {
    console.log("Requesting user fragment data...");
    try {
        const res = await fetch(`${apiUrl}/v1/fragments/${id}`, {
            method: "GET",
            headers: user.authorizationHeaders()
        });
        if (!res.ok) throw new Error(`${res.status} ${res.statusText}`);
        return await res.blob();
    } catch (err) {
        console.error("Unable to call GET /v1/fragment", {
            err
        });
    }
}
async function postUserFragments(user, fragment, type) {
    try {
        const res = await fetch(`${apiUrl}/v1/fragments`, {
            method: "POST",
            headers: user.authorizationHeaders(),
            body: type == "application/json" ? JSON.stringify(fragment) : fragment
        });
        if (!res.ok) throw new Error(`${res.status} ${res.statusText}`);
        await res.json();
    } catch (err) {
        console.error("Unable to call POST /v1/fragment", {
            err
        });
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}]},["lKzq4","bNKaB"], "bNKaB", "parcelRequirec284")

//# sourceMappingURL=index.0641b553.js.map
